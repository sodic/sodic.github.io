"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[4837],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(n),c=r,h=d["".concat(l,".").concat(c)]||d[c]||m[c]||s;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var u=2;u<s;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),r=n(86010);const s={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s.tabItem,i),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>b});var a=n(87462),r=n(67294),s=n(86010),i=n(12466),o=n(16550),l=n(91980),u=n(67392),p=n(50012);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function c(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=m(e),[i,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[l,u]=h({queryString:n,groupId:a}),[d,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,p.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),f=(()=>{const e=l??d;return c({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{f&&o(f)}),[f]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!c({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),g(e)}),[u,g,s]),tabValues:s}}var f=n(72389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:o,selectValue:l,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),m=e=>{const t=e.currentTarget,n=p.indexOf(t),a=u[n].value;a!==o&&(d(t),l(a))},c=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>p.push(e),onKeyDown:c,onClick:m},i,{className:(0,s.Z)("tabs__item",k.tabItem,i?.className,{"tabs__item--active":o===t})}),n??t)})))}function w(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function v(e){const t=g(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",k.tabList)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(w,(0,a.Z)({},e,t)))}function b(e){const t=(0,f.Z)();return r.createElement(v,(0,a.Z)({key:String(t)},e))}},46300:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(67294),r=n(50012);function s(e){let{path:t}=e;const[n]=(0,r.Nk)("docusaurus.tab.js-ts"),s=t.lastIndexOf("{"),i=t.slice(s+1,t.length-1),[o,l]=i.split(","),u=t.slice(0,s);return a.createElement("code",null,u+("js"===n?o:l))}},87587:(e,t,n)=>{n.d(t,{Jp:()=>s,aH:()=>i});var a=n(67294);const r=e=>{let{color:t,children:n}=e;return a.createElement("span",{style:{border:`2px solid ${t}`,display:"inline-block",padding:"0.2em 0.4em",color:t,borderRadius:"0.4em",fontSize:"0.8em",lineHeight:"1",fontWeight:"bold"}},n)};function s(){return a.createElement(r,{color:"#0b62f5"},"internal")}function i(){return a.createElement(r,{color:"#f59e0b"},"required")}},20858:(e,t,n)=>{n.d(t,{ZP:()=>o});var a=n(87462),r=(n(67294),n(3905));n(46300);const s={toc:[]},i="wrapper";function o(e){let{components:t,...n}=e;return(0,r.kt)(i,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"Using multiple auth identities for a single user",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Wasp currently doesn't support multiple auth identities for a single user. This means, for example, that a user can't have both an email-based auth identity and a Google-based auth identity. This is something we will add in the future with the introduction of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/wasp-lang/wasp/issues/954"},"account merging feature"),"."),(0,r.kt)("p",{parentName:"admonition"},"Account merging means that multiple auth identities can be merged into a single user account. For example, a user's email and Google identity can be merged into a single user account. Then the user can log in with either their email or Google account and they will be logged into the same account.")))}o.isMDXComponent=!0},95719:(e,t,n)=>{n.d(t,{ZP:()=>o});var a=n(87462),r=(n(67294),n(3905));n(46300);const s={toc:[]},i="wrapper";function o(e){let{components:t,...n}=e;return(0,r.kt)(i,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"You can read more about how the ",(0,r.kt)("inlineCode",{parentName:"p"},"User")," entity is connected to the rest of the auth system in the ",(0,r.kt)("a",{parentName:"p",href:"./entities"},"Auth Entities")," section of the docs."))}o.isMDXComponent=!0},55830:(e,t,n)=>{n.d(t,{ZP:()=>l});var a=n(87462),r=(n(67294),n(3905)),s=(n(46300),n(87587));const i={toc:[]},o="wrapper";function l(e){let{components:t,...n}=e;return(0,r.kt)(o,(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The user entity needs to have the following fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id")," ",(0,r.kt)(s.aH,{mdxType:"Required"})),(0,r.kt)("p",{parentName:"li"},"It can be of any type, but it needs to be marked with ",(0,r.kt)("inlineCode",{parentName:"p"},"@id")))),(0,r.kt)("p",null,"You can add any other fields you want to the user entity. Make sure to also define them in the ",(0,r.kt)("inlineCode",{parentName:"p"},"userSignupFields")," field if they need to be set during the sign-up process."))}l.isMDXComponent=!0},64874:(e,t,n)=>{n.d(t,{ZP:()=>u});var a=n(87462),r=(n(67294),n(3905)),s=(n(46300),n(85162)),i=n(74866);const o={toc:[]},l="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(l,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"userSignupFields")," defines all the extra fields that need to be set on the ",(0,r.kt)("inlineCode",{parentName:"p"},"User")," during the sign-up process. For example, if you have ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"phone")," fields on your ",(0,r.kt)("inlineCode",{parentName:"p"},"User")," entity, you can set them by defining the ",(0,r.kt)("inlineCode",{parentName:"p"},"userSignupFields")," like this:"),(0,r.kt)(i.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/auth.js"',title:'"server/auth.js"'},"import { defineUserSignupFields } from '@wasp/auth/index.js'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    if (!data.address) {\n      throw new Error('Address is required')\n    }\n    return data.address\n  }\n  phone: (data) => data.phone,\n})\n"))),(0,r.kt)(s.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/auth.ts"',title:'"server/auth.ts"'},"import { defineUserSignupFields } from '@wasp/auth/index.js'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    if (!data.address) {\n      throw new Error('Address is required')\n    }\n    return data.address\n  }\n  phone: (data) => data.phone,\n})\n")))),(0,r.kt)("p",null,"Read more about the ",(0,r.kt)("inlineCode",{parentName:"p"},"userSignupFields")," function ",(0,r.kt)("a",{parentName:"p",href:"../auth/overview#1-defining-extra-fields"},"here"),"."))}u.isMDXComponent=!0},35259:(e,t,n)=>{n.d(t,{ZP:()=>u});var a=n(87462),r=(n(67294),n(3905)),s=(n(46300),n(85162)),i=n(74866);const o={toc:[]},l="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(l,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"getUsername")," helper returns the user's username or ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," if the user doesn't have a username auth identity."),(0,r.kt)(i.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/client/MainPage.jsx"',title:'"src/client/MainPage.jsx"'},"import { getUsername } from '@wasp/auth/user'\n\nconst MainPage = ({ user }) => {\n  const username = getUsername(user)\n  // ...\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=src/server/tasks.js",title:"src/server/tasks.js"},"import { getUsername } from '@wasp/auth/user.js'\n\nexport const createTask = async (args, context) => {\n  const username = getUsername(context.user)\n  // ...\n}\n"))),(0,r.kt)(s.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/client/MainPage.tsx"',title:'"src/client/MainPage.tsx"'},"import { getUsername } from '@wasp/auth/user'\nimport { User as AuthenticatedUser } from '@wasp/auth/types'\n\nconst MainPage = ({ user }: { user: AuthenticatedUser }) => {\n  const username = getUsername(user)\n  // ...\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/server/tasks.ts",title:"src/server/tasks.ts"},"import { getUsername } from '@wasp/auth/user.js'\n\nexport const createTask: CreateTask<...>  = async (args, context) => {\n  const username = getUsername(context.user)\n  // ...\n}\n")))))}u.isMDXComponent=!0},39350:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>k,contentTitle:()=>g,default:()=>b,frontMatter:()=>h,metadata:()=>f,toc:()=>y});var a=n(87462),r=(n(67294),n(3905)),s=n(46300),i=n(85162),o=n(74866),l=n(87587),u=n(20858),p=n(95719),d=n(35259),m=n(64874),c=n(55830);const h={title:"Username & Password"},g=void 0,f={unversionedId:"auth/username-and-pass",id:"auth/username-and-pass",title:"Username & Password",description:"Wasp supports username & password authentication out of the box with login and signup flows. It provides you with the server-side implementation and the UI components for the client-side.",source:"@site/docs/auth/username-and-pass.md",sourceDirName:"auth",slug:"/auth/username-and-pass",permalink:"/docs/auth/username-and-pass",draft:!1,editUrl:"https://github.com/wasp-lang/wasp/edit/release/web/docs/auth/username-and-pass.md",tags:[],version:"current",frontMatter:{title:"Username & Password"},sidebar:"docs",previous:{title:"Auth UI",permalink:"/docs/auth/ui"},next:{title:"Email",permalink:"/docs/auth/email"}},k={},y=[{value:"Setting Up Username &amp; Password Authentication",id:"setting-up-username--password-authentication",level:2},{value:"1. Enable Username Authentication",id:"1-enable-username-authentication",level:3},{value:"2. Add the User Entity",id:"2-add-the-user-entity",level:3},{value:"3. Add the Routes and Pages",id:"3-add-the-routes-and-pages",level:3},{value:"4. Create the Client Pages",id:"4-create-the-client-pages",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Customizing the Auth Flow",id:"customizing-the-auth-flow",level:2},{value:"1. Using the <code>signup</code> and <code>login</code> actions",id:"1-using-the-signup-and-login-actions",level:3},{value:"<code>login()</code>",id:"login",level:4},{value:"<code>signup()</code>",id:"signup",level:4},{value:"2. Creating your custom sign-up action",id:"2-creating-your-custom-sign-up-action",level:3},{value:"Username",id:"username",level:4},{value:"Password",id:"password",level:4},{value:"Using Auth",id:"using-auth",level:2},{value:"<code>getUsername</code>",id:"getusername",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"<code>userEntity</code> fields",id:"userentity-fields",level:3},{value:"Fields in the <code>usernameAndPassword</code> dict",id:"fields-in-the-usernameandpassword-dict",level:3},{value:"<code>userSignupFields: ServerImport</code>",id:"usersignupfields-serverimport",level:4}],w={toc:y},v="wrapper";function b(e){let{components:t,...n}=e;return(0,r.kt)(v,(0,a.Z)({},w,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Wasp supports username & password authentication out of the box with login and signup flows. It provides you with the server-side implementation and the UI components for the client-side."),(0,r.kt)("h2",{id:"setting-up-username--password-authentication"},"Setting Up Username & Password Authentication"),(0,r.kt)("p",null,"To set up username authentication we need to:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Enable username authentication in the Wasp file"),(0,r.kt)("li",{parentName:"ol"},"Add the ",(0,r.kt)("inlineCode",{parentName:"li"},"User")," entity"),(0,r.kt)("li",{parentName:"ol"},"Add the auth routes and pages"),(0,r.kt)("li",{parentName:"ol"},"Use Auth UI components in our pages")),(0,r.kt)("p",null,"Structure of the ",(0,r.kt)("inlineCode",{parentName:"p"},"main.wasp")," file we will end up with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},"// Configuring e-mail authentication\napp myApp {\n  auth: { ... }\n}\n// Defining User entity\nentity User { ... }\n// Defining routes and pages\nroute SignupRoute { ... }\npage SignupPage { ... }\n// ...\n")),(0,r.kt)("h3",{id:"1-enable-username-authentication"},"1. Enable Username Authentication"),(0,r.kt)("p",null,"Let's start with adding the following to our ",(0,r.kt)("inlineCode",{parentName:"p"},"main.wasp")," file:"),(0,r.kt)(o.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp" {11}',title:'"main.wasp"',"{11}":!0},'app myApp {\n  wasp: {\n    version: "^0.11.0"\n  },\n  title: "My App",\n  auth: {\n    // 1. Specify the user entity (we\'ll define it next)\n    userEntity: User,\n    methods: {\n      // 2. Enable username authentication\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: "/login"\n  }\n}\n'))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"  {11}',title:'"main.wasp"',"":!0,"{11}":!0},'app myApp {\n  wasp: {\n    version: "^0.11.0"\n  },\n  title: "My App",\n  auth: {\n    // 1. Specify the user entity (we\'ll define it next)\n    userEntity: User,\n    methods: {\n      // 2. Enable username authentication\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: "/login"\n  }\n}\n')))),(0,r.kt)("p",null,"Read more about the ",(0,r.kt)("inlineCode",{parentName:"p"},"usernameAndPassword")," auth method options ",(0,r.kt)("a",{parentName:"p",href:"#fields-in-the-usernameandpassword-dict"},"here"),"."),(0,r.kt)("h3",{id:"2-add-the-user-entity"},"2. Add the User Entity"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"User")," entity can be as simple as including only the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," field:"),(0,r.kt)(o.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},"// 3. Define the user entity\nentity User {=psl\n    // highlight-next-line\n    id                        Int           @id @default(autoincrement())\n    // Add your own fields below\n    // ...\npsl=}\n"))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},"// 3. Define the user entity\nentity User {=psl\n    // highlight-next-line\n    id                        Int           @id @default(autoincrement())\n    // Add your own fields below\n    // ...\npsl=}\n")))),(0,r.kt)(p.ZP,{mdxType:"ReadMoreAboutAuthEntities"}),(0,r.kt)("h3",{id:"3-add-the-routes-and-pages"},"3. Add the Routes and Pages"),(0,r.kt)("p",null,"Next, we need to define the routes and pages for the authentication pages."),(0,r.kt)("p",null,"Add the following to the ",(0,r.kt)("inlineCode",{parentName:"p"},"main.wasp")," file:"),(0,r.kt)(o.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'// ...\n// 4. Define the routes\nroute LoginRoute { path: "/login", to: LoginPage }\npage LoginPage {\n  component: import { Login } from "@client/pages/auth.jsx"\n}\nroute SignupRoute { path: "/signup", to: SignupPage }\npage SignupPage {\n  component: import { Signup } from "@client/pages/auth.jsx"\n}\n'))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'// ...\n// 4. Define the routes\nroute LoginRoute { path: "/login", to: LoginPage }\npage LoginPage {\n  component: import { Login } from "@client/pages/auth.tsx"\n}\nroute SignupRoute { path: "/signup", to: SignupPage }\npage SignupPage {\n  component: import { Signup } from "@client/pages/auth.tsx"\n}\n')))),(0,r.kt)("p",null,"We'll define the React components for these pages in the ",(0,r.kt)(s.Z,{path:"client/pages/auth.{jsx,tsx}",mdxType:"FileExtSwitcher"})," file below."),(0,r.kt)("h3",{id:"4-create-the-client-pages"},"4. Create the Client Pages"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"We are using ",(0,r.kt)("a",{parentName:"p",href:"https://tailwindcss.com/"},"Tailwind CSS")," to style the pages. Read more about how to add it ",(0,r.kt)("a",{parentName:"p",href:"../project/css-frameworks"},"here"),".")),(0,r.kt)("p",null,"Let's create a ",(0,r.kt)(s.Z,{path:"auth.{jsx,tsx}",mdxType:"FileExtSwitcher"})," file in the ",(0,r.kt)("inlineCode",{parentName:"p"},"client/pages")," folder and add the following to it:"),(0,r.kt)(o.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="client/pages/auth.jsx"',title:'"client/pages/auth.jsx"'},'import { LoginForm } from "@wasp/auth/forms/Login";\nimport { SignupForm } from "@wasp/auth/forms/Signup";\nimport { Link } from "react-router-dom";\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className="text-sm font-medium text-gray-900">\n        Don\'t have an account yet? <Link to="/signup">go to signup</Link>.\n      </span>\n    </Layout>\n  );\n}\n\nexport function Signup() {\n  return (\n    <Layout>\n      <SignupForm />\n      <br />\n      <span className="text-sm font-medium text-gray-900">\n        I already have an account (<Link to="/login">go to login</Link>).\n      </span>\n    </Layout>\n  );\n}\n\n// A layout component to center the content\nexport function Layout({ children }) {\n  return (\n    <div className="w-full h-full bg-white">\n      <div className="min-w-full min-h-[75vh] flex items-center justify-center">\n        <div className="w-full h-full max-w-sm p-5 bg-white">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n'))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="client/pages/auth.tsx"',title:'"client/pages/auth.tsx"'},'import { LoginForm } from "@wasp/auth/forms/Login";\nimport { SignupForm } from "@wasp/auth/forms/Signup";\nimport { Link } from "react-router-dom";\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className="text-sm font-medium text-gray-900">\n        Don\'t have an account yet? <Link to="/signup">go to signup</Link>.\n      </span>\n    </Layout>\n  );\n}\n\nexport function Signup() {\n  return (\n    <Layout>\n      <SignupForm />\n      <br />\n      <span className="text-sm font-medium text-gray-900">\n        I already have an account (<Link to="/login">go to login</Link>).\n      </span>\n    </Layout>\n  );\n}\n\n// A layout component to center the content\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className="w-full h-full bg-white">\n      <div className="min-w-full min-h-[75vh] flex items-center justify-center">\n        <div className="w-full h-full max-w-sm p-5 bg-white">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n')))),(0,r.kt)("p",null,"We imported the generated Auth UI components and used them in our pages. Read more about the Auth UI components ",(0,r.kt)("a",{parentName:"p",href:"../auth/ui"},"here"),"."),(0,r.kt)("h3",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"That's it! We have set up username authentication in our app. \ud83c\udf89"),(0,r.kt)("p",null,"Running ",(0,r.kt)("inlineCode",{parentName:"p"},"wasp db migrate-dev")," and then ",(0,r.kt)("inlineCode",{parentName:"p"},"wasp start")," should give you a working app with username authentication. If you want to put some of the pages behind authentication, read the ",(0,r.kt)("a",{parentName:"p",href:"../auth/overview"},"auth overview docs"),"."),(0,r.kt)(u.ZP,{mdxType:"MultipleIdentitiesWarning"}),(0,r.kt)("h2",{id:"customizing-the-auth-flow"},"Customizing the Auth Flow"),(0,r.kt)("p",null,"The login and signup flows are pretty standard: they allow the user to sign up and then log in with their username and password. The signup flow validates the username and password and then creates a new user entity in the database."),(0,r.kt)("p",null,"Read more about the default username and password validation rules in the ",(0,r.kt)("a",{parentName:"p",href:"../auth/overview#default-validations"},"auth overview docs"),"."),(0,r.kt)("p",null,"If you require more control in your authentication flow, you can achieve that in the following ways:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create your UI and use ",(0,r.kt)("inlineCode",{parentName:"li"},"signup")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"login")," actions."),(0,r.kt)("li",{parentName:"ol"},"Create your custom sign-up action which uses the lower-level API, along with your custom code.")),(0,r.kt)("h3",{id:"1-using-the-signup-and-login-actions"},"1. Using the ",(0,r.kt)("inlineCode",{parentName:"h3"},"signup")," and ",(0,r.kt)("inlineCode",{parentName:"h3"},"login")," actions"),(0,r.kt)("h4",{id:"login"},(0,r.kt)("inlineCode",{parentName:"h4"},"login()")),(0,r.kt)("p",null,"An action for logging in the user."),(0,r.kt)("p",null,"It takes two arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"username: string")," ",(0,r.kt)(l.aH,{mdxType:"Required"})),(0,r.kt)("p",{parentName:"li"},"Username of the user logging in.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"password: string")," ",(0,r.kt)(l.aH,{mdxType:"Required"})),(0,r.kt)("p",{parentName:"li"},"Password of the user logging in."))),(0,r.kt)("p",null,"You can use it like this:"),(0,r.kt)(o.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="client/pages/auth.jsx"',title:'"client/pages/auth.jsx"'},"import login from '@wasp/auth/login'\n\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\n\nexport function LoginPage() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState(null)\n  const history = useHistory()\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n    try {\n      await login(username, password)\n      history.push('/')\n    } catch (error) {\n      setError(error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* ... */}\n    </form>\n  );\n}\n"))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="client/pages/auth.tsx"',title:'"client/pages/auth.tsx"'},"import login from '@wasp/auth/login'\n\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\n\nexport function LoginPage() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState<Error | null>(null)\n  const history = useHistory()\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    try {\n      await login(username, password)\n      history.push('/')\n    } catch (error: unknown) {\n      setError(error as Error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* ... */}\n    </form>\n  );\n}\n")))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"When using the exposed ",(0,r.kt)("inlineCode",{parentName:"p"},"login()")," function, make sure to implement your redirect on success login logic (e.g. redirecting to home).")),(0,r.kt)("h4",{id:"signup"},(0,r.kt)("inlineCode",{parentName:"h4"},"signup()")),(0,r.kt)("p",null,"An action for signing up the user. This action does not log in the user, you still need to call ",(0,r.kt)("inlineCode",{parentName:"p"},"login()"),"."),(0,r.kt)("p",null,"It takes one argument:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"userFields: object")," ",(0,r.kt)(l.aH,{mdxType:"Required"})),(0,r.kt)("p",{parentName:"li"},"It has the following fields:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"username: string")," ",(0,r.kt)(l.aH,{mdxType:"Required"}))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"password: string")," ",(0,r.kt)(l.aH,{mdxType:"Required"})))),(0,r.kt)("admonition",{parentName:"li",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"By default, Wasp will only save the ",(0,r.kt)("inlineCode",{parentName:"p"},"username")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"password")," fields. If you want to add extra fields to your signup process, read about ",(0,r.kt)("a",{parentName:"p",href:"../auth/overview#customizing-the-signup-process"},"defining extra signup fields"),".")))),(0,r.kt)("p",null,"You can use it like this:"),(0,r.kt)(o.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="client/pages/auth.jsx"',title:'"client/pages/auth.jsx"'},"import signup from '@wasp/auth/signup'\nimport login from '@wasp/auth/login'\n\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\n\nexport function Signup() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState(null)\n  const history = useHistory()\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n    try {\n      await signup({\n        username,\n        password,\n      })\n      await login(username, password)\n      history.push(\"/\")\n    } catch (error) {\n      setError(error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* ... */}\n    </form>\n  );\n}\n"))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="client/pages/auth.tsx"',title:'"client/pages/auth.tsx"'},"import signup from '@wasp/auth/signup'\nimport login from '@wasp/auth/login'\n\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\n\nexport function Signup() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState<Error | null>(null)\n  const history = useHistory()\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    try {\n      await signup({\n        username,\n        password,\n      })\n      await login(username, password)\n      history.push(\"/\")\n    } catch (error: unknown) {\n      setError(error as Error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* ... */}\n    </form>\n  );\n}\n")))),(0,r.kt)("h3",{id:"2-creating-your-custom-sign-up-action"},"2. Creating your custom sign-up action"),(0,r.kt)("p",null,"The code of your custom sign-up action can look like this:"),(0,r.kt)(o.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'// ...\n\naction customSignup {\n  fn: import { signup } from "@server/auth/signup.js",\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/server/auth/signup.js"',title:'"src/server/auth/signup.js"'},"import {\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n  ensureValidUsername,\n} from '@wasp/auth/validation.js'\nimport {\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from '@wasp/auth/utils.js'\n\nexport const signup = async (args, _context) => {\n  ensureValidUsername(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('username', args.username)\n    const providerData = await sanitizeAndSerializeProviderData({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {},\n    )\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n"))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'// ...\n\naction customSignup {\n  fn: import { signup } from "@server/auth/signup.js",\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/server/auth/signup.ts"',title:'"src/server/auth/signup.ts"'},"import {\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n  ensureValidUsername,\n} from '@wasp/auth/validation.js'\nimport {\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from '@wasp/auth/utils.js'\nimport type { CustomSignup } from '@wasp/actions/types'\n\ntype CustomSignupInput = {\n  username: string\n  password: string\n}\ntype CustomSignupOutput = {\n  success: boolean\n  message: string\n}\n\nexport const signup: CustomSignup<\n  CustomSignupInput,\n  CustomSignupOutput\n> = async (args, _context) => {\n  ensureValidUsername(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('username', args.username)\n    const providerData = await sanitizeAndSerializeProviderData<'username'>({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {},\n    )\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n")))),(0,r.kt)("p",null,"We suggest using the built-in field validators for your authentication flow. You can import them from ",(0,r.kt)("inlineCode",{parentName:"p"},"@wasp/auth/validation.js"),". These are the same validators that Wasp uses internally for the default authentication flow."),(0,r.kt)("h4",{id:"username"},"Username"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ensureValidUsername(args)")),(0,r.kt)("p",{parentName:"li"},"Checks if the username is valid and throws an error if it's not. Read more about the validation rules ",(0,r.kt)("a",{parentName:"p",href:"../auth/overview#default-validations"},"here"),"."))),(0,r.kt)("h4",{id:"password"},"Password"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ensurePasswordIsPresent(args)")),(0,r.kt)("p",{parentName:"li"},"Checks if the password is present and throws an error if it's not.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ensureValidPassword(args)")),(0,r.kt)("p",{parentName:"li"},"Checks if the password is valid and throws an error if it's not. Read more about the validation rules ",(0,r.kt)("a",{parentName:"p",href:"../auth/overview#default-validations"},"here"),"."))),(0,r.kt)("h2",{id:"using-auth"},"Using Auth"),(0,r.kt)("p",null,"To read more about how to set up the logout button and how to get access to the logged-in user in our client and server code, read the ",(0,r.kt)("a",{parentName:"p",href:"../auth/overview"},"auth overview docs"),"."),(0,r.kt)("h3",{id:"getusername"},(0,r.kt)("inlineCode",{parentName:"h3"},"getUsername")),(0,r.kt)("p",null,"If you are looking to access the user's username in your code, you can do that by accessing the info about the user that is stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"user.auth.identities")," array."),(0,r.kt)("p",null,"To make things a bit easier for you, Wasp offers the ",(0,r.kt)("inlineCode",{parentName:"p"},"getUsername")," helper."),(0,r.kt)(d.ZP,{mdxType:"GetUsername"}),(0,r.kt)("h2",{id:"api-reference"},"API Reference"),(0,r.kt)("h3",{id:"userentity-fields"},(0,r.kt)("inlineCode",{parentName:"h3"},"userEntity")," fields"),(0,r.kt)(o.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'app myApp {\n  wasp: {\n    version: "^0.11.0"\n  },\n  title: "My App",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: "/login"\n  }\n}\n\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\npsl=}\n'))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'app myApp {\n  wasp: {\n    version: "^0.11.0"\n  },\n  title: "My App",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: "/login"\n  }\n}\n\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\npsl=}\n')))),(0,r.kt)(c.ZP,{mdxType:"UserFieldsExplainer"}),(0,r.kt)("h3",{id:"fields-in-the-usernameandpassword-dict"},"Fields in the ",(0,r.kt)("inlineCode",{parentName:"h3"},"usernameAndPassword")," dict"),(0,r.kt)(o.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'app myApp {\n  wasp: {\n    version: "^0.11.0"\n  },\n  title: "My App",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {\n        userSignupFields: import { userSignupFields } from "@server/auth/email.js",\n      },\n    },\n    onAuthFailedRedirectTo: "/login"\n  }\n}\n// ...\n'))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'app myApp {\n  wasp: {\n    version: "^0.11.0"\n  },\n  title: "My App",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {\n        userSignupFields: import { userSignupFields } from "@server/auth/email.js",\n      },\n    },\n    onAuthFailedRedirectTo: "/login"\n  }\n}\n// ...\n')))),(0,r.kt)("h4",{id:"usersignupfields-serverimport"},(0,r.kt)("inlineCode",{parentName:"h4"},"userSignupFields: ServerImport")),(0,r.kt)(m.ZP,{mdxType:"UserSignupFieldsExplainer"}))}b.isMDXComponent=!0}}]);