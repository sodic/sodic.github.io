"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[6242],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),c=i,h=m["".concat(l,".").concat(c)]||m[c]||d[c]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),i=n(86010);const r={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r.tabItem,o),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>b});var a=n(87462),i=n(67294),r=n(86010),o=n(12466),s=n(16550),l=n(91980),p=n(67392),u=n(50012);function m(e){return function(e){return i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:i}}=e;return{value:t,label:n,attributes:a,default:i}}))}function d(e){const{values:t,children:n}=e;return(0,i.useMemo)((()=>{const e=t??m(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function c(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(r),(0,i.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=d(e),[o,s]=(0,i.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[l,p]=h({queryString:n,groupId:a}),[m,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,u.Nk)(n);return[a,(0,i.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),g=(()=>{const e=l??m;return c({value:e,tabValues:r})?e:null})();(0,i.useLayoutEffect)((()=>{g&&s(g)}),[g]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!c({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);s(e),p(e),f(e)}),[p,f,r]),tabValues:r}}var g=n(72389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function w(e){let{className:t,block:n,selectedValue:s,selectValue:l,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:m}=(0,o.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),a=p[n].value;a!==s&&(m(t),l(a))},c=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:o}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:c,onClick:d},o,{className:(0,r.Z)("tabs__item",k.tabItem,o?.className,{"tabs__item--active":s===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=f(e);return i.createElement("div",{className:(0,r.Z)("tabs-container",k.tabList)},i.createElement(w,(0,a.Z)({},e,t)),i.createElement(v,(0,a.Z)({},e,t)))}function b(e){const t=(0,g.Z)();return i.createElement(y,(0,a.Z)({key:String(t)},e))}},46300:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(67294),i=n(50012);function r(e){let{path:t}=e;const[n]=(0,i.Nk)("docusaurus.tab.js-ts"),r=t.lastIndexOf("{"),o=t.slice(r+1,t.length-1),[s,l]=o.split(","),p=t.slice(0,r);return a.createElement("code",null,p+("js"===n?s:l))}},87587:(e,t,n)=>{n.d(t,{Jp:()=>r,aH:()=>o});var a=n(67294);const i=e=>{let{color:t,children:n}=e;return a.createElement("span",{style:{border:`2px solid ${t}`,display:"inline-block",padding:"0.2em 0.4em",color:t,borderRadius:"0.4em",fontSize:"0.8em",lineHeight:"1",fontWeight:"bold"}},n)};function r(){return a.createElement(i,{color:"#0b62f5"},"internal")}function o(){return a.createElement(i,{color:"#f59e0b"},"required")}},50539:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>u,default:()=>g,frontMatter:()=>p,metadata:()=>m,toc:()=>c});var a=n(87462),i=(n(67294),n(3905)),r=n(46300),o=n(85162),s=n(74866),l=n(87587);const p={title:"Email"},u=void 0,m={unversionedId:"auth/email",id:"version-0.11.8/auth/email",title:"Email",description:'Wasp supports e-mail authentication out of the box, along with email verification and "forgot your password?" flows. It provides you with the server-side implementation and email templates for all of these flows.',source:"@site/versioned_docs/version-0.11.8/auth/email.md",sourceDirName:"auth",slug:"/auth/email",permalink:"/docs/0.11.8/auth/email",draft:!1,editUrl:"https://github.com/wasp-lang/wasp/edit/release/web/versioned_docs/version-0.11.8/auth/email.md",tags:[],version:"0.11.8",frontMatter:{title:"Email"},sidebar:"docs",previous:{title:"Username & Password",permalink:"/docs/0.11.8/auth/username-and-pass"},next:{title:"Overview",permalink:"/docs/0.11.8/auth/social-auth/overview"}},d={},c=[{value:"Setting Up Email Authentication",id:"setting-up-email-authentication",level:2},{value:"1. Enable Email Authentication in <code>main.wasp</code>",id:"1-enable-email-authentication-in-mainwasp",level:3},{value:"2. Add the User Entity",id:"2-add-the-user-entity",level:3},{value:"3. Add the Routes and Pages",id:"3-add-the-routes-and-pages",level:3},{value:"4. Create the Client Pages",id:"4-create-the-client-pages",level:3},{value:"5. Set up an Email Sender",id:"5-set-up-an-email-sender",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Login and Signup Flows",id:"login-and-signup-flows",level:2},{value:"Login",id:"login",level:3},{value:"Signup",id:"signup",level:3},{value:"Email Verification Flow",id:"email-verification-flow",level:2},{value:"Email Verification Page",id:"email-verification-page",level:3},{value:"Password Reset Flow",id:"password-reset-flow",level:2},{value:"Request Password Reset Page",id:"request-password-reset-page",level:3},{value:"Password Reset Page",id:"password-reset-page",level:3},{value:"Using The Auth",id:"using-the-auth",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"<code>userEntity</code> fields",id:"userentity-fields",level:3},{value:"Fields in the <code>email</code> dict",id:"fields-in-the-email-dict",level:3},{value:"<code>fromField: EmailFromField</code> <Required />",id:"fromfield-emailfromfield-",level:4},{value:"<code>emailVerification: EmailVerificationConfig</code> <Required />",id:"emailverification-emailverificationconfig-",level:4},{value:"<code>passwordReset: PasswordResetConfig</code> <Required />",id:"passwordreset-passwordresetconfig-",level:4},{value:"<code>allowUnverifiedLogin: bool</code>: specifies whether the user can login without verifying their e-mail address",id:"allowunverifiedlogin-bool-specifies-whether-the-user-can-login-without-verifying-their-e-mail-address",level:4}],h={toc:c},f="wrapper";function g(e){let{components:t,...p}=e;return(0,i.kt)(f,(0,a.Z)({},h,p,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,'Wasp supports e-mail authentication out of the box, along with email verification and "forgot your password?" flows. It provides you with the server-side implementation and email templates for all of these flows.'),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Auth UI",src:n(86164).Z,width:"1068",height:"464"})),(0,i.kt)("admonition",{title:"Using email auth and social auth together",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"If a user signs up with Google or Github (and you set it up to save their social provider e-mail info on the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," entity), they'll be able to reset their password and login with e-mail and password \u2705"),(0,i.kt)("p",{parentName:"admonition"},"If a user signs up with the e-mail and password and then tries to login with a social provider (Google or Github), they won't be able to do that \u274c"),(0,i.kt)("p",{parentName:"admonition"},"In the future, we will lift this limitation and enable smarter merging of accounts.")),(0,i.kt)("h2",{id:"setting-up-email-authentication"},"Setting Up Email Authentication"),(0,i.kt)("p",null,"We'll need to take the following steps to set up email authentication:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Enable email authentication in the Wasp file"),(0,i.kt)("li",{parentName:"ol"},"Add the user entity"),(0,i.kt)("li",{parentName:"ol"},"Add the routes and pages"),(0,i.kt)("li",{parentName:"ol"},"Use Auth UI components in our pages"),(0,i.kt)("li",{parentName:"ol"},"Set up the email sender")),(0,i.kt)("p",null,"Structure of the ",(0,i.kt)("inlineCode",{parentName:"p"},"main.wasp")," file we will end up with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},"// Configuring e-mail authentication\napp myApp {\n  auth: { ... }\n}\n\n// Defining User entity\nentity User { ... }\n\n// Defining routes and pages\nroute SignupRoute { ... }\npage SignupPage { ... }\n// ...\n")),(0,i.kt)("h3",{id:"1-enable-email-authentication-in-mainwasp"},"1. Enable Email Authentication in ",(0,i.kt)("inlineCode",{parentName:"h3"},"main.wasp")),(0,i.kt)("p",null,"Let's start with adding the following to our ",(0,i.kt)("inlineCode",{parentName:"p"},"main.wasp")," file:"),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'app myApp {\n  wasp: {\n    version: "^0.11.0"\n  },\n  title: "My App",\n  auth: {\n    // 1. Specify the user entity (we\'ll define it next)\n    userEntity: User,\n    methods: {\n      // 2. Enable email authentication\n      email: {\n        // 3. Specify the email from field\n        fromField: {\n          name: "My App Postman",\n          email: "hello@itsme.com"\n        },\n        // 4. Specify the email verification and password reset options (we\'ll talk about them later)\n        emailVerification: {\n          clientRoute: EmailVerificationRoute,\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute,\n        },\n        allowUnverifiedLogin: false,\n      },\n    },\n    onAuthFailedRedirectTo: "/login",\n    onAuthSucceededRedirectTo: "/"\n  },\n}\n'))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'app myApp {\n  wasp: {\n    version: "^0.11.0"\n  },\n  title: "My App",\n  auth: {\n    // 1. Specify the user entity (we\'ll define it next)\n    userEntity: User,\n    methods: {\n      // 2. Enable email authentication\n      email: {\n        // 3. Specify the email from field\n        fromField: {\n          name: "My App Postman",\n          email: "hello@itsme.com"\n        },\n        // 4. Specify the email verification and password reset options (we\'ll talk about them later)\n        emailVerification: {\n          clientRoute: EmailVerificationRoute,\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute,\n        },\n        allowUnverifiedLogin: false,\n      },\n    },\n    onAuthFailedRedirectTo: "/login",\n    onAuthSucceededRedirectTo: "/"\n  },\n}\n')))),(0,i.kt)("p",null,"Read more about the ",(0,i.kt)("inlineCode",{parentName:"p"},"email")," auth method options ",(0,i.kt)("a",{parentName:"p",href:"#fields-in-the-email-dict"},"here"),"."),(0,i.kt)("h3",{id:"2-add-the-user-entity"},"2. Add the User Entity"),(0,i.kt)("p",null,"When email authentication is enabled, Wasp expects certain fields in your ",(0,i.kt)("inlineCode",{parentName:"p"},"userEntity"),". Let's add these fields to our ",(0,i.kt)("inlineCode",{parentName:"p"},"main.wasp")," file:"),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp" {4-8}',title:'"main.wasp"',"{4-8}":!0},"// 5. Define the user entity\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    email                     String?       @unique\n    password                  String?\n    isEmailVerified           Boolean       @default(false)\n    emailVerificationSentAt   DateTime?\n    passwordResetSentAt       DateTime?\n    // Add your own fields below\n    // ...\npsl=}\n"))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp" {4-8}',title:'"main.wasp"',"{4-8}":!0},"// 5. Define the user entity\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    email                     String?       @unique\n    password                  String?\n    isEmailVerified           Boolean       @default(false)\n    emailVerificationSentAt   DateTime?\n    passwordResetSentAt       DateTime?\n    // Add your own fields below\n    // ...\npsl=}\n")))),(0,i.kt)("p",null,"Read more about the ",(0,i.kt)("inlineCode",{parentName:"p"},"userEntity")," fields ",(0,i.kt)("a",{parentName:"p",href:"#userentity-fields"},"here"),"."),(0,i.kt)("h3",{id:"3-add-the-routes-and-pages"},"3. Add the Routes and Pages"),(0,i.kt)("p",null,"Next, we need to define the routes and pages for the authentication pages."),(0,i.kt)("p",null,"Add the following to the ",(0,i.kt)("inlineCode",{parentName:"p"},"main.wasp")," file:"),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'// ...\n\n// 6. Define the routes\nroute LoginRoute { path: "/login", to: LoginPage }\npage LoginPage {\n  component: import { Login } from "@client/pages/auth.jsx"\n}\n\nroute SignupRoute { path: "/signup", to: SignupPage }\npage SignupPage {\n  component: import { Signup } from "@client/pages/auth.jsx"\n}\n\nroute RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }\npage RequestPasswordResetPage {\n  component: import { RequestPasswordReset } from "@client/pages/auth.jsx",\n}\n\nroute PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }\npage PasswordResetPage {\n  component: import { PasswordReset } from "@client/pages/auth.jsx",\n}\n\nroute EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }\npage EmailVerificationPage {\n  component: import { EmailVerification } from "@client/pages/auth.jsx",\n}\n'))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'// ...\n\n// 6. Define the routes\nroute LoginRoute { path: "/login", to: LoginPage }\npage LoginPage {\n  component: import { Login } from "@client/pages/auth.tsx"\n}\n\nroute SignupRoute { path: "/signup", to: SignupPage }\npage SignupPage {\n  component: import { Signup } from "@client/pages/auth.tsx"\n}\n\nroute RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }\npage RequestPasswordResetPage {\n  component: import { RequestPasswordReset } from "@client/pages/auth.tsx",\n}\n\nroute PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }\npage PasswordResetPage {\n  component: import { PasswordReset } from "@client/pages/auth.tsx",\n}\n\nroute EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }\npage EmailVerificationPage {\n  component: import { EmailVerification } from "@client/pages/auth.tsx",\n}\n')))),(0,i.kt)("p",null,"We'll define the React components for these pages in the ",(0,i.kt)(r.Z,{path:"client/pages/auth.{jsx,tsx}",mdxType:"FileExtSwitcher"})," file below."),(0,i.kt)("h3",{id:"4-create-the-client-pages"},"4. Create the Client Pages"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"We are using ",(0,i.kt)("a",{parentName:"p",href:"https://tailwindcss.com/"},"Tailwind CSS")," to style the pages. Read more about how to add it ",(0,i.kt)("a",{parentName:"p",href:"../project/css-frameworks"},"here"),".")),(0,i.kt)("p",null,"Let's create a ",(0,i.kt)(r.Z,{path:"auth.{jsx,tsx}",mdxType:"FileExtSwitcher"})," file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"client/pages")," folder and add the following to it:"),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="client/pages/auth.jsx"',title:'"client/pages/auth.jsx"'},'import { LoginForm } from "@wasp/auth/forms/Login";\nimport { SignupForm } from "@wasp/auth/forms/Signup";\nimport { VerifyEmailForm } from "@wasp/auth/forms/VerifyEmail";\nimport { ForgotPasswordForm } from "@wasp/auth/forms/ForgotPassword";\nimport { ResetPasswordForm } from "@wasp/auth/forms/ResetPassword";\nimport { Link } from "react-router-dom";\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className="text-sm font-medium text-gray-900">\n        Don\'t have an account yet? <Link to="/signup">go to signup</Link>.\n      </span>\n      <br />\n      <span className="text-sm font-medium text-gray-900">\n        Forgot your password? <Link to="/request-password-reset">reset it</Link>\n        .\n      </span>\n    </Layout>\n  );\n}\n\nexport function Signup() {\n  return (\n    <Layout>\n      <SignupForm />\n      <br />\n      <span className="text-sm font-medium text-gray-900">\n        I already have an account (<Link to="/login">go to login</Link>).\n      </span>\n    </Layout>\n  );\n}\n\nexport function EmailVerification() {\n  return (\n    <Layout>\n      <VerifyEmailForm />\n      <br />\n      <span className="text-sm font-medium text-gray-900">\n        If everything is okay, <Link to="/login">go to login</Link>\n      </span>\n    </Layout>\n  );\n}\n\nexport function RequestPasswordReset() {\n  return (\n    <Layout>\n      <ForgotPasswordForm />\n    </Layout>\n  );\n}\n\nexport function PasswordReset() {\n  return (\n    <Layout>\n      <ResetPasswordForm />\n      <br />\n      <span className="text-sm font-medium text-gray-900">\n        If everything is okay, <Link to="/login">go to login</Link>\n      </span>\n    </Layout>\n  );\n}\n\n// A layout component to center the content\nexport function Layout({ children }) {\n  return (\n    <div className="w-full h-full bg-white">\n      <div className="min-w-full min-h-[75vh] flex items-center justify-center">\n        <div className="w-full h-full max-w-sm p-5 bg-white">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n'))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="client/pages/auth.tsx"',title:'"client/pages/auth.tsx"'},'import { LoginForm } from "@wasp/auth/forms/Login";\nimport { SignupForm } from "@wasp/auth/forms/Signup";\nimport { VerifyEmailForm } from "@wasp/auth/forms/VerifyEmail";\nimport { ForgotPasswordForm } from "@wasp/auth/forms/ForgotPassword";\nimport { ResetPasswordForm } from "@wasp/auth/forms/ResetPassword";\nimport { Link } from "react-router-dom";\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className="text-sm font-medium text-gray-900">\n        Don\'t have an account yet? <Link to="/signup">go to signup</Link>.\n      </span>\n      <br />\n      <span className="text-sm font-medium text-gray-900">\n        Forgot your password? <Link to="/request-password-reset">reset it</Link>\n        .\n      </span>\n    </Layout>\n  );\n}\n\nexport function Signup() {\n  return (\n    <Layout>\n      <SignupForm />\n      <br />\n      <span className="text-sm font-medium text-gray-900">\n        I already have an account (<Link to="/login">go to login</Link>).\n      </span>\n    </Layout>\n  );\n}\n\nexport function EmailVerification() {\n  return (\n    <Layout>\n      <VerifyEmailForm />\n      <br />\n      <span className="text-sm font-medium text-gray-900">\n        If everything is okay, <Link to="/login">go to login</Link>\n      </span>\n    </Layout>\n  );\n}\n\nexport function RequestPasswordReset() {\n  return (\n    <Layout>\n      <ForgotPasswordForm />\n    </Layout>\n  );\n}\n\nexport function PasswordReset() {\n  return (\n    <Layout>\n      <ResetPasswordForm />\n      <br />\n      <span className="text-sm font-medium text-gray-900">\n        If everything is okay, <Link to="/login">go to login</Link>\n      </span>\n    </Layout>\n  );\n}\n\n// A layout component to center the content\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className="w-full h-full bg-white">\n      <div className="min-w-full min-h-[75vh] flex items-center justify-center">\n        <div className="w-full h-full max-w-sm p-5 bg-white">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n')))),(0,i.kt)("p",null,"We imported the generated Auth UI components and used them in our pages. Read more about the Auth UI components ",(0,i.kt)("a",{parentName:"p",href:"../auth/ui"},"here"),"."),(0,i.kt)("h3",{id:"5-set-up-an-email-sender"},"5. Set up an Email Sender"),(0,i.kt)("p",null,"To support e-mail verification and password reset flows, we need an e-mail sender. Luckily, Wasp supports several email providers out of the box."),(0,i.kt)("p",null,"We'll use SendGrid in this guide to send our e-mails. You can use any of the supported email providers."),(0,i.kt)("p",null,"To set up SendGrid to send emails, we will add the following to our ",(0,i.kt)("inlineCode",{parentName:"p"},"main.wasp")," file:"),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},"app myApp {\n  // ...\n  // 7. Set up the email sender\n  emailSender: {\n    provider: SendGrid,\n  }\n}\n"))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},"app myApp {\n  // ...\n  // 7. Set up the email sender\n  emailSender: {\n    provider: SendGrid,\n  }\n}\n")))),(0,i.kt)("p",null,"... and add the following to our ",(0,i.kt)("inlineCode",{parentName:"p"},".env.server")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c",metastring:'title=".env.server"',title:'".env.server"'},"SENDGRID_API_KEY=<your key>\n")),(0,i.kt)("p",null,"If you are not sure how to get a SendGrid API key, read more ",(0,i.kt)("a",{parentName:"p",href:"../advanced/email#getting-the-api-key"},"here"),"."),(0,i.kt)("p",null,"Read more about setting up email senders in the ",(0,i.kt)("a",{parentName:"p",href:"../advanced/email"},"sending emails docs"),"."),(0,i.kt)("h3",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"That's it! We have set up email authentication in our app. \ud83c\udf89"),(0,i.kt)("p",null,"Running ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp db migrate-dev")," and then ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp start")," should give you a working app with email authentication. If you want to put some of the pages behind authentication, read the ",(0,i.kt)("a",{parentName:"p",href:"../auth/overview"},"using auth docs"),"."),(0,i.kt)("h2",{id:"login-and-signup-flows"},"Login and Signup Flows"),(0,i.kt)("h3",{id:"login"},"Login"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Auth UI",src:n(89958).Z,width:"1068",height:"464"})),(0,i.kt)("p",null,"If logging in with an unverified email is ",(0,i.kt)("em",{parentName:"p"},"allowed"),", the user will be able to login with an unverified email address. If logging in with an unverified email is ",(0,i.kt)("em",{parentName:"p"},"not allowed"),", the user will be shown an error message."),(0,i.kt)("p",null,"Read more about the ",(0,i.kt)("inlineCode",{parentName:"p"},"allowUnverifiedLogin")," option ",(0,i.kt)("a",{parentName:"p",href:"#allowunverifiedlogin-bool-specifies-whether-the-user-can-login-without-verifying-their-e-mail-address"},"here"),"."),(0,i.kt)("h3",{id:"signup"},"Signup"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Auth UI",src:n(12433).Z,width:"1017",height:"435"})),(0,i.kt)("p",null,"Some of the behavior you get out of the box:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Rate limiting"),(0,i.kt)("p",{parentName:"li"},"We are limiting the rate of sign-up requests to ",(0,i.kt)("strong",{parentName:"p"},"1 request per minute")," per email address. This is done to prevent spamming.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Preventing user email leaks"),(0,i.kt)("p",{parentName:"li"},"If somebody tries to signup with an email that already exists and it's verified, we ",(0,i.kt)("em",{parentName:"p"},"pretend")," that the account was created instead of saying it's an existing account. This is done to prevent leaking the user's email address.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Allowing registration for unverified emails"),(0,i.kt)("p",{parentName:"li"},"If a user tries to register with an existing but ",(0,i.kt)("strong",{parentName:"p"},"unverified")," email, we'll allow them to do that. This is done to prevent bad actors from locking out other users from registering with their email address.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Password validation"),(0,i.kt)("p",{parentName:"li"},"Read more about the default password validation rules and how to override them in ",(0,i.kt)("a",{parentName:"p",href:"../auth/overview"},"using auth docs"),"."))),(0,i.kt)("h2",{id:"email-verification-flow"},"Email Verification Flow"),(0,i.kt)("p",null,"By default, Wasp requires the e-mail to be verified before allowing the user to log in. This is done by sending a verification email to the user's email address and requiring the user to click on a link in the email to verify their email address."),(0,i.kt)("p",null,"Our setup looks like this:"),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},"// ...\n\nemailVerification: {\n    clientRoute: EmailVerificationRoute,\n}\n"))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},"// ...\n\nemailVerification: {\n    clientRoute: EmailVerificationRoute,\n}\n")))),(0,i.kt)("p",null,"When the user receives an e-mail, they receive a link that goes to the client route specified in the ",(0,i.kt)("inlineCode",{parentName:"p"},"clientRoute")," field.  In our case, this is the ",(0,i.kt)("inlineCode",{parentName:"p"},"EmailVerificationRoute")," route we defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"main.wasp")," file."),(0,i.kt)("p",null,"The content of the e-mail can be customized, read more about it ",(0,i.kt)("a",{parentName:"p",href:"#emailverification-emailverificationconfig-"},"here"),"."),(0,i.kt)("h3",{id:"email-verification-page"},"Email Verification Page"),(0,i.kt)("p",null,"We defined our email verification page in the ",(0,i.kt)(r.Z,{path:"auth.{jsx,tsx}",mdxType:"FileExtSwitcher"})," file."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Auth UI",src:n(50337).Z,width:"1036",height:"381"})),(0,i.kt)("h2",{id:"password-reset-flow"},"Password Reset Flow"),(0,i.kt)("p",null,"Users can request a password and then they'll receive an e-mail with a link to reset their password."),(0,i.kt)("p",null,"Some of the behavior you get out of the box:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Rate limiting"),(0,i.kt)("p",{parentName:"li"},"We are limiting the rate of sign-up requests to ",(0,i.kt)("strong",{parentName:"p"},"1 request per minute")," per email address. This is done to prevent spamming.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Preventing user email leaks"),(0,i.kt)("p",{parentName:"li"},"If somebody requests a password reset with an unknown email address, we'll give back the same response as if the user requested a password reset successfully. This is done to prevent leaking information."))),(0,i.kt)("p",null,"Our setup in ",(0,i.kt)("inlineCode",{parentName:"p"},"main.wasp")," looks like this:"),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},"// ...\n\npasswordReset: {\n    clientRoute: PasswordResetRoute,\n}\n"))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},"// ...\n\npasswordReset: {\n    clientRoute: PasswordResetRoute,\n}\n")))),(0,i.kt)("h3",{id:"request-password-reset-page"},"Request Password Reset Page"),(0,i.kt)("p",null,"Users request their password to be reset by going to the ",(0,i.kt)("inlineCode",{parentName:"p"},"/request-password-reset")," route. We defined our request password reset page in the ",(0,i.kt)(r.Z,{path:"auth.{jsx,tsx}",mdxType:"FileExtSwitcher"})," file."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Request password reset page",src:n(57114).Z,width:"1057",height:"407"})),(0,i.kt)("h3",{id:"password-reset-page"},"Password Reset Page"),(0,i.kt)("p",null,"When the user receives an e-mail, they receive a link that goes to the client route specified in the ",(0,i.kt)("inlineCode",{parentName:"p"},"clientRoute")," field. In our case, this is the ",(0,i.kt)("inlineCode",{parentName:"p"},"PasswordResetRoute")," route we defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"main.wasp")," file."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Request password reset page",src:n(92624).Z,width:"1055",height:"510"})),(0,i.kt)("p",null,"Users can enter their new password there."),(0,i.kt)("p",null,"The content of the e-mail can be customized, read more about it ",(0,i.kt)("a",{parentName:"p",href:"#passwordreset-passwordresetconfig-"},"here"),"."),(0,i.kt)("h2",{id:"using-the-auth"},"Using The Auth"),(0,i.kt)("p",null,"To read more about how to set up the logout button and how to get access to the logged-in user in our client and server code, read the ",(0,i.kt)("a",{parentName:"p",href:"../auth/overview"},"using auth docs"),"."),(0,i.kt)("h2",{id:"api-reference"},"API Reference"),(0,i.kt)("p",null,"Let's go over the options we can specify when using email authentication."),(0,i.kt)("h3",{id:"userentity-fields"},(0,i.kt)("inlineCode",{parentName:"h3"},"userEntity")," fields"),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp" {18-25}',title:'"main.wasp"',"{18-25}":!0},'app myApp {\n  title: "My app",\n  // ...\n\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        // We\'ll explain these options below\n      },\n    },\n    onAuthFailedRedirectTo: "/someRoute"\n  },\n  // ...\n}\n\n// Using email auth requires the `userEntity` to have at least the following fields\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    email                     String?       @unique\n    password                  String?\n    isEmailVerified           Boolean       @default(false)\n    emailVerificationSentAt   DateTime?\n    passwordResetSentAt       DateTime?\npsl=}\n'))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp" {18-25}',title:'"main.wasp"',"{18-25}":!0},'app myApp {\n  title: "My app",\n  // ...\n\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        // We\'ll explain these options below\n      },\n    },\n    onAuthFailedRedirectTo: "/someRoute"\n  },\n  // ...\n}\n\n// Using email auth requires the `userEntity` to have at least the following fields\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    email                     String?       @unique\n    password                  String?\n    isEmailVerified           Boolean       @default(false)\n    emailVerificationSentAt   DateTime?\n    passwordResetSentAt       DateTime?\npsl=}\n')))),(0,i.kt)("p",null,"Email auth requires that ",(0,i.kt)("inlineCode",{parentName:"p"},"userEntity")," specified in ",(0,i.kt)("inlineCode",{parentName:"p"},"auth")," contains:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"optional ",(0,i.kt)("inlineCode",{parentName:"li"},"email")," field of type ",(0,i.kt)("inlineCode",{parentName:"li"},"String")),(0,i.kt)("li",{parentName:"ul"},"optional ",(0,i.kt)("inlineCode",{parentName:"li"},"password")," field of type ",(0,i.kt)("inlineCode",{parentName:"li"},"String")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isEmailVerified")," field of type ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean")," with a default value of ",(0,i.kt)("inlineCode",{parentName:"li"},"false")),(0,i.kt)("li",{parentName:"ul"},"optional ",(0,i.kt)("inlineCode",{parentName:"li"},"emailVerificationSentAt")," field of type ",(0,i.kt)("inlineCode",{parentName:"li"},"DateTime")),(0,i.kt)("li",{parentName:"ul"},"optional ",(0,i.kt)("inlineCode",{parentName:"li"},"passwordResetSentAt")," field of type ",(0,i.kt)("inlineCode",{parentName:"li"},"DateTime"))),(0,i.kt)("h3",{id:"fields-in-the-email-dict"},"Fields in the ",(0,i.kt)("inlineCode",{parentName:"h3"},"email")," dict"),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'app myApp {\n  title: "My app",\n  // ...\n\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        fromField: {\n          name: "My App",\n          email: "hello@itsme.com"\n        },\n        emailVerification: {\n          clientRoute: EmailVerificationRoute,\n          getEmailContentFn: import { getVerificationEmailContent } from "@server/auth/email.js",\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute,\n          getEmailContentFn: import { getPasswordResetEmailContent } from "@server/auth/email.js",\n        },\n        allowUnverifiedLogin: false,\n      },\n    },\n    onAuthFailedRedirectTo: "/someRoute"\n  },\n  // ...\n}\n'))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'app myApp {\n  title: "My app",\n  // ...\n\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        fromField: {\n          name: "My App",\n          email: "hello@itsme.com"\n        },\n        emailVerification: {\n          clientRoute: EmailVerificationRoute,\n          getEmailContentFn: import { getVerificationEmailContent } from "@server/auth/email.js",\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute,\n          getEmailContentFn: import { getPasswordResetEmailContent } from "@server/auth/email.js",\n        },\n        allowUnverifiedLogin: false,\n      },\n    },\n    onAuthFailedRedirectTo: "/someRoute"\n  },\n  // ...\n}\n')))),(0,i.kt)("h4",{id:"fromfield-emailfromfield-"},(0,i.kt)("inlineCode",{parentName:"h4"},"fromField: EmailFromField")," ",(0,i.kt)(l.aH,{mdxType:"Required"})),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"fromField")," is a dict that specifies the name and e-mail address of the sender of the e-mails sent by your app. "),(0,i.kt)("p",null,"It has the following fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name"),": name of the sender"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"email"),": e-mail address of the sender ",(0,i.kt)(l.aH,{mdxType:"Required"}))),(0,i.kt)("h4",{id:"emailverification-emailverificationconfig-"},(0,i.kt)("inlineCode",{parentName:"h4"},"emailVerification: EmailVerificationConfig")," ",(0,i.kt)(l.aH,{mdxType:"Required"})),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"emailVerification")," is a dict that specifies the details of the e-mail verification process."),(0,i.kt)("p",null,"It has the following fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"clientRoute: Route"),": a route that is used for the user to verify their e-mail address. ",(0,i.kt)(l.aH,{mdxType:"Required"})),(0,i.kt)("p",{parentName:"li"},"Client route should handle the process of taking a token from the URL and sending it to the server to verify the e-mail address. You can use our ",(0,i.kt)("inlineCode",{parentName:"p"},"verifyEmail")," action for that."),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/pages/EmailVerificationPage.jsx"',title:'"src/pages/EmailVerificationPage.jsx"'},"import { verifyEmail } from '@wasp/auth/email/actions';\n...\nawait verifyEmail({ token });\n"))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/EmailVerificationPage.tsx"',title:'"src/pages/EmailVerificationPage.tsx"'},"import { verifyEmail } from '@wasp/auth/email/actions';\n...\nawait verifyEmail({ token });\n")))),(0,i.kt)("admonition",{parentName:"li",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"  We used Auth UI above to avoid doing this work of sending the token to the server manually."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"getEmailContentFn: ServerImport"),": a function that returns the content of the e-mail that is sent to the user."),(0,i.kt)("p",{parentName:"li"},"Defining ",(0,i.kt)("inlineCode",{parentName:"p"},"getEmailContentFn")," can be done by defining a file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"server")," directory."),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/email.js"',title:'"server/email.js"'},"export const getVerificationEmailContent = ({ verificationLink }) => ({\n  subject: 'Verify your email',\n  text: `Click the link below to verify your email: ${verificationLink}`,\n  html: `\n        <p>Click the link below to verify your email</p>\n        <a href=\"${verificationLink}\">Verify email</a>\n    `,\n})\n"))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/email.ts"',title:'"server/email.ts"'},"import { GetVerificationEmailContentFn } from '@wasp/types'\n\nexport const getVerificationEmailContent: GetVerificationEmailContentFn = ({\n  verificationLink,\n}) => ({\n  subject: 'Verify your email',\n  text: `Click the link below to verify your email: ${verificationLink}`,\n  html: `\n        <p>Click the link below to verify your email</p>\n        <a href=\"${verificationLink}\">Verify email</a>\n    `,\n})\n")))),(0,i.kt)("small",null,"This is the default content of the e-mail, you can customize it to your liking."))),(0,i.kt)("h4",{id:"passwordreset-passwordresetconfig-"},(0,i.kt)("inlineCode",{parentName:"h4"},"passwordReset: PasswordResetConfig")," ",(0,i.kt)(l.aH,{mdxType:"Required"})),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"passwordReset")," is a dict that specifies the password reset process. "),(0,i.kt)("p",null,"It has the following fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"clientRoute: Route"),": a route that is used for the user to reset their password. ",(0,i.kt)(l.aH,{mdxType:"Required"})),(0,i.kt)("p",{parentName:"li"},"Client route should handle the process of taking a token from the URL and a new password from the user and sending it to the server.  You can use our ",(0,i.kt)("inlineCode",{parentName:"p"},"requestPasswordReset")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"resetPassword")," actions to do that."),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/pages/ForgotPasswordPage.jsx"',title:'"src/pages/ForgotPasswordPage.jsx"'},"import { requestPasswordReset } from '@wasp/auth/email/actions';\n...\nawait requestPasswordReset({ email });\n")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/pages/PasswordResetPage.jsx"',title:'"src/pages/PasswordResetPage.jsx"'},"import { resetPassword } from '@wasp/auth/email/actions';\n...\nawait resetPassword({ password, token })\n"))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/ForgotPasswordPage.tsx"',title:'"src/pages/ForgotPasswordPage.tsx"'},"import { requestPasswordReset } from '@wasp/auth/email/actions';\n...\nawait requestPasswordReset({ email });\n")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/PasswordResetPage.tsx"',title:'"src/pages/PasswordResetPage.tsx"'},"import { resetPassword } from '@wasp/auth/email/actions';\n...\nawait resetPassword({ password, token })\n")))),(0,i.kt)("admonition",{parentName:"li",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"We used Auth UI above to avoid doing this work of sending the password request and the new password to the server manually."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"getEmailContentFn: ServerImport"),": a function that returns the content of the e-mail that is sent to the user."),(0,i.kt)("p",{parentName:"li"},"Defining ",(0,i.kt)("inlineCode",{parentName:"p"},"getEmailContentFn")," is done by defining a function that looks like this:"),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/email.js"',title:'"server/email.js"'},"export const getPasswordResetEmailContent = ({ passwordResetLink }) => ({\n  subject: 'Password reset',\n  text: `Click the link below to reset your password: ${passwordResetLink}`,\n  html: `\n        <p>Click the link below to reset your password</p>\n        <a href=\"${passwordResetLink}\">Reset password</a>\n    `,\n})\n"))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/email.ts"',title:'"server/email.ts"'},"import { GetPasswordResetEmailContentFn } from '@wasp/types'\n\nexport const getPasswordResetEmailContent: GetPasswordResetEmailContentFn = ({\n  passwordResetLink,\n}) => ({\n  subject: 'Password reset',\n  text: `Click the link below to reset your password: ${passwordResetLink}`,\n  html: `\n        <p>Click the link below to reset your password</p>\n        <a href=\"${passwordResetLink}\">Reset password</a>\n    `,\n})\n")))),(0,i.kt)("small",null,"This is the default content of the e-mail, you can customize it to your liking."))),(0,i.kt)("h4",{id:"allowunverifiedlogin-bool-specifies-whether-the-user-can-login-without-verifying-their-e-mail-address"},(0,i.kt)("inlineCode",{parentName:"h4"},"allowUnverifiedLogin: bool"),": specifies whether the user can login without verifying their e-mail address"),(0,i.kt)("p",null,"It defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),". If ",(0,i.kt)("inlineCode",{parentName:"p"},"allowUnverifiedLogin")," is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the user can login without verifying their e-mail address, otherwise users will receive a ",(0,i.kt)("inlineCode",{parentName:"p"},"401")," error when trying to login without verifying their e-mail address."),(0,i.kt)("p",null,"Sometimes you want to allow unverified users to login to provide them a different onboarding experience. Some of the pages can be viewed without verifying the e-mail address, but some of them can't. You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"isEmailVerified")," field on the user entity to check if the user has verified their e-mail address."),(0,i.kt)("p",null,"If you have any questions, feel free to ask them on ",(0,i.kt)("a",{parentName:"p",href:"https://discord.gg/rzdnErX"},"our Discord server"),"."))}g.isMDXComponent=!0},86164:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/all_screens-4474bfaf188590d975e11d5b4e04b0ae.gif"},50337:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/email_verification-b1919c242edc678175636485f6fc2264.png"},57114:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/forgot_password_after-db85e082ff373ebb95f3bdf9e64c1918.png"},89958:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/login-1dad984cebbef0e4bd2bc0c008d2d2ff.png"},92624:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/reset_password_after-3eecfee765304fd41b6385519cc5e522.png"},12433:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/signup-4362e29083e15457eb5a16990f57819a.png"}}]);