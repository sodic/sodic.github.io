"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[8002],{85162:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(67294),r=a(86010);const i={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:a,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,s),hidden:a},t)}},74866:(e,t,a)=>{a.d(t,{Z:()=>N});var n=a(87462),r=a(67294),i=a(86010),s=a(12466),o=a(16550),l=a(91980),p=a(67392),u=a(50012);function m(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function d(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??m(a);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function c(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:a}=e;const n=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,l._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(n.location.search);t.set(i,e),n.replace({...n.location,search:t.toString()})}),[i,n])]}function h(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,i=d(e),[s,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i}))),[l,p]=f({queryString:a,groupId:n}),[m,h]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,i]=(0,u.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:n}),k=(()=>{const e=l??m;return c({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{k&&o(k)}),[k]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!c({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),h(e)}),[p,h,i]),tabValues:i}}var k=a(72389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:a,selectedValue:o,selectValue:l,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:m}=(0,s.o5)(),d=e=>{const t=e.currentTarget,a=u.indexOf(t),n=p[a].value;n!==o&&(m(t),l(n))},c=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;t=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;t=u[a]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":a},t)},p.map((e=>{let{value:t,label:a,attributes:s}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>u.push(e),onKeyDown:c,onClick:d},s,{className:(0,i.Z)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":o===t})}),a??t)})))}function v(e){let{lazy:t,children:a,selectedValue:n}=e;const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function w(e){const t=h(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",g.tabList)},r.createElement(b,(0,n.Z)({},e,t)),r.createElement(v,(0,n.Z)({},e,t)))}function N(e){const t=(0,k.Z)();return r.createElement(w,(0,n.Z)({key:String(t)},e))}},46300:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(67294),r=a(50012);function i(e){let{path:t}=e;const[a]=(0,r.Nk)("docusaurus.tab.js-ts"),i=t.lastIndexOf("{"),s=t.slice(i+1,t.length-1),[o,l]=s.split(","),p=t.slice(0,i);return n.createElement("code",null,p+("js"===a?o:l))}},87587:(e,t,a)=>{a.d(t,{Jp:()=>i,aH:()=>s});var n=a(67294);const r=e=>{let{color:t,children:a}=e;return n.createElement("span",{style:{border:`2px solid ${t}`,display:"inline-block",padding:"0.2em 0.4em",color:t,borderRadius:"0.4em",fontSize:"0.8em",lineHeight:"1",fontWeight:"bold"}},a)};function i(){return n.createElement(r,{color:"#0b62f5"},"internal")}function s(){return n.createElement(r,{color:"#f59e0b"},"required")}},48863:(e,t,a)=>{a.d(t,{A:()=>s,v:()=>o});var n=a(67294),r=a(50012),i=a(49875);function s(e){let{children:t}=e;const[a]=(0,r.Nk)("docusaurus.tab.js-ts");return"ts"===a&&n.createElement(i.Z,null,t)}function o(e){let{children:t}=e;const[a]=(0,r.Nk)("docusaurus.tab.js-ts");return"js"===a&&n.createElement(i.Z,null,t)}},22562:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>u,default:()=>k,frontMatter:()=>p,metadata:()=>m,toc:()=>c});var n=a(87462),r=(a(67294),a(3905)),i=(a(46300),a(85162)),s=a(74866),o=a(48863),l=a(87587);const p={title:"Custom HTTP API Endpoints"},u=void 0,m={unversionedId:"advanced/apis",id:"version-0.11.8/advanced/apis",title:"Custom HTTP API Endpoints",description:"In Wasp, the default client-server interaction mechanism is through Operations. However, if you need a specific URL method/path, or a specific response, Operations may not be suitable for you. For these cases, you can use an api. Best of all, they should look and feel very familiar.",source:"@site/versioned_docs/version-0.11.8/advanced/apis.md",sourceDirName:"advanced",slug:"/advanced/apis",permalink:"/docs/0.11.8/advanced/apis",draft:!1,editUrl:"https://github.com/wasp-lang/wasp/edit/release/web/versioned_docs/version-0.11.8/advanced/apis.md",tags:[],version:"0.11.8",frontMatter:{title:"Custom HTTP API Endpoints"},sidebar:"docs",previous:{title:"Web Sockets",permalink:"/docs/0.11.8/advanced/web-sockets"},next:{title:"Configuring Middleware",permalink:"/docs/0.11.8/advanced/middleware-config"}},d={},c=[{value:"How to Create an API",id:"how-to-create-an-api",level:2},{value:"Declaring the API in Wasp",id:"declaring-the-api-in-wasp",level:3},{value:"Defining the API&#39;s NodeJS Implementation",id:"defining-the-apis-nodejs-implementation",level:3},{value:"Providing Extra Type Information",id:"providing-extra-type-information",level:4},{value:"Using the API",id:"using-the-api",level:2},{value:"Using the API externally",id:"using-the-api-externally",level:3},{value:"Using the API from the Client",id:"using-the-api-from-the-client",level:3},{value:"Making Sure CORS Works",id:"making-sure-cors-works",level:4},{value:"Using Entities in APIs",id:"using-entities-in-apis",level:2},{value:"API Reference",id:"api-reference",level:2}],f={toc:c},h="wrapper";function k(e){let{components:t,...a}=e;return(0,r.kt)(h,(0,n.Z)({},f,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In Wasp, the default client-server interaction mechanism is through ",(0,r.kt)("a",{parentName:"p",href:"../data-model/operations/overview"},"Operations"),". However, if you need a specific URL method/path, or a specific response, Operations may not be suitable for you. For these cases, you can use an ",(0,r.kt)("inlineCode",{parentName:"p"},"api"),". Best of all, they should look and feel very familiar."),(0,r.kt)("h2",{id:"how-to-create-an-api"},"How to Create an API"),(0,r.kt)("p",null,"APIs are used to tie a JS function to a certain endpoint e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"POST /something/special"),". They are distinct from Operations and have no client-side helpers (like ",(0,r.kt)("inlineCode",{parentName:"p"},"useQuery"),")."),(0,r.kt)("p",null,"To create a Wasp API, you must:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Declare the API in Wasp using the ",(0,r.kt)("inlineCode",{parentName:"li"},"api")," declaration"),(0,r.kt)("li",{parentName:"ol"},"Define the API's NodeJS implementation")),(0,r.kt)("p",null,"After completing these two steps, you'll be able to call the API from the client code (via our ",(0,r.kt)("inlineCode",{parentName:"p"},"Axios")," wrapper), or from the outside world."),(0,r.kt)("h3",{id:"declaring-the-api-in-wasp"},"Declaring the API in Wasp"),(0,r.kt)("p",null,"First, we need to declare the API in the Wasp file and you can easily do this with the ",(0,r.kt)("inlineCode",{parentName:"p"},"api")," declaration:"),(0,r.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'// ...\n\napi fooBar { // APIs and their implementations don\'t need to (but can) have the same name.\n  fn: import { fooBar } from "@server/apis.js",\n  httpRoute: (GET, "/foo/bar")\n}\n'))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'// ...\n\napi fooBar { // APIs and their implementations don\'t need to (but can) have the same name.\n  fn: import { fooBar } from "@server/apis.js",\n  httpRoute: (GET, "/foo/bar")\n}\n')))),(0,r.kt)("p",null,"Read more about the supported fields in the ",(0,r.kt)("a",{parentName:"p",href:"#api-reference"},"API Reference"),"."),(0,r.kt)("h3",{id:"defining-the-apis-nodejs-implementation"},"Defining the API's NodeJS Implementation"),(0,r.kt)(o.A,{mdxType:"ShowForTs"},(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"To make sure the Wasp compiler generates the types for APIs for use in the NodeJS implementation, you should add your ",(0,r.kt)("inlineCode",{parentName:"p"},"api")," declarations to your ",(0,r.kt)("inlineCode",{parentName:"p"},".wasp")," file first ",(0,r.kt)("em",{parentName:"p"},"and")," keep the ",(0,r.kt)("inlineCode",{parentName:"p"},"wasp start")," command running."))),(0,r.kt)("p",null,"After you defined the API, it should be implemented as a NodeJS function that takes three arguments:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"req"),": Express Request object"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"res"),": Express Response object"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"context"),": An additional context object ",(0,r.kt)("strong",{parentName:"li"},"injected into the API by Wasp"),". This object contains user session information, as well as information about entities. The examples here won't use the context for simplicity purposes. You can read more about it in the ",(0,r.kt)("a",{parentName:"li",href:"#using-entities-in-apis"},"section about using entities in APIs"),".")),(0,r.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/server/apis.js"',title:'"src/server/apis.js"'},'export const fooBar = (req, res, context) => {\n  res.set("Access-Control-Allow-Origin", "*"); // Example of modifying headers to override Wasp default CORS middleware.\n  res.json({ msg: `Hello, ${context.user?.username || "stranger"}!` });\n};\n'))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/server/apis.ts"',title:'"src/server/apis.ts"'},'import { FooBar } from "@wasp/apis/types"; // This type is generated by Wasp based on the `api` declaration above.\n\nexport const fooBar: FooBar = (req, res, context) => {\n  res.set("Access-Control-Allow-Origin", "*"); // Example of modifying headers to override Wasp default CORS middleware.\n  res.json({ msg: `Hello, ${context.user?.username || "stranger"}!` });\n};\n')))),(0,r.kt)(o.A,{mdxType:"ShowForTs"},(0,r.kt)("h4",{id:"providing-extra-type-information"},"Providing Extra Type Information"),(0,r.kt)("p",null,"We'll see how we can provide extra type information to an API function."),(0,r.kt)("p",null,"Let's say you wanted to create some ",(0,r.kt)("inlineCode",{parentName:"p"},"GET"),' route that would take an email address as a param, and provide them the answer to "Life, the Universe and Everything." \ud83d\ude00 What would this look like in TypeScript?'),(0,r.kt)("p",null,"Define the API in Wasp:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'api fooBar {\n  fn: import { fooBar } from "@server/apis.js",\n  entities: [Task],\n  httpRoute: (GET, "/foo/bar/:email")\n}\n')),(0,r.kt)("p",null,"We can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"FooBar")," type to which we'll provide the generic ",(0,r.kt)("strong",{parentName:"p"},"params")," and ",(0,r.kt)("strong",{parentName:"p"},"response")," types, which then gives us full type safety in the implementation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/server/apis.ts"',title:'"src/server/apis.ts"'},'import { FooBar } from "@wasp/apis/types";\n\nexport const fooBar: FooBar<\n  { email: string }, // params\n  { answer: number } // response\n> = (req, res, _context) => {\n  console.log(req.params.email);\n  res.json({ answer: 42 });\n};\n'))),(0,r.kt)("h2",{id:"using-the-api"},"Using the API"),(0,r.kt)("h3",{id:"using-the-api-externally"},"Using the API externally"),(0,r.kt)("p",null,"To use the API externally, you simply call the endpoint using the method and path you used."),(0,r.kt)("p",null,"For example, if your app is running at ",(0,r.kt)("inlineCode",{parentName:"p"},"https://example.com")," then from the above you could issue a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"https://example/com/foo/callback")," (in your browser, Postman, ",(0,r.kt)("inlineCode",{parentName:"p"},"curl"),", another web service, etc.)."),(0,r.kt)("h3",{id:"using-the-api-from-the-client"},"Using the API from the Client"),(0,r.kt)("p",null,"To use the API from your client, including with auth support, you can import the Axios wrapper from ",(0,r.kt)("inlineCode",{parentName:"p"},"@wasp/api")," and invoke a call. For example:"),(0,r.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/client/pages/SomePage.jsx"',title:'"src/client/pages/SomePage.jsx"'},'import React, { useEffect } from "react";\nimport api from "@wasp/api";\n\nasync function fetchCustomRoute() {\n  const res = await api.get("/foo/bar");\n  console.log(res.data);\n}\n\nexport const Foo = () => {\n  useEffect(() => {\n    fetchCustomRoute();\n  }, []);\n\n  return <>// ...</>;\n};\n'))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/client/pages/SomePage.tsx"',title:'"src/client/pages/SomePage.tsx"'},'import React, { useEffect } from "react";\nimport api from "@wasp/api";\n\nasync function fetchCustomRoute() {\n  const res = await api.get("/foo/bar");\n  console.log(res.data);\n}\n\nexport const Foo = () => {\n  useEffect(() => {\n    fetchCustomRoute();\n  }, []);\n\n  return <>// ...</>;\n};\n')))),(0,r.kt)("h4",{id:"making-sure-cors-works"},"Making Sure CORS Works"),(0,r.kt)("p",null,"APIs are designed to be as flexible as possible, hence they don't utilize the default middleware like Operations do. As a result, to use these APIs on the client side, you must ensure that CORS (Cross-Origin Resource Sharing) is enabled."),(0,r.kt)("p",null,"You can do this by defining custom middleware for your APIs in the Wasp file."),(0,r.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("p",null,"For example, an ",(0,r.kt)("inlineCode",{parentName:"p"},"apiNamespace")," is a simple declaration used to apply some ",(0,r.kt)("inlineCode",{parentName:"p"},"middlewareConfigFn")," to all APIs under some specific path:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'apiNamespace fooBar {\n  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from "@server/apis.js",\n  path: "/foo"\n}\n')),(0,r.kt)("p",null,"And then in the implementation file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/server/apis.js"',title:'"src/server/apis.js"'},"export const apiMiddleware = (config) => {\n  return config;\n};\n"))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("p",null,"For example, an ",(0,r.kt)("inlineCode",{parentName:"p"},"apiNamespace")," is a simple declaration used to apply some ",(0,r.kt)("inlineCode",{parentName:"p"},"middlewareConfigFn")," to all APIs under some specific path:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'apiNamespace fooBar {\n  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from "@server/apis.js",\n  path: "/foo"\n}\n')),(0,r.kt)("p",null,"And then in the implementation file (returning the default config):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/server/apis.ts"',title:'"src/server/apis.ts"'},'import { MiddlewareConfigFn } from "@wasp/middleware";\nexport const apiMiddleware: MiddlewareConfigFn = (config) => {\n  return config;\n};\n')))),(0,r.kt)("p",null,"We are returning the default middleware which enables CORS for all APIs under the ",(0,r.kt)("inlineCode",{parentName:"p"},"/foo")," path."),(0,r.kt)("p",null,"For more information about middleware configuration, please see: ",(0,r.kt)("a",{parentName:"p",href:"../advanced/middleware-config"},"Middleware Configuration")),(0,r.kt)("h2",{id:"using-entities-in-apis"},"Using Entities in APIs"),(0,r.kt)("p",null,"In many cases, resources used in APIs will be ",(0,r.kt)("a",{parentName:"p",href:"/docs/0.11.8/data-model/entities"},"Entities"),".\nTo use an Entity in your API, add it to the ",(0,r.kt)("inlineCode",{parentName:"p"},"api")," declaration in Wasp:"),(0,r.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'{3} title="main.wasp"',"{3}":!0,title:'"main.wasp"'},'api fooBar {\n  fn: import { fooBar } from "@server/apis.js",\n  entities: [Task],\n  httpRoute: (GET, "/foo/bar")\n}\n'))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'{3} title="main.wasp"',"{3}":!0,title:'"main.wasp"'},'api fooBar {\n  fn: import { fooBar } from "@server/apis.js",\n  entities: [Task],\n  httpRoute: (GET, "/foo/bar")\n}\n')))),(0,r.kt)("p",null,"Wasp will inject the specified Entity into the APIs ",(0,r.kt)("inlineCode",{parentName:"p"},"context")," argument, giving you access to the Entity's Prisma API:"),(0,r.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/server/apis.js"',title:'"src/server/apis.js"'},"export const fooBar = (req, res, context) => {\n  res.json({ count: await context.entities.Task.count() });\n};\n"))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/server/apis.ts"',title:'"src/server/apis.ts"'},'import { FooBar } from "@wasp/apis/types";\n\nexport const fooBar: FooBar = (req, res, context) => {\n  res.json({ count: await context.entities.Task.count() });\n};\n')))),(0,r.kt)("p",null,"The object ",(0,r.kt)("inlineCode",{parentName:"p"},"context.entities.Task")," exposes ",(0,r.kt)("inlineCode",{parentName:"p"},"prisma.task")," from ",(0,r.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/crud"},"Prisma's CRUD API"),"."),(0,r.kt)("h2",{id:"api-reference"},"API Reference"),(0,r.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'api fooBar {\n  fn: import { fooBar } from "@server/apis.js",\n  httpRoute: (GET, "/foo/bar"),\n  entities: [Task],\n  auth: true,\n  middlewareConfigFn: import { apiMiddleware } from "@server/apis.js"\n}\n'))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'api fooBar {\n  fn: import { fooBar } from "@server/apis.js",\n  httpRoute: (GET, "/foo/bar"),\n  entities: [Task],\n  auth: true,\n  middlewareConfigFn: import { apiMiddleware } from "@server/apis.js"\n}\n')))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"api")," declaration has the following fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"fn: ServerImport")," ",(0,r.kt)(l.aH,{mdxType:"Required"})),(0,r.kt)("p",{parentName:"li"},"The import statement of the APIs NodeJs implementation.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"httpRoute: (HttpMethod, string)")," ",(0,r.kt)(l.aH,{mdxType:"Required"})),(0,r.kt)("p",{parentName:"li"},"The HTTP (method, path) pair, where the method can be one of:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ALL"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"GET"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"POST"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"PUT")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"DELETE")),(0,r.kt)("li",{parentName:"ul"},"and path is an Express path ",(0,r.kt)("inlineCode",{parentName:"li"},"string"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"entities: [Entity]")),(0,r.kt)("p",{parentName:"li"},"A list of entities you wish to use inside your API. You can read more about it ",(0,r.kt)("a",{parentName:"p",href:"#using-entities-in-apis"},"here"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"auth: bool")),(0,r.kt)("p",{parentName:"li"},"If auth is enabled, this will default to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," and provide a ",(0,r.kt)("inlineCode",{parentName:"p"},"context.user")," object. If you do not wish to attempt to parse the JWT in the Authorization Header, you should set this to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"middlewareConfigFn: ServerImport")),(0,r.kt)("p",{parentName:"li"},"The import statement to an Express middleware config function for this API. See more in ",(0,r.kt)("a",{parentName:"p",href:"../advanced/middleware-config"},"middleware section")," of the docs."))))}k.isMDXComponent=!0}}]);