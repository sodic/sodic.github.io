"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[94],{78311:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/12/05/writing-rfcs","metadata":{"permalink":"/wasp-docs/blog/2023/12/05/writing-rfcs","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-12-05-writing-rfcs.md","source":"@site/blog/2023-12-05-writing-rfcs.md","title":"On the Importance of RFCs in Programming","description":"Imagine you\u2019ve been tasked to implement a sizeable new feature for the product you\u2019re working on. That\u2019s the opportunity you\u2019ve been waiting for - everybody will see what a 10x developer you are! You open a list of the coolest new libraries and design patterns you\u2019ve wanted to try out and get right into it, full \u201cbasement\u201d mode. One week later, you victoriously emerge and present your perfect pull request!","date":"2023-12-05T00:00:00.000Z","formattedDate":"December 5, 2023","tags":[{"label":"programming","permalink":"/wasp-docs/blog/tags/programming"},{"label":"clean-code","permalink":"/wasp-docs/blog/tags/clean-code"}],"readingTime":13.185,"hasTruncateMarker":false,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"On the Importance of RFCs in Programming","authors":["matijasos"],"image":"/img/writing-rfcs/rfc-prophet.png","tags":["programming","clean-code"]},"nextItem":{"title":"A Guide to Windows Development with Wasp & WSL","permalink":"/wasp-docs/blog/2023/11/21/guide-windows-development-wasp-wsl"}},"content":"import ImgWithCaption from \'./components/ImgWithCaption\'\\n\\nImagine you\u2019ve been tasked to implement a sizeable new feature for the product you\u2019re working on. That\u2019s the opportunity you\u2019ve been waiting for - everybody will see what a 10x developer you are! You open a list of the coolest new libraries and design patterns you\u2019ve wanted to try out and get right into it, full \u201cbasement\u201d mode. One week later, you victoriously emerge and present your perfect pull request!\\n\\n**But then, the senior dev in a team immediately rejects it - *\u201cToo complex, you should have simply used library X and reused Y.\u201d***. What!? Before you know it, you\u2019re looking at 100 comments on your PR and days of refactoring to follow.\\n\\nIf only there were **a way of knowing about X and Y before implementing everything**. Well, it is, and it\u2019s called RFC!\\n\\n\\n<ImgWithCaption\\n    alt=\\"The revelation of RFC\\"\\n    source=\\"img/writing-rfcs/rfc-prophet.png\\"\\n/>\\n\\nWe\u2019ll learn about it through the example of [RFC about implementing an authentication system in a web framework Wasp](https://wasp-lang.notion.site/RFC-Auth-without-user-defined-entities-6d2925439627456ab01b74ff4b4cd087?pvs=4). [Wasp](https://github.com/wasp-lang/wasp) is a full-stack web framework built on top of React, Node.js and Prisma. It is used by [MAGE](https://usemage.ai/), a free GPT-powered codebase generator, which has been used to start over 30,000 applications.\\n\\nLet\'s dive in!\\n\\n## So, what is an RFC?\\n\\nRFC (*Request For Comments*) is, simply explained, a document proposing a codebase change to solve a specific problem. **Its main purpose is to find the best way to solve a problem, as a team effort, before the implementation starts**. RFCs were first adopted by the open-source community, but today, they are used in almost any type of developer organization.\\n\\n<ImgWithCaption\\n    alt=\\"RFC overivew\\"\\n    source=\\"img/writing-rfcs/rfc-overview.png\\"\\n    caption=\\"A simplified schema of a typical RFC.\\"\\n/>\\n\\nThere are other names for this type of document you might encounter in the industry, like TDD (*Technical Design Document*) or SDD (*Software Design Document*). Some people argue over the distinction between them, but we won\u2019t.\\n\\n**Fun fact**: RFCs were invented by IETF (*Internet Engineering Task Force*), the engineering organization behind some of the most important internet standards and protocols we use today, like TCP/IP! Not too shabby, right?\\n\\n## When should I write RFC, and when can I skip it?\\n\\n<ImgWithCaption\\n    alt=\\"RFC overivew\\"\\n    source=\\"img/writing-rfcs/rfc-meme-when.png\\"\\n/>\\n\\nSo, why bother writing about what you will eventually code, instead of saving time and simply doing it? **If you\u2019re dealing with a bug or a relatively simple feature, where it\u2019s very clear what you must do and doesn\u2019t affect project structure, then there\u2019s no need for an RFC - fire up that IDE and get cracking!**\\n\\nBut, if you are introducing a completely new concept (e.g., introducing a role-based permission system) or altering the project\u2019s architecture (e.g., adding support for running background jobs), then you might want to take a step back before typing `git checkout -b my-new-feature` and diving into that sweet coding zone.\\n\\nAll the above being said, sometimes it\'s not easy to figure out if you should write an RFC or not. Maybe it\u2019s a more prominent feature, but you\u2019ve done something similar before, and you\u2019ve already mapped everything out in your head and pretty much have no questions. To help with that, here\u2019s a simple heuristic I like to use: **Is there more than one obvious way to implement this feature? Is there a new library/service we have to pick?** If the answer to both of these is \u201cNo\\", you probably don\u2019t need an RFC. Otherwise, there\u2019s a discussion to be had, and RFC is the way to do it.\\n\\n<ImgWithCaption\\n    alt=\\"RFC decision flowchart\\"\\n    source=\\"img/writing-rfcs/rfc-flowchart.png\\"\\n/>\\n\\n## It sounds useful. But what\u2019s in it for me?\\n\\nWe\u2019ve established how to decide *when* to write an RFC, but here is also *why* you should do it:\\n\\n- **You will organize your thoughts and get clarity**. If you\u2019ve decided to write an RFC, that means you\u2019re dealing with a non-trivial, open-ended problem. Writing things down will help distill your thoughts and have an objective look at them.\\n- **You will learn more** than if you just jumped into coding. You will give yourself space to explore different approaches and oftentimes discover something you haven\u2019t even thought of initially.\\n- **You will crowdsource your team\u2019s knowledge.** By asking your team for feedback (hence Request For Comments), you will get a complete picture of the problem you\u2019re solving and fill in any remaining gaps.\\n- **You will advance your team\u2019s understanding of the codebase.** By collaborating on your RFC, everybody on the team will understand what you\u2019re doing and how you eventually did it. That means next time somebody has to touch that part of the code, they will need to ask you much less questions (=== more uninterrupted coding time!).\\n- **PR reviews will go *much* smoother**. Remember that situation from the beginning of this article, when your PR got rejected as \\"too complex\\"? That\u2019s because the reviewer is missing the context, and you made a sizeable change without a previous buy-in from the rest of the team. By writing an RFC first, you\u2019ll never encounter this type of situation again.\\n- **Your documentation is already 50% done!** To be clear, RFC is not the final documentation, and you cannot simply point to it, but you can likely reuse a lot - images, diagrams, paragraphs, etc.\\n\\nWow, this sounds so good that I want to come up with a new feature right now just so I can write an RFC for it! Joke aside, going through with the RFC first makes the coding part so much more enjoyable - you know exactly what you need to do, and you don\u2019t need to question your approach and how it will be received once you create that PR.\\n\\n## Ok, ok, I\u2019m sold! So, how do I go about writing one?\\n\\nGlad you asked! Many different formats are being used, more or less formal, but I prefer to keep it simple. RFCs that we write at Wasp don\u2019t follow a strict format, but there are some common parts:\\n\\n- **Metadata** - Title, date, reviewers, etc\u2026\\n- **Problem / Goal**\\n- **Proposed solution** (or more of them)\\n- **Implementation overview**\\n- **Remarks / open questions**\\n\\nThat\u2019s pretty much the gist of it! Each of these can be further broken down and refined, but this is the basic outline you can start with.\\n\\nLet\u2019s now go over each of these and see what they look like in practice, on our [Authentication in Wasp](https://wasp-lang.notion.site/RFC-Auth-without-user-defined-entities-6d2925439627456ab01b74ff4b4cd087?pvs=4) example.\\n\\n## Metadata \u2317\\n\\n<ImgWithCaption\\n    alt=\\"RFC metadata\\"\\n    source=\\"img/writing-rfcs/rfc-metadata.png\\"\\n/>\\n\\nThis one is pretty self-explanatory - you will want to track some basic info about your RFCs - status, date of creation, etc. \\n\\nSome templates also explicitly list the reviewers and the status of their \u201capproval\u201d of the RFC, similar to the PR review process - we don\u2019t have it since we\u2019re a small team where communication happens fast, but it can be handy for larger teams where not everybody knows everybody, and you want to have a bit more of a process in place (e.g. when mentoring junior developers).\\n\\n<ImgWithCaption\\n    alt=\\"RFC reviewer status\\"\\n    source=\\"img/writing-rfcs/rfc-reviewer-status-example.png\\"\\n    caption=\\"Some RFCs require explicit approval by each reviewer.\\"\\n/>\\n\\n## The problem \ud83e\udd14\\n\\nThis is where things get interesting. **The better you define the problem or the goal/feature you need to implement, and why you need to do it, the easier all the following steps will be**. So this is something worth investing in even before you start writing your RFC - make sure you talk to all the involved parties (e.g., product owner, other developers, and even users) to refine your understanding of the issue you\u2019re about to tackle.\\n\\nBy doing this, you will also very likely get first hints and pointers on the possible solutions, and develop a rough sense of the problem space you\u2019re in.\\n\\n<ImgWithCaption\\n    alt=\\"RFC problem definition\\"\\n    source=\\"img/writing-rfcs/rfc-problem.png\\"\\n/>\\n\\nHere are a few tips from the example above:\\n\\n- **Start with a high-level summary** - that way, readers can quickly decide if this is relevant to them or not and whether they should keep reading.\\n- **Provide some context** - Explain a bit about the current state of the world, as it is right now. This can be a single sentence or a whole chapter, depending on the intended audience.\\n- **Clearly state the problem/goal** - explain why there is a problem and connect it with the user\u2019s/company\u2019s pain, so that motivation is clear.\\n- **Provide extra details if possible** - diagrams, code examples, \u2026 \u2192 anything that can help the reader get faster to that \u201caha\u201d moment. Extra points for using collapsible sections, so the central part of the RFC remains of digestible length.\\n\\nIf you did all this, you\u2019re already well on your way to the excellent RFC! Since defining the problem well is essential, don\u2019t be afraid to add more to it and break things down further.\\n\\n### Non-goals \ud83d\uded1\\n\\nThis is the sub-section of the \\"Problem\\" or \\"Goal\\" section that can sometimes be super valuable. Writing what we don\'t want or will not be doing in this codebase change can help set the expectations and better define its scope.\\n\\nFor example, if we are working on adding a role-based authentication system to our app, people might assume that we will also build some sort of an admin panel for it to manage users and add/remove roles. By explicitly stating it won\'t be done (and briefly explaining why - not needed, it would take too long, it will be done in the next iteration, ...), reviewers will get a better understanding of what your goal is and you will skip unnecessary discussion.\\n\\n## Solution & Implementation \ud83d\udee0\ufe0f\\n\\nOnce we know what we want to do, we have to figure out the best way of doing it! You might have already hinted at the possible solution in the Problem section, but now is the moment to dive deeper - research different approaches, evaluate their pros and cons, and sketch how they could fit into the existing system.\\n\\nThis section is probably the most free-form of all - since it highly depends on the nature of what you are doing, it doesn\u2019t make sense to impose many restrictions here. You may want to stay at the higher level of, e.g., system architecture, or you may need to dive deep into the code and start writing parts of the code you will need. Due to that, I don\u2019t have an exact format for you to follow, but rather a set of guidelines:\\n\\n### Write pseudocode\\n\\nThe purpose of RFC is to convey ideas and principles, not production-grade code that compiles and covers all the edge cases. Feel free to invent/imagine/sketch whatever you need (e.g., imagine you already have a function that sends an email and just use it, even if you don\u2019t), and don\u2019t encumber yourself or the reader with the implementation details (unless that\u2019s exactly what the RFC is about).\\n\\nIt\u2019s better to start at the higher level, and then go deeper when you realize you need it or if one of the reviewers suggests it.\\n\\n### Find out how are others doing it\\n\\n<ImgWithCaption\\n    alt=\\"See what others are doing\\"\\n    source=\\"img/writing-rfcs/existing-solutions.png\\"\\n/>\\n\\nHow you find this out may differ depending on the type of product you\u2019re developing, but there is almost always a way to do it. If you\u2019re developing an open-source tool like [Wasp](https://github.com/wasp-lang/wasp) you can simply check out other popular solutions (that are also open-source) and learn how they did it. If you\u2019re working on a SaaS and need to figure out whether to use cookies or JWTs for the authentication, you likely have some friends who have done it before, and you can ask them. Lastly, simply Google/GPT it.\\n\\nWhy is this so helpful? **The reason is that it gives you (and the reviewers) confidence in your solution. If somebody else did it successfully this way, it might be a promising direction.** It also might help you discover approaches you haven\u2019t thought of before, or serve as a basis on top of which you can build. Of course, never take anything for granted and take into account the specific needs of your situation, but definitely make use of the knowledge and expertise of others.\\n\\n### Leave things unfinished & don\'t make it perfect\\n\\nThe main point of RFC is the \u201cC\u201d part, so collaboration (yes, I know it actually stands for \\"_comments_\\"). **RFC is not a test where you have to get the perfect score and have no questions asked - if that happens, you probably shouldn\u2019t have written it in the first place.**\\n\\nSolving a problem is a team effort, and you\u2019re just the person taking the first stab at it and pushing things forward. Your task is to lay as much groundwork as you reasonably can (refine the problem, explore multiple approaches to solving it, identify new subproblems that came to light) so the reviewers can quickly grasp the status and provide efficient feedback, directed where it\u2019s needed the most.\\n\\n**The main job of your RFC is to identify the most important problems and direct the reviewer\u2019s attention to them, not solve them.**\\n\\nThe RFC you\u2019re writing should be looked at as a discussion area and a work-in-progress, not a piece of art that has to be perfected before it\u2019s displayed in front of the audience.\\n\\n## Remarks & open questions \ud83c\udfaf\\n\\nIn this final section of the document, you can summarise the main thoughts and highlight the biggest open questions. After going through everything, it can be helpful for the reader to be reminded of where his attention can be most valuable.\\n\\n## Now I know when and how to write an RFC! Do you have any templates I could use as a starting point?\\n\\nOf course! As mentioned, our format is extremely lightweight, but feel free to take a look at [the RFC we used as an example](https://wasp-lang.notion.site/RFC-Auth-without-user-defined-entities-6d2925439627456ab01b74ff4b4cd087?pvs=4) to get inspired. Your company could also already have a ready template they recommend.\\n\\nHere are a few you can use and/or adapt to your needs:\\n\\n- [Squarespace RFC template](https://engineering.squarespace.com/s/Squarespace-RFC-Template.pdf)\\n- _Do you have a template you would recommend? I\'m happy to list it here!_\\n\\n## What tool should I use to write my RFCs? There are so many choices!\\n\\nThe exact tool you\u2019re using is probably the least important part of RFC-ing, but it still matters since it sets the workflow around it. If your company has already selected a tool, then of course stick with that. If not, here are the most common choices I\u2019ve come across, along with quick comments:\\n\\n- **Google Docs** - the classic choice. Super easy to comment on any part of the doc, which is the most important feature.\\n- **Notion** - also great for collaboration, plus offers some markdown components such as collapsibles and tables, which can make your RFC more readable.\\n- **GitHub issues / PRs** - this is sometimes used, especially for OSS projects. The drawback is that it is harder to comment on the specific part of the document (you can only comment on the whole line), plus inserting diagrams is also quite clunky. The pro is that everything (code and RFCs) stays on the same platform\\n\\nWe currently use Notion, but any of the above can be a good choice.\\n\\n## Summary\\n\\nJust as it is the best practice to write a summary at the end of your RFC, we will do the same here! This article came out longer than I expected, but there were so many things to mention - I hope you\'ll find it useful!\\n\\nFinally, **being able to clearly express your thoughts, formulate the problem, and objectively analyze the possible solutions, with feedback from the team, is what will help you develop the right thing, which is the ultimate productivity hack**. This is how you become a 10x engineer.\\n\\nAnd don\'t forget: *Weeks of coding can save you hours of planning.*"},{"id":"/2023/11/21/guide-windows-development-wasp-wsl","metadata":{"permalink":"/wasp-docs/blog/2023/11/21/guide-windows-development-wasp-wsl","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-11-21-guide-windows-development-wasp-wsl.md","source":"@site/blog/2023-11-21-guide-windows-development-wasp-wsl.md","title":"A Guide to Windows Development with Wasp & WSL","description":"<ImgWithCaption","date":"2023-11-21T00:00:00.000Z","formattedDate":"November 21, 2023","tags":[{"label":"wsl","permalink":"/wasp-docs/blog/tags/wsl"},{"label":"windows","permalink":"/wasp-docs/blog/tags/windows"},{"label":"tutorial","permalink":"/wasp-docs/blog/tags/tutorial"}],"readingTime":9.825,"hasTruncateMarker":false,"authors":[{"name":"Boris Martinovi\u0107","title":"Contributor @ Wasp","url":"https://martinovic.dev","imageURL":"https://github.com/martinovicdev.png","key":"martinovicdev"}],"frontMatter":{"title":"A Guide to Windows Development with Wasp & WSL","authors":["martinovicdev"],"image":"/img/wsl-guide/wsl-guide-banner.jpeg","tags":["wsl","windows","tutorial"]},"prevItem":{"title":"On the Importance of RFCs in Programming","permalink":"/wasp-docs/blog/2023/12/05/writing-rfcs"},"nextItem":{"title":"Wasp Launch Week #4: Waspolution","permalink":"/wasp-docs/blog/2023/10/13/wasp-launch-week-four"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<ImgWithCaption\\n    alt=\\"WSL Guide Banner\\"\\n    source=\\"/img/wsl-guide/wsl-guide-banner.jpeg\\"\\n/>\\n\\nIf you are having a hard time with Wasp development on Windows, don\'t be afraid! We will go through all necessary steps to set up your dev environment and get you started with Wasp development in Windows in no time.\\n\\n## What is WSL and why should I be interested in it?\\n\\nWindows Subsystem for Linux (or WSL) lets developers run a fully functional and native GNU/Linux environment directly on Windows. In other words, we can run Linux directly without using a virtual machine or dual-booting the system.\\n\\n**The first cool thing about it is that WSL allows you to never switch OS\u2019s, but still have the best of both worlds inside your OS.**\\nWhat does that mean for us regular users? When you look at the way WSL works in practice, it can be considered a Windows feature that runs a Linux OS directly inside Windows 10 or 11, with a fully functional Linux file system, Linux command line tools, and Linux GUI apps (_really cool, btw_). Besides that, it uses much fewer resources for running when compared to a virtual machine and also doesn\u2019t require a separate tool for creating and managing those virtual machines.\\n\\nWSL is mainly catered to developers, so this article will be focused on developer usage and how to set up a fully working dev environment with VS Code. Inside this article, we\u2019ll go through some of the cool features and how they can be used in practice. Plus, the best way to understand new things is to actually start using them.\\n\\n## Installing WSL on the Windows operating system\\n\\nIn order to install WSL on your Windows, first enable [Hyper-V](https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v) architecture is Microsoft\u2019s hardware virtualization solution. To install it, right-click on the Windows Terminal/Powershell and open it in Administrator mode.\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wm5xniz2nehrccczeh6.png)\\n\\nThen, run the following command:\\n\\n```bash\\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All\\n```\\n\\nThat will ensure that you have all the prerequisites for the installation. Then, open the Powershell (best done in Windows Terminal) in the Administrator mode. Then, run\\n\\n```bash\\nwsl \u2014install\\n```\\n\\nThere is a plethora of Linux distributions to be installed, but Ubuntu is the one installed by default. This guide will feature many console commands, but most of them will be a copy-paste process.\\n\\nIf you have installed Docker before, there is a decent chance that you have WSL 2 installed on your system already. In that case, you will get a prompt to install the distribution of your choice. Since this tutorial will be using Ubuntu, I suggest running.\\n\\n```bash\\n wsl --install -d Ubuntu\\n```\\n\\nAfter installing Ubuntu (or another distro of your choice), you will enter your Linux OS and be prompted with a welcome screen. There, you will enter some basic info. First, you will enter your username and after that your password. Both of those will be Linux-specific, so you don\u2019t necessarily have to repeat your Windows credentials. After we\u2019ve done this, the installation part is over! You have successfully installed Ubuntu on your Windows machine! It still feels weird to say this, right?\\n\\n### Cool WSL featues to help you along the way\\n\\nBut before we get down to our dev environment setup, I want to show you a couple of cool tricks that will make your life easier and help you understand why WSL is actually a game-changer for Windows users.\\n\\nThe first cool thing with WSL is that you don\u2019t have to give up the current way of managing files through Windows Explorer. In your sidebar in Windows Explorer, you can find the Linux option now right under the network tab.\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/647jdnzilrucsijtye3v.png)\\n\\nFrom there, you can access and manage your Linux OS\u2019s file system directly from the Windows Explorer. What is really cool with this feature is that you can basically copy, paste, and move files between different operating systems without any issues, which opens up a whole world of possibilities. Effectively, you don\u2019t have to change much in your workflow with files and you can move many projects and files from one OS to another effortlessly. If you download an image for your web app on your Windows browser, just copy and paste it to your Linux OS.\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqjsd1oz5a4alu6q08re.png)\\n\\nAnother very important thing, which we will use in our example is WSL2 virtual routes. As you now have OS inside your OS, they have a way of communicating. When you want to access your Linux OS\u2019s network (for example, when you want to access your web app running locally in Linux), you can use _${PC-name}.local_. For me, since my PC name is Boris-PC, my network address is boris-pc.local. That way you don\u2019t have to remember different IP addresses, which is really cool. If you want your address for whatever reason, you can go to your Linux distro\u2019s terminal, and type ipconfig. Then, you can see your Windows IP and Linux\u2019s IP address. With that, you can communicate with both operating systems without friction.\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkhcfiybnobuoziitwtm.png)\\n\\nThe final cool thing I want to highlight is Linux GUI apps. It is a very cool feature that helps make WSL a more attractive proposal for regular users as well. You can install any app you want on your Linux system using popular package managers, such as apt (default on Ubuntu) or flatpak. Then you can launch them as well from the command line and the app will start and be visible inside your Windows OS. But that can cause some friction and is not user-friendly. The really ground-breaking part of this feature is that you can launch them directly from your Windows OS without even starting WSL yourself. Therefore, you can create shortcuts and pin them to the Start menu or taskbar without any friction and really have no need to think about where your app comes from. For the showcase, I have installed Dolphin File Manager and run it through Windows OS. You can see it action below side by side with Windows Explorer.\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yq1nxj244jd1fci13oay.png)\\n\\n## Getting started with development on WSL\\n\\nAfter hearing all about the cool features of WSL, let\u2019s slowly get back on track with our tutorial. Next up is setting up our dev environment and starting our first app. I\u2019ll be setting up a web dev environment and we\u2019ll use [Wasp](https://wasp-lang.dev/) as an example.\\n\\nIf you aren\u2019t familiar with it, Wasp is a Rails-like framework for React, Node.js, and Prisma. It\u2019s a fast and easy way to develop and deploy your full-stack web apps. For our tutorial, Wasp is a perfect candidate, since it doesn\u2019t support Windows development natively, but only through WSL as it requires a Unix environment.\\n\\nLet\u2019s get started with installing Node.js first. At the moment, Wasp requires users to use the Node v18 (version requirement will be relaxed very soon), so we want to start with both Node.js and NVM installation.\\n\\nBut first things first, let\u2019s start with Node.js. In WSL, run:\\n\\n```jsx\\nsudo apt install nodejs\\n```\\n\\nin order to install Node on your Linux environment. Next up is NVM. I suggest going to https://github.com/nvm-sh/nvm and getting the latest install script from there. The current download is:\\n\\n```bash\\ncurl -o- [https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh](https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh) | bash\\n```\\n\\nAfter this, we have both Node.js and NVM set up in our system.\\n\\n### Installing Wasp\\n\\nNext up is installing Wasp on our Linux environment. Wasp installation is also pretty straightforward and easy. So just copy and paste this command:\\n\\n```bash\\ncurl -sSL [https://get.wasp-lang.dev/installer.sh](https://get.wasp-lang.dev/installer.sh) | sh\\n```\\n\\nand wait for the installer to finish up its thing. Great! But, if you did your WSL setup from 0, you will notice the following warning underneath: It looks like \'/home/boris/.local/bin\' is not on your PATH! You will not be able to invoke wasp from the terminal by its name.\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/em932e89tlzajv4rm6up.png)\\n\\nLet\u2019s fix this quickly. In order to do this, let\u2019s run\\n\\n```bash\\n code ~/.profile\\n```\\n\\nIf we don\u2019t already have VS Code, it will automatically set up everything needed and boot up so you can add the command to the end of your file. It will be different for everyone depending on their system name. For example, mine is:\\n\\n```bash\\nexport PATH=$PATH:/home/boris/.local/bin\\n```\\n\\nGreat! Now we just need to swap node version to v18.14.2 to ensure full compatibility with Wasp. We\u2019ll install and switch to Node 18 in one go! To do this, simply run:\\n\\n```bash\\nnvm install v18.14.2 && nvm use v18.14.2\\n```\\n\\n### Setting up VS Code\\n\\nAfter setting up Wasp, we want to see how to run the app and access it from VS Code. Under the hood, you will still be using WSL for our development, but we\u2019ll be able to use our VS Code from Host OS (Windows) for most of the things.\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orifa202sph4swgbir2d.png)\\n\\nTo get started, download the [WSL extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl) to your VS Code in Windows. Afterward, let\u2019s start a new Wasp project to see how it works in action. Open your VS Code Command Palette (ctrl + shift + P) and select the option to \u201cOpen Folder in WSL\u201d.\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1le8xvk6a8a8teog8eo.png)\\n\\nThe folder that I have opened is\\n\\n```bash\\n\\\\\\\\wsl.localhost\\\\Ubuntu\\\\home\\\\boris\\\\Projects\\n```\\n\\nThat is the \u201cProjects\u201d folder inside my home folder in WSL. There are 2 ways for us to know that we are in WSL: The top bar and in the bottom left corner of VS Code. In both places, we have WSL: Ubuntu written, as is shown on screenshots.\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzhu765415sravn3vypu.png)\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cpy4kggtsobod1vk1dqn.png)\\n\\nOnce inside this folder, I will open a terminal. It will also be already connected to the proper folder in WSL, so we can get down to business! Let\u2019s run the\\n\\n```bash\\nwasp new\\n```\\n\\ncommand to create a new Wasp application. I have chosen the basic template, but you are free to create a project of your choosing, e.g. [SaaS starter](https://github.com/wasp-lang/SaaS-Template-GPT) with GPT, Stripe and more preconfigured. As shown in the screenshot, we should change the current directory of our project to the proper one and then run our project with it.\\n\\n```bash\\nwasp start\\n```\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l453mcae56kfa3yrm7j4.png)\\n\\nAnd just like that, a new screen will open on my Windows machine, showcasing that my Wasp app is open. Cool! My address is still the default localhost:3000, but it is being run from the WSL. Congratulations, you\u2019ve successfully started your first Wasp app through WSL. That wasn\u2019t hard, was it?\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfyfok2eg0xjhqcqhgoe.png)\\n\\nFor our final topic, I want to highlight Git workflow with WSL, as it is relatively painless to set up. You can always do the manual git config setup, but I have something cooler for you: Sharing credentials between Windows and WSL. To set up sharing Git credentials, we have to do the following. In Powershell (on Windows), configure the credential manager on Windows.\\n\\n```bash\\ngit config --global credential.helper wincred\\n```\\n\\nAnd let\u2019s do the same inside WSL.\\n\\n```bash\\ngit config --global credential.helper \\"/mnt/c/Program\\\\ Files/Git/mingw64/bin/git-credential-manager.exe\\"\\n```\\n\\nThis allows us to share our Git username and password. Anything set up in Windows will work in WSL (and vice-versa) and we can use Git inside WSL as we prefer (via VS Code GUI or via shell).\\n\\n## Conclusion\\n\\nThrough our journey here, we have learned what WSL is, how it can be useful for enhancing our workflow with our Windows PC, but also how to set up your initial development environment on it. Microsoft has done a fantastic job with this tool and has really made Windows OS a much more approachable and viable option for all developers. We went through how to install the dev tools needed to kickstart development and how to get a handle on a basic dev workflow. Here are some important links if you want to dive deeper into the topic:\\n\\n- [https://github.com/microsoft/WSL](https://github.com/microsoft/WSL)\\n- [https://learn.microsoft.com/en-us/windows/wsl/install](https://learn.microsoft.com/en-us/windows/wsl/install)\\n- [https://code.visualstudio.com/docs/remote/wsl](https://code.visualstudio.com/docs/remote/wsl)"},{"id":"/2023/10/13/wasp-launch-week-four","metadata":{"permalink":"/wasp-docs/blog/2023/10/13/wasp-launch-week-four","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-10-13-wasp-launch-week-four.md","source":"@site/blog/2023-10-13-wasp-launch-week-four.md","title":"Wasp Launch Week #4: Waspolution","description":"<ImgWithCaption","date":"2023-10-13T00:00:00.000Z","formattedDate":"October 13, 2023","tags":[{"label":"launch-week","permalink":"/wasp-docs/blog/tags/launch-week"},{"label":"update","permalink":"/wasp-docs/blog/tags/update"}],"readingTime":4.81,"hasTruncateMarker":false,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"Wasp Launch Week #4: Waspolution","authors":["matijasos"],"image":"/img/lw4/lw4-banner.png","tags":["launch-week","update"]},"prevItem":{"title":"A Guide to Windows Development with Wasp & WSL","permalink":"/wasp-docs/blog/2023/11/21/guide-windows-development-wasp-wsl"},"nextItem":{"title":"On the Importance of Naming in Programming","permalink":"/wasp-docs/blog/2023/10/12/on-importance-of-naming-in-programming"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<ImgWithCaption\\n    alt=\\"Launch Week 4 is coming\\"\\n    source=\\"img/lw4/lw4-banner.png\\"\\n/>\\n\\nWe\'re back! Beginning of the October was both the craziest and busiest time we\'ve ever had at Wasp - we ended up on GitHub Trending (almost at [7,000 stars](https://github.com/wasp-lang/wasp) - thank you\ud83d\ude4f), [MAGE](https://usemage.ai/) (our GPT web app generator) exploded with 20,000 apps created and more people than ever used Wasp!\\n\\nCrazily enough, we\'ve even had a first [startup project made in Wasp that has been acquired](https://dev.to/wasp/from-idea-to-exit-building-and-selling-an-ai-powered-saas-in-5-months-27d9) (GPT-powered, of course)! \ud83d\udcb8\ud83d\udc1d\ud83d\udcb8\\n\\nTo top it all off, we have a new launch week incoming that brings a ton of new exciting product updates! If this is your first rodeo, check out our previous launches:\\n- [Launch Week 1: Beta](/blog/2022/11/26/wasp-beta-launch-week) \ud83c\udf89\\n- [Launch Week 2: Pizzazz](/blog/2023/04/11/wasp-launch-week-two) \ud83c\udf55\\n- [Launch Week 3: Magic](/blog/2023/06/22/wasp-launch-week-three) \ud83e\uddd9\\n\\n## What\'s this launch all about?\\n\\nAs you might have noticed, each of our launches comes with a specific theme. We\'ve come a long way since our first launch week, Beta release, which moved Wasp from a prototype to a real, working framework. In the previous two launch weeks we\'ve added plenty of new features and unlocked functionalities you couldn\'t have used before (e.g. email sending, async jobs, ...).\\n\\nThis time we kept introducing new features, but we also realised there are many opportunities to make developers\' lives even easier. That\'s why the theme of this launch week stems from \\"Evolution\\" - Wasp is now well set on its way, lies on the solid foundations with a strong community behind it and keeps naturally evolving!\\n\\n<ImgWithCaption\\n    alt=\\"Growing up\\"\\n    source=\\"img/lw4/grown_up.gif\\"\\n    caption=\\"Wasp from this launch onwards.\\"\\n/>\\n\\nEnough chit-chat - let\'s see what will go down next week! We\'ll present a new feature (or more of them) every day. To stay in the loop follow us on Twitter/X ([@WaspLang](https://twitter.com/WaspLang)) and join our community on [Wasp Discord](https://discord.gg/rzdnErX)!\\n\\n## Launch party \ud83d\ude80\ud83c\udf89\\n\\n<ImgWithCaption\\n    alt=\\"launch event 3 - screenshot\\"\\n    source=\\"img/lw4/lw3-party-screenshot.jpeg\\"\\n    caption=\\"A bit of the atmosphere from LW3 launch party!\\"\\n/>\\n\\nAs it is a tradition by now, we\'ll kick things off with a launch party on our Discord! You will be able to meet the team and be the first one to learn about the new features we\'ll be revealing for the rest of the week. We\'ll also answer community questions, discuss plans for the future, and of course, hand out some sweet swag (finally get your hands on that Da Boi plushie)!\\n\\nThe party starts at **11 am EDT / 5 pm CET** - sign up [here](https://discord.gg/nGgfbEae?event=1162316586963710023) and make sure to mark yourself as \\"interested\\"!\\n\\n<ImgWithCaption\\n    alt=\\"launch event - how to join\\"\\n    source=\\"img/lw4/lw4-event-instructions.png\\"\\n/>\\n\\n## Monday: I am Speed \ud83d\ude84\\n\\n<ImgWithCaption\\n    alt=\\"Why waste time\\"\\n    source=\\"img/lw4/kevin-waste-time.gif\\"\\n    caption=\\"We think the same, but about keystrokes.\\"\\n/>\\n\\nWe all know that developer productivity is a hot topic these days. At the end of the day, why waste time use many keystroke when few do trick?\\n\\nThat\'s exactly what we will feature on Monday! Wasp is already famous for its brevity and prototyping speed, which is powered by its high-level configuration language, but we found a way to make things even simpler!\\n\\n\\n**When**: Monday, October 16 2023\\n\\n## Tuesday: Safety first \ud83d\udc77\\n\\n<ImgWithCaption\\n    alt=\\"Realtime\\"\\n    source=\\"img/lw4/safety-first.gif\\"\\n/>\\n\\nIn every industry they have strict safety protocols - we believe programming should be no different! Especially when it comes to types - imagine if you had a piece of data running around your application, without even knowing what it looks like!? No sir, not under my watch \u2b07\ufe0f\u231a\ufe0f.\\n\\n**When**: Tuesday, October 17 2023\\n\\n## Wednesday: Wasp x AI x ...base \ud83e\udd16\u26a1\ufe0f\\n\\n<ImgWithCaption\\n    alt=\\"Power Rangers\\"\\n    source=\\"img/lw4/power-rangers.gif\\"\\n/>\\n\\nThe best things happen when you combine multiple amazing things together - and that\'s exactly what we did! I don\'t want to spoil too much, but let\'s just say it has become much easier to do a certain similarity search with Wasp \ud83d\ude09.\\n\\nI don\'t want to overhype it, but it might be one of the coolest things you\'ve seen so far - see you on Wednesday!\\n\\n**When**: Wednesday, October 18 2023\\n\\n\\n## Thursday: A glimpse into the future \ud83d\udef8\\n\\n<ImgWithCaption\\n    alt=\\"World if everyone used Wasp for web development\\"\\n    source=\\"img/lw4/web-if-wasp.jpg\\"\\n/>\\n\\nAlthough there is a plenty of work to refine the existing features and polish the overal developer experience, we still always have our eyes on the future and take time to experiment. This is what we will present here - a really cool feature that is possible due to the Wasp\'s unique approach, that will illuminate a lot posibilities for the future!\\n\\n**When**: Thursday, October 19 2023\\n\\n## Friday: Polish \ud83d\udc85\\n\\n<ImgWithCaption\\n    alt=\\"Wax on, Wax off\\"\\n    source=\\"img/lw4/karate-kid.gif\\"\\n/>\\n\\nSometimes, the best thing you can do is take care of what you already have! As we mentioned in the intro, Wasp is becoming all about DX, feature completeness and elegance of use. And this is what we will demonstrate today!\\n\\n**When**: Friday, October 20 2023\\n\\n## Monday: SaaS-a-thon!\\n\\n<ImgWithCaption\\n    alt=\\"Hacking\\"\\n    source=\\"img/lw4/hacking.gif\\"\\n/>\\n\\nAs the ancient scrolls say, every launch week must end with a hackathon, and this is no exception! We\'ll share more details soon, but as the title says, we\'ll equip you as well as possible to create a SaaS of your dreams in no time!\\n\\n**When**: Monday, October 23 2023\\n\\n## Recap\\n\\n- **We are kicking off Launch Week #4 on Mon, Oct 16, at 11am EDT / 5pm CET** - make sure to [register for the event](https://discord.gg/nGgfbEae?event=1162316586963710023)!\\n- **Launch Week #4 brings a ton of new exciting features** - we\u2019ll highlight one each day, starting Monday. Follow us on [twitter](https://twitter.com/WaspLang) and [join our Discord](https://discord.gg/rzdnErX) to stay in the loop!\\n- **Following launch week, we\u2019ll announce a SaaS-a-thon** - get your keyboards warmed up and ready to roll!"},{"id":"/2023/10/12/on-importance-of-naming-in-programming","metadata":{"permalink":"/wasp-docs/blog/2023/10/12/on-importance-of-naming-in-programming","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-10-12-on-importance-of-naming-in-programming.md","source":"@site/blog/2023-10-12-on-importance-of-naming-in-programming.md","title":"On the Importance of Naming in Programming","description":"In stories, you will often find the motif of a powerful demon that can be controlled only by knowing its true name. Once the hero finds out that name, through cunning dialogue or by investigating ancient tomes, they can turn things around and banish the demon!","date":"2023-10-12T00:00:00.000Z","formattedDate":"October 12, 2023","tags":[{"label":"programming","permalink":"/wasp-docs/blog/tags/programming"},{"label":"clean-code","permalink":"/wasp-docs/blog/tags/clean-code"}],"readingTime":11.35,"hasTruncateMarker":false,"authors":[{"name":"Martin Sosic","title":"Co-founder & CTO @ Wasp","url":"https://github.com/martinsos","email":"martin@wasp-lang.dev","imageURL":"https://github.com/martinsos.png","key":"martinsos"}],"frontMatter":{"title":"On the Importance of Naming in Programming","authors":["martinsos"],"image":"/img/on-importance-of-naming-in-programming/variables-naming-pet-white.png","tags":["programming","clean-code"]},"prevItem":{"title":"Wasp Launch Week #4: Waspolution","permalink":"/wasp-docs/blog/2023/10/13/wasp-launch-week-four"},"nextItem":{"title":"Contributing to Tech Communities: How Open-Source can land you a job and get you out of the Skill Paradox","permalink":"/wasp-docs/blog/2023/10/04/contributing-open-source-land-a-job"}},"content":"import ImgWithCaption from \'./components/ImgWithCaption\'\\n\\nIn stories, you will often find the motif of a powerful demon that **can be controlled only by knowing its true name**. Once the hero finds out that name, through cunning dialogue or by investigating ancient tomes, they can turn things around and banish the demon!\\n\\nI firmly believe writing code is not much different: through finding good names for functions, variables, and other constructs, we truly recognize the essence of the problem we are solving. **The consequence of clarity gained is not just good names but also cleaner code and improved architecture**.\\n\\n<ImgWithCaption\\n    alt=\\"The power of correct naming in programming\\"\\n    source=\\"img/on-importance-of-naming-in-programming/naming-banish-thee-white.png\\"\\n/>\\n\\nI would go as far as to say that **90% of writing clean code is \u201cjust\u201d naming things correctly**.\\nSounds simple, but it is really not!\\n\\nLet\u2019s take a look at a couple of examples.\\n\\n# Example #1\\n\\n```js\\n// Given first and last name of a person, returns the\\n// demographic statistics for all matching people.\\nasync function demo (a, b) {\\n  const c = await users(a, b);\\n  return [\\n    avg(c.map(a => a.info[0])),\\n    median(c.map(a => a.info[1]))\\n  ];\\n}\\n```\\n\\nWhat is wrong with this code?\\n\\n1. The name of the function `demo` is **very vague**: it could stand for \u201cdemolish\u201d, or as in \u201cgiving a demo/presentation\u201d, \u2026 .\\n2. Names `a`, `b`, and `c` are **completely uninformative**.\\n3. `a` is reused in lambda inside the `map`, **shadowing** the `a` that is a function argument, confusing the reader and making it easier to make a mistake when modifying the code in the future and reference the wrong variable.\\n4. The returned object doesn\u2019t have any info about what it contains, instead, **you need to be careful about the order of its elements** when using it later.\\n5. The name of the field `.info` in the result of a call to `users()` function gives us **no information as to what it contains**, which is made further worse by its elements being accessed by their position, also hiding any information about them and making our code prone to silently work wrong if their ordering changes.\\n\\nLet\u2019s fix it:\\n\\n```js\\nasync function fetchDemographicStatsForFirstAndLastName (\\n  firstName, lastName\\n) {\\n  const users = await fetchUsersByFirstAndLastName(\\n    firstName, lastName\\n  );\\n  return {\\n    averageAge: avg(users.map(u => u.stats.age)),\\n    medianSalary: median(users.map(u => u.stats.salary))\\n  };\\n}\\n```\\n\\nWhat did we do?\\n\\n1. **The name of the function now exactly reflects what it does, no more no less**. `fetch` in the name even indicates it does some IO (input/output, in this case fetching from the database), which can be good to know since IO is relatively slow/expensive compared to pure code.\\n2. **We made other names informative enough**: not too much, not too little.\\n    - Notice how **we used the name `users` for fetched users**, and not something longer like `usersWithSpecifiedFirstAndLastName` or `fetchedUsers`: there is no need for a longer name, as this variable is very local, short-lived, and there is enough context around it to make it clear what it is about.\\n    - **Inside lambda, we went with a single-letter name**, `u`, which might seem like bad practice. But, here, it is perfect: this variable is extremely short-lived, and it is clear from context what it stands for. Also, we picked specifically the letter `u` for a reason, as it is the first letter of `user`, therefore making that connection obvious.\\n3. **We named values in the object that we return**: `averageAge` and `medianSalary`. Now any code that will use our function won\u2019t need to rely on the ordering of items in the result, and also will be easy and informative to read.\\n\\nFinally, notice how there is no comment above the function anymore. The thing is, **the comment is not needed anymore**: it is all clear from the function name and arguments!\\n\\n# Example #2\\n\\n```js\\n// Find a free machine and use it, or create a new machine\\n// if needed. Then on that machine, set up the new worker \\n// with the given Docker image and setup cmd. Finally,\\n// start executing a job on that worker and return its id.\\nasync function getJobId (\\n  machineType, machineRegion,\\n  workerDockerImage, workerSetupCmd,\\n  jobDescription\\n) {\\n  ...\\n}\\n```\\n\\nIn this example, we are ignoring the implementation details and will focus just on getting the name and arguments right.\\n\\nWhat is wrong with this code?\\n\\n1. **The function name is hiding a lot of details about what it is doing**. It doesn\u2019t mention at all that we have to procure the machine or set up the worker, or that function will result in the creation of a job that will continue executing somewhere in the background. Instead, it gives a feeling that we are doing something simple, due to the verb `get`: we are just obtaining an id of an already existing job.\\nImagine seeing a call to this function somewhere in the code: `getJobId(...)` \u2192 **you are not expecting it to take long or do all of the stuff that it really does, which is bad**.\\n\\nOk, this sounds easy to fix, let\u2019s give it a better name!\\n\\n```jsx\\nasync function procureFreeMachineAndSetUpTheDockerWorkerThenStartExecutingTheJob (\\n  machineType, machineRegion,\\n  workerDockerImage, workerSetupCmd,\\n  jobDescription\\n) {\\n  ...\\n}\\n```\\n\\n**Uff, that is one long and complicated name**. But the truth is, that we can\u2019t really make it shorter without losing valuable information about what this function does and what we can expect from it. Therefore, **we are stuck**, we can\u2019t find a better name! What now?\\n\\nThe thing is, **you can\'t give a good name if you don\'t have clean code behind it**. So a bad name is not just a naming mishap, but often also an indicator of problematic code behind it, a failure in design. Code so problematic, that you don\u2019t even know what to name it \u2192 there is no straightforward name to give to it, because it is not a straightforward code!\\n\\n<ImgWithCaption\\n    alt=\\"Bad name is hiding bad code\\"\\n    source=\\"img/on-importance-of-naming-in-programming/bad-name-bad-code-scooby.png\\"\\n/>\\n\\nIn our case, the problem is that this **function is trying to do too much at once**. A long name and many arguments are indicators of this, although these can be okay in some situations. Stronger indicators are the usage of words \u201cand\u201d and \u201cthen\u201d in the name, as well as argument names that can be grouped by prefixes (`machine`, `worker`).\\n\\nThe solution here is to clean up the code by breaking down the function into multiple smaller functions:\\n\\n```jsx\\nasync function procureFreeMachine (type, region) { ... }\\nasync function setUpDockerWorker (machineId, dockerImage, setupCmd) { ... }\\nasync function startExecutingJob (workerId, jobDescription) { ... }\\n```\\n\\n# What is a good name?\\n\\nBut let\u2019s take a step back - what is a bad name, and what is a good name? What does that mean, how do we recognize them?\\n\\n**Good name doesn\u2019t misdirect, doesn\u2019t omit, and doesn\u2019t assume**.\\n\\nA good name should give you a good idea about what the variable contains or function does. A good name will tell you all there is to know or will tell you enough to know where to look next. It will not let you guess, or wonder. It will not misguide you. A good name is obvious, and expected. It is consistent. Not overly creative. It will not assume context or knowledge that the reader is not likely to have.\\n\\nAlso, **context is king:** you can\u2019t evaluate the name without the context in which it is read. `verifyOrganizationChainCredentials` could be a terrible name or a great name. `a` could be a great name or a terrible name. It depends on the story, the surroundings, on the problem the code is solving. Names tell a story, and they need to fit together like a story.\\n\\n# Examples of famous bad names\\n\\n- **JavaScript**\\n    - I was the victim of this bad naming myself: my parents bought me a book about JavaScript while I wanted to learn Java.\\n- **HTTP Authorization header**\\n    - It is named `Authorization`, but is used for authentication! And those are not the same: authentication is about identifying yourself, and authorization is about granting permissions. More about it can be found here: [https://stackoverflow.com/questions/30062024/why-is-the-http-header-for-authentication-called-authorization](https://stackoverflow.com/questions/30062024/why-is-the-http-header-for-authentication-called-authorization) .\\n- **Wasp-lang**:\\n    - This one is my fault: [Wasp](https://github.com/wasp-lang/wasp) is a full-stack JS web framework that uses a custom config language as only a small part of its codebase, but I put `-lang` in the name and scared a lot of people away because they thought it was a whole new general programming language!\\n\\n# How to come up with a good name\\n\\n## Don\u2019t give a name, find it\\n\\nThe best advice is maybe not to give a name, but instead to **find out** a name. You shouldn\u2019t be making up an original name, as if you are naming a pet or a child; **you are instead looking for the essence of the thing you are naming, and the name should present itself based on it**. If you don\u2019t like the name you discovered, it means you don\u2019t like the thing you are naming, and you should change that thing by improving the design of your code (as we did in the example #2).\\n\\n<ImgWithCaption\\n    alt=\\"You shouldn\'t name your variables the same way you name your pets, and vice versa\\"\\n    source=\\"img/on-importance-of-naming-in-programming/variables-naming-pet-white.png\\"\\n/>\\n\\n## Things to look out for when figuring out a name\\n\\n1. **First, make sure it is not a bad name :)**. Remember: don\u2019t misdirect, don\u2019t omit, don\u2019t assume.\\n2. **Make it reflect what it represents.** Find the essence of it, capture it in the name. Name is still ugly? Improve the code. You have also other things to help you here \u2192 type signature, and comments. But those come secondary.\\n3. **Make it play nicely with the other names around it.** It should have a clear relation to them - be in the same \u201cworld\u201d. It should be similar to similar stuff, opposite to opposite stuff. It should make a story together with other names around it. It should take into account the context it is in.\\n4. **Length follows the scope**. In general, the shorter-lived the name is, and the smaller its scope is, the shorter the name can/should be, and vice versa. This is why it can be ok to use one-letter variables in short lambda functions. If not sure, go for the longer name.\\n5. **Stick to the terminology you use in the codebase**. If you so far used the term `server`, don\u2019t for no reason start using the term `backend` instead. Also, if you use `server` as a term, you likely shouldn\'t go with `frontend`: instead, you will likely want to use `client`, which is a term more closely related to the `server`.\\n6. **Stick to the conventions you use in the codebase**. Examples of some of the conventions that I often use in my codebases:\\n    - prefix `is` when the variable is Bool (e.g. `isAuthEnabled`)\\n    - prefix `ensure` for the functions that are idempotent, that will do something (e.g allocate a resource) only if it hasn\u2019t been set up so far (e.g. `ensureServerIsRunning`).\\n\\n## The simple technique for figuring out a name every time\\n\\nIf you are ever having trouble coming up with a name, do the following:\\n\\n1. Write a comment above the function/variable where you **describe what it is, in human language**, as if you were describing it to your colleague. It might be one sentence or multiple sentences.\\nThis is the essence of what your function/variable does, what it is.\\n2. Now, you take the role of the sculptor, and you chisel at and **shape that description of your function/variable until you get a name**, by taking pieces of it away. You stop when you feel that one more hit of your imagined chisel at it would take too much away.\\n3. Is your name still too complex/confusing? If that is so, that means that the code behind is too complex, and should be reorganized! **Go refactor it**.\\n4. **Ok, all done** \u2192 you have a nice name!\\n5. That comment above the function/variable? Remove everything from it that is now captured in the code (name + arguments + type signature). If you can remove the whole comment, great. Sometimes you can\u2019t, because some stuff can\u2019t be captured in the code (e.g. certain assumptions, explanations, examples, \u2026), and that is also okay. But don\u2019t repeat in the comment what you can say in the code instead. **Comments are a necessary evil and are here to capture knowledge that you can\u2019t capture in your names and/or types**.\\n\\nDon\u2019t get overly stuck on always figuring out the perfect name at the get-go \u2192 it is okay to do multiple iterations of your code, with both your code and name improving with each iteration.\\n\\n# Reviewing code with naming in mind\\n\\nOnce you start thinking a lot about naming, you will see how it will change your code review process: focus shifts from looking at implementation details to looking at names first.\\n\\n**When I am doing a code review, there is one predominant thought I will be thinking about: \u201cIs this name clear?\u201d**. From there, the whole review evolves and results in clean code.\\n\\nInspecting a name is a single point of pressure, that untangles the whole mess behind it. Search for bad names, and you will sooner or later uncover the bad code if there is some.\\n\\n# Further reading\\n\\nIf you haven\u2019t yet read it, I would recommend reading the book **Clean Code by Robert Martin**. It has a great chapter on naming and also goes much further on how to write code that you and others will enjoy reading and maintaining.\\n\\nAlso, [A popular joke about naming being hard](https://martinfowler.com/bliki/TwoHardThings.html)."},{"id":"/2023/10/04/contributing-open-source-land-a-job","metadata":{"permalink":"/wasp-docs/blog/2023/10/04/contributing-open-source-land-a-job","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-10-04-contributing-open-source-land-a-job.md","source":"@site/blog/2023-10-04-contributing-open-source-land-a-job.md","title":"Contributing to Tech Communities: How Open-Source can land you a job and get you out of the Skill Paradox","description":"TL;DR","date":"2023-10-04T00:00:00.000Z","formattedDate":"October 4, 2023","tags":[{"label":"career","permalink":"/wasp-docs/blog/tags/career"},{"label":"web-development","permalink":"/wasp-docs/blog/tags/web-development"},{"label":"open-source","permalink":"/wasp-docs/blog/tags/open-source"},{"label":"hacktoberfest","permalink":"/wasp-docs/blog/tags/hacktoberfest"}],"readingTime":9.825,"hasTruncateMarker":false,"authors":[{"name":"Vinny","title":"DevRel @ Wasp","url":"https://vincanger.github.io","email":"vince@wasp-lang.dev","imageURL":"https://vincanger.github.io/assets/vince_smiley.jpg","key":"vinny"}],"frontMatter":{"title":"Contributing to Tech Communities: How Open-Source can land you a job and get you out of the Skill Paradox","authors":["vinny"],"image":"/img/open-source-contribute.gif","tags":["career","web-development","open-source","hacktoberfest"]},"prevItem":{"title":"On the Importance of Naming in Programming","permalink":"/wasp-docs/blog/2023/10/12/on-importance-of-naming-in-programming"},"nextItem":{"title":"Build your own AI Meme Generator & learn how to use OpenAI\'s function calls","permalink":"/wasp-docs/blog/2023/09/17/ai-meme-generator-how-to-use-openai-function-call"}},"content":"## TL;DR\\n![How to Open-Source](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04lotyojmwdnzt7b2s8j.png)\\nIn this article, we\u2019re going to see how open-source can change your career for the better and get you out of the Skill Paradox \u2014 a point in which the skills you need to land a job are generally acquired after you get a job.\\n\\nBesides that, we\u2019ll check how you can start contributing to different open-source projects and get on the hype train of [Hacktoberfest](https://hacktoberfest.com/) while also learning some important topics on handling feedbacks and showcasing your contributions.\\n\\n## 1. Introduction\\n\\nAre you a beginner developer that lacks certain skills needed to land a job? But you feel that you could only gain those skills **on** the job itself?\\nIf you answered \u201cyes\u201d, then you\u2019re stuck in situation that I would call as the \u201c**skill paradox**\u201d ***\u2014*** where you need skills to get a job, but those skills are the ones you would get if you had a job. It can generate a lot of stress and frustration when you start to realize that some skills cannot be obtained while working only on side hustles and therefore, you cannot learn only by yourself, but they\u2019re generally required for job positions.\\n\\nCollaboration and teamwork, learning how to code review (giving and receiving feedback), and getting started with bigger and existing codebases are things that cannot be taught while you work on some little projects. While, of course, you can learn those skills while getting a job in tech, sometimes those skills are necessary for you to get a job, making you stay in some kind of limbo where you need some skills to get a job, and those skills are precisely the ones you would get after the job.\\n\\nIn those cases, there\u2019s still a way out of the limbo: you can contribute to open-source communities. Besides the value you are generating for the whole ecosystem, this can be an amazing selling point for your career and, since [Hacktoberfest](https://hacktoberfest.com/) is already around the corner, will be a great way to win a t-shirt or plant a tree too!\\n\\nNow, let\u2019s begin by teaching you how to actually do this.\\n\\n## 2. First steps on Open-Source Contribution\\n\\n### 2.1. Finding a project\\n\\nFirst of all, we need to choose a project. If you\u2019re a beginner, you\u2019re probably looking for projects that have a few characteristics:\\n\\n- It\u2019s actively maintained.\\n- Has an open-source license that we can modify and use freely.\\n- It\u2019s not insanely big (since these projects can have some really hard things to accomplish before submitting something).\\n- It must have good documentation on how to contribute.\\n- It must have well-characterized issues in order for you to search for something (in the case that you haven\u2019t found the problem itself).\\n\\nIf you have matches in all of these points (or at least three of them), you\u2019re good to go!\\n\\nThroughout this article, I\u2019m going to use our own repo, [Wasp Full-stack Framework](https://github.com/wasp-lang/wasp), since it gathers all the characteristics necessary for a good open-source repository. \\n\\nSo, let me show you how to find all these characteristics:\\n\\n- It\u2019s actively maintained and the owners of the repo reply and care for the issues!\\n    - In the case of Wasp\u2019s repo, the last commit was 13 hours ago, so, there\u2019s definitely signs of life here!\\n\\n\\n![Last commit](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gz3g6jl8hbvw66jmtizk.png)\\n\\n- It\u2019s not insanely big \u2192 Comparing an exaggerated example with the Linux repo (if you check it, you\u2019ll see that all pull requests there usually take a lot of time to be merged since the project is so big)\\n\\n![Linux repo](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cp5ptn8uwzb9qv81sey.png)\\n\\n- It\u2019s good to have a documentation on how to contribute\\n    - Searching for the docs, I found a file called [CONTRIBUTING.md](https://github.com/wasp-lang/wasp/blob/main/CONTRIBUTING.md) (which is a common name standard for contribution guidelines) and when we open it up:\\n\\n![Contributing guidelines](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8orfm43mllm2r5fs222o.png)\\n\\nWe have a whole documentation on how to start with things! Awesome!\\n\\n- It\u2019s good to have well characterized issues in order for you to search for something\\n\\n\\n![Issues](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dk32gx185n9x9uoepobn.png)\\n\\nSearching for the issues, we can easily see that they\u2019re all labeled and that will help us A TON!\\n\\n### 2.2. Searching for Issues\\n\\nGreat! Now that we have already chosen where we are going to contribute, let\u2019s dive into the issues and search for something we want to do!\\n\\nWhen searching for issues, the labels do us a great favor by already explicitly identifying all issues that can be good for newcomers! If you\u2019re a beginner, **good first issues** and **documentation** are excellent labels for you to search for!\\n\\n\\n![Good labels to search for](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdyigcuhobk75vsi37oi.png)\\n\\n\\n![Issues on the repo labeled](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yy6ek9gte26emr3bi182.png)\\n\\nOpening the first issue, we can see that someone already manifested interest on it! So, since someone has already manifested interest in that one, let\u2019s search for another one!\\n\\n![The first issue](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6phw5wcd5ik8bj8udj4u.png)\\n\\nFinding another issue \u2014 it doesn\u2019t look like anyone is working on the one below, so we can take it ourselves!\\n\\n![Finding another issue](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1o3v1r5yzzcmotjbiqi.png)\\n\\nBy the way, it\'s of absolute importance that, when you find an issue, you comment and set yourself as assignee in order to let other people know that you\'re going to take the task at hand!\\n\\n\\n![Communicating](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2t7qjpv9syc2hi09xai.png)\\n\\nIn this case, GitHub is a great platform for us to discuss, but sometimes authors can be hard to find. In these cases, search for a link or a way to contact them directly (in the case of Wasp, they have a [Discord](https://discord.gg/rzdnErX) server, for example). Communicating your way through is really important to get things sorted out, and if you\u2019re unsure of how to communicate well with people, you can read this other article [here](https://dev.to/llxd/how-to-deal-with-people-communication-5gef) and start to get the hang of it!\\n\\n## 3. Guidelines for Contributing to Open-Source Projects\\n\\n### 3.1. Reading the guidelines and writing some code\\n\\nNow that we have selected a repo, an issue to work on and communicated with the authors, it\u2019s time to check the guidelines for making Pull Requests (if you don\u2019t know what this means, it\u2019s basically a request to merge your modifications to the codebase, you can check some more basic git terms [here](https://rogerdudler.github.io/git-guide/) too). Sometimes, these guidelines are WAY too hard and sometimes they don\u2019t even exist (that\u2019s an awesome first issue actually), anyways look it up and see if you find something! \\n\\nYou can check Wasp\u2019s contributing guidelines [here](https://github.com/wasp-lang/wasp/blob/main/CONTRIBUTING.md) if you want to read it yourself! After reading it, it\u2019s time to code the solution and get along with it.\\n\\nSince the intent of this article is not to actually show the solving per se, I\u2019ll skip this part and keep talking about the process itself. \\n\\n### 3.2 Handling Code Reviews and Feedback\\n\\nIt\u2019s not rare that when we code things up (especially in open-source projects), there will be some problems. Code reviews and feedback are an amazing way for us to get the bigger picture and improve our code quality, so let\u2019s check on how to properly read and answer code reviews and feedback.\\n\\nWe\u2019re generally used to receiving criticism in a harsh way, so, when someone approaches you with feedbacks, we generally move into our defense zone. Unfortunately, these cases can teach you the wrong things as it\u2019s generally a good way to think of feedbacks as **gifts**! Someone spent some time writing (or speaking) things in order for you get even better on what you\u2019re trying to accomplish.\\n\\nThis does not mean that all feedback is well-made or that people will always provide great feedback. Sometimes, people can be harsh. However, as you receive more and more feedbacks, you will develop a sense of which feedbacks are genuinely meant to help you improve and which are simply baseless criticism. It is crucial to be open to receiving constructive feedbacks and not take them personally.\\n\\nLet\u2019s see an example of code review and feedback here:\\n\\n![Code Review Example](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezsocw81o9d90erstx3n.png)\\n\\nThis is great feedback! It expresses the author\u2019s opinion without being harsh and also suggests what to make in order to be perfect! The best way to answer this is simply:\\n\\n- Thanking for the feedback\\n- Saying your opinion (agree or disagree) when it makes sense\\n- Work on it!\\n\\n## Showcasing Contributions\\n\\nAfter all that work, it\u2019s time for us to showcase our contributions! Document it all. **GitHub** (or other git platforms), **personal portfolio sites, LinkedIn,** and other means of reaching people have become as important as resumes nowadays, so it\u2019s really nice to have some statistics and data to display on:\\n\\n- What open-source projects have you worked on? Try to think of this as writing a story. First, start by giving the initial context of the project and how it\u2019s revelatory.\\n- How you contributed: Then, give the context of what you made, documentation, code, and problems you solved in general. Don\u2019t forget to not focus a lot on the technical side since the person who could be reading this may not be technical.\\n- How big was the impact? Talk about how this affected the ecosystem; it can be as big or as small as you like. Never neglect the impact that changing documentation can have (remember that for us, programmers, the documentation is our source of truth, and fixes there are greatly appreciated).\\n\\nDon\u2019t forget to utilize the opportunity to engage with other developers and communities, make it so in order to get new connections and even greater opportunities later on! \\n\\nNow that the theory is set, let\u2019s check a few examples on how I would showcase a few of my contributions:\\n\\n### Case 1 - A big contribution\\n\\nOne of the ways to describe a big contribution is like this:\\n\\nI made a few big contributions to a project called **[Coolify](https://coolify.io/)**, which was an open-source Heroku alternative. I refactored a lot of the UI, making it cleaner and more consistent throughout the application. Currently, more than 9000 instances are installed, and the UI affects all of them! You can check out the [contributions](https://github.com/coollabsio/coolify/commits?author=LLxD) here.\\n\\nOf course, you can make this text as long or as short as you want, entering more detail about how this contribution was made and what exactly you did, but for this article, this is enough for you to get a general idea.\\n\\n### Case 2- A small contribution\\n\\nOne way to describe a small contribution is like this:\\n\\nI made a small change to the new documentation for [Sequelize](https://sequelize.org/)! I was just scrolling through the documentation and found this mistake that could lead others to weird debugging sessions, so as soon as I found it, I submitted a PR for them! You can check out the contribution [here](https://github.com/sequelize/website/commits?author=LLxD)!\\n\\n## Conclusion\\n\\nSo, a lot was said, let\u2019s make a quick recap on how to do contributions and how to showcase them:\\n\\n- First of all, find a repo! If you don\u2019t have any in mind, there loads of lists (like [this](https://github.com/collections/choosing-projects) one) that recommend some repos for you to take a look\\n- Search for an issue that is not being made and you can work on it, if you\u2019re beginner, check for **documentation** and **good first issue** labels\\n- Comment and communicate that you\u2019re going to fix the issue - take the opportunity to talk and get to know other developers\\n- Code, get you PR reviewed and ready to merge after the feedbacks\\n- Merge and showcase your contributions, showing that they are your way out of the Skill Paradox\\n\\n![How to Open-Source](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04lotyojmwdnzt7b2s8j.png)\\n\\nThe above steps can give you a really powerful experience in software engineering (which usually happens only when you\u2019re already hired by a company). This is an awesome way to get some recognition while improving the open-source community \u2014 giving back to other developers and getting yourself out of the Skill Paradox!\\n\\nAnd you? Have you contributed to open-source? Let me know in the comments below, and let\u2019s share some experiences!"},{"id":"/2023/09/17/ai-meme-generator-how-to-use-openai-function-call","metadata":{"permalink":"/wasp-docs/blog/2023/09/17/ai-meme-generator-how-to-use-openai-function-call","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md","source":"@site/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md","title":"Build your own AI Meme Generator & learn how to use OpenAI\'s function calls","description":"Table of Contents","date":"2023-09-17T00:00:00.000Z","formattedDate":"September 17, 2023","tags":[{"label":"ai","permalink":"/wasp-docs/blog/tags/ai"},{"label":"meme","permalink":"/wasp-docs/blog/tags/meme"},{"label":"openai","permalink":"/wasp-docs/blog/tags/openai"},{"label":"function calling","permalink":"/wasp-docs/blog/tags/function-calling"},{"label":"react","permalink":"/wasp-docs/blog/tags/react"},{"label":"full-stack","permalink":"/wasp-docs/blog/tags/full-stack"},{"label":"generate","permalink":"/wasp-docs/blog/tags/generate"}],"readingTime":30.015,"hasTruncateMarker":false,"authors":[{"name":"Vinny","title":"DevRel @ Wasp","url":"https://vincanger.github.io","email":"vince@wasp-lang.dev","imageURL":"https://vincanger.github.io/assets/vince_smiley.jpg","key":"vinny"}],"frontMatter":{"title":"Build your own AI Meme Generator & learn how to use OpenAI\'s function calls","authors":["vinny"],"image":"/img/memerator-banner-tall.gif","tags":["ai","meme","openai","function calling","react","full-stack","generate"]},"prevItem":{"title":"Contributing to Tech Communities: How Open-Source can land you a job and get you out of the Skill Paradox","permalink":"/wasp-docs/blog/2023/10/04/contributing-open-source-land-a-job"},"nextItem":{"title":"Using Product Requirement Documents to Generate Better Web Apps with AI","permalink":"/wasp-docs/blog/2023/08/23/using-product-requirement-documents-generate-better-web-apps-with-ai"}},"content":"## Table of Contents\\n\\n- [TL;DR](#tldr)\\n- [Intro](#intro)\\n    - [Call Me, Maybe](#intro)\\n    - [Let\'s Build](#lets-build)\\n- [Part 1](#config)\\n    - [Configuration](#config)\\n        - [Project Set Up](#setup)\\n        - [Database Set up](#db)\\n        - [Environment Variables](#env)\\n        - [Start Your App](#start)\\n    - [Generating Memes](#generate-meme)\\n        - [Server-Side Code](#generate-server)\\n        - [Client-Side Code](#generate-client)\\n- [Part 2](#part-two)\\n    - [Fetching & Updating Templates w/ Cron Jobs](#templates)\\n        - [Defining our Daily Cron Job](#cron)\\n        - [Testing](#cron-test)\\n    - [Editing Memes](#edit)\\n        - [Server-Side Code](#server)\\n        - [Client-Side Code](#client)\\n    - [Deleting Memes](#delete)\\n- [Conclusion](#conclusion)\\n\\n<a name=\'tldr\' href=\'#tldr\'></a>\\n# TL;DR\\n\\nIn this two-part tutorial, we\u2019re going to build a full-stack instant Meme Generator app using:\\n\\n- React & NodeJS w/ TypeScript\\n- OpenAI\u2019s [Function Calling API](https://platform.openai.com/docs/guides/gpt/function-calling)\\n- ImgFlip.com\u2019s [meme creator API](https://imgflip.com/api)\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/4rTXljsphQ8?si=Lny4ruPRNJu3-zwL\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\nYou check out a deployed version of the app we\u2019re going to build here: [The Memerator](https://damemerator.netlify.app)\\n\\nIf you just want to see the code for the finished app, check out the [Memerator\u2019s GitHub Repo](https://github.com/vincanger/memerator)\\n\\n<a name=\'intro\' href=\'#intro\'></a>\\n# Intro\\n\\n## Call Me, Maybe\\n\\nWith [OpenAI\u2019s chat completions API](https://platform.openai.com/docs/guides/gpt), developers are now able to do some really cool stuff. It basically enables ChatGPT functionality, but in the form of a callable API you can integrate into any app.\\n\\nBut when working with the API, a lot of devs wanted GPT to give back data in a format, like JSON, that they could use in their app\u2019s functions.\\n\\nUnfortunately, if you asked ChatGPT to return the data in a certain format, it wouldn\u2019t always get it right. Which is why [OpenAI released function calling](https://platform.openai.com/docs/guides/gpt/function-calling).\\n\\nAs they describe it, function calling allows devs to \u201c\u2026 describe functions to\xa0GPT, and have the model intelligently choose to output a JSON object containing arguments to call those functions.\u201d\\n\\nThis is a great way to turn natural language into an API call.\\n\\nSo what better way to learn how to use GPT\u2019s function calling feature than to use it to call [Imgflip.com\u2019s meme creator API](https://imgflip.com/api)!?\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a0bc9uxabyg8cue2axu.png)\\n\\n<a name=\'lets-build\' href=\'#lets-build\'></a>\\n## Let\u2019s Build\\n\\nIn this two-part tutorial, we\u2019re going to build a full-stack React/NodeJS app with:\\n\\n- Authentication\\n- Meme generation via OpenAI\u2019s function calling and ImgFlip.com\u2019s API\\n- Daily cron job to fetch new meme templates\\n- Meme editing and deleting\\n- and more!\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwkbfq9kx8xlu7fb25v0.png)\\n\\nI already deployed a working version of this app that you can try out here: [https://damemerator.netlify.app](https://damemerator.netlify.app) \u2014 so give it a go and let\u2019s get\u2026 going.\\n\\nIn Part 1 of this tutorial, we will get the app set up and generating and displaying memes. \\n\\nIn Part 2, we will add more functionality, like recurring cron jobs to fetch more meme templates, and the ability to edit and delete memes.\\n\\nBTW, two quick tips:\\n\\n1. if you need to reference the app\u2019s finished code at any time to help you with this tutorial, you can check out the app\u2019s [GitHub Repo here](https://github.com/vincanger/memerator). \\n2. if you have any questions, feel free to hop into the [Wasp Discord Server](https://discord.gg/rzdnErX) and ask us!\\n\\n# Part 1\\n\\n<a name=\'config\' href=\'#config\'></a>\\n\\n## Configuration\\n\\nWe\u2019re going to make this a full-stack React/NodeJS web app so we need to get that set up first. But don\u2019t worry, it won\u2019t take long AT ALL, because we will be using [Wasp](https://wasp-lang.dev) as the framework.\\n\\nWasp does all the heavy lifting for us. You\u2019ll see what I mean in a second.\\n\\n<a name=\'setup\' href=\'#setup\'></a>\\n\\n### Set up your Wasp project\\n\\nFirst, install Wasp by running this in your terminal:\\n\\n```bash\\ncurl -sSL <https://get.wasp-lang.dev/installer.sh> | sh\\n```\\n\\nNext, let\u2019s clone the `start` branch of the [Memerator](http://damemerator.netlify.app) app that I\u2019ve prepared for you:\\n\\n```bash\\ngit clone -b start https://github.com/vincanger/memerator.git\\n```\\n\\nThen navigate into the `Memerator` directory and open up the project in VS Code:\\n\\n```bash\\ncd Memerator && code .\\n```\\n\\nYou\u2019ll notice Wasp sets up your full-stack app with a file structure like so:\\n\\n```bash\\n.\\n\u251c\u2500\u2500 main.wasp             # The wasp config file.\\n\u2514\u2500\u2500 src\\n \xa0\xa0 \u251c\u2500\u2500 client            # Your React client code (JS/CSS/HTML) goes here.\\n \xa0\xa0 \u251c\u2500\u2500 server            # Your server code (Node JS) goes here.\\n \xa0\xa0 \u2514\u2500\u2500 shared            # Your shared (runtime independent) code goes here.\\n\\n```\\n\\nLet\u2019s check out the `main.wasp` file first. You can think of it as the \u201cskeleton\u201d, or instructions, of your app. This file configures most of your full-stack app for you \ud83e\udd2f:\\n\\n```jsx\\napp Memerator {\\n  wasp: {\\n    version: \\"^0.11.3\\"\\n  },\\n  title: \\"Memerator\\",\\n  client: {\\n    rootComponent: import { Layout } from \\"@client/Layout\\",\\n  },\\n  db: {\\n    system: PostgreSQL,\\n    prisma: {\\n      clientPreviewFeatures: [\\"extendedWhereUnique\\"]\\n    }\\n  },\\n  auth: {\\n    userEntity: User,\\n    methods: {\\n      usernameAndPassword: {}\\n    },\\n    onAuthFailedRedirectTo: \\"/login\\",\\n    onAuthSucceededRedirectTo: \\"/\\"\\n  },\\n  dependencies: [\\n    (\\"openai\\", \\"4.2.0\\"),\\n    (\\"axios\\", \\"^1.4.0\\"),\\n    (\\"react-icons\\", \\"4.10.1\\"),\\n  ]\\n}\\n\\nentity User {=psl\\n    id       Int    @id @default(autoincrement())\\n    username String @unique\\n    password String\\n    memes    Meme[]\\n    isAdmin  Boolean @default(false)\\n    credits  Int     @default(2)\\npsl=}\\n\\nentity Meme {=psl\\n    id         String @id @default(uuid())\\n    url        String \\n    text0      String\\n    text1      String\\n    topics     String \\n    audience   String \\n    template   Template @relation(fields: [templateId], references: [id])\\n    templateId String\\n    user       User   @relation(fields: [userId], references: [id])\\n    userId     Int    \\n    createdAt  DateTime @default(now())\\npsl=}\\n\\nentity Template {=psl\\n    id       String @id @unique\\n    name     String\\n    url      String\\n    width    Int\\n    height   Int\\n    boxCount Int\\n    memes    Meme[]\\npsl=}\\n\\nroute HomePageRoute { path: \\"/\\", to: HomePage }\\npage HomePage {\\n  component: import { HomePage } from \\"@client/pages/Home\\",\\n}\\n\\nroute LoginRoute { path: \\"/login\\", to: LoginPage }\\npage LoginPage {\\n  component: import Login from \\"@client/pages/auth/Login\\"\\n}\\nroute SignupRoute { path: \\"/signup\\", to: SignupPage }\\npage SignupPage {\\n  component: import Signup from \\"@client/pages/auth/Signup\\"\\n}\\n```\\n\\nAs you can see, our `main.wasp` config file has our:\\n\\n- dependencies,\\n- authentication method,\\n- database type, and\\n- database models (\u201dentities\u201d)\\n- client-side pages & routes\\n\\nYou might have also noticed this `{=psl psl=}` syntax in the entities above. This denotes that anything in between these `psl` brackets is actually a different language, in this case, [Prisma Schema Language](https://www.prisma.io/docs/concepts/components/prisma-schema). Wasp uses Prisma under the hood, so if you\'ve used Prisma before, it should be straightforward.\\n\\nAlso, make sure you install the [Wasp VS code extension](https://marketplace.visualstudio.com/items?itemName=wasp-lang.wasp) so that you get nice syntax highlighting and the best overall dev experience.\\n\\n<a name=\'db\' href=\'#db\'></a>\\n\\n### Setting up the Database\\n\\nWe still need to get a Postgres database setup. \\n\\nUsually this can be pretty annoying, but with Wasp it\u2019s really easy.\\n\\n1. just have [Docker Deskop](https://www.docker.com/products/docker-desktop/) installed and running, \\n2. open up **a separate terminal tab/window,** \\n3. `cd` into the `Memerator` directory, and then run\\n\\n```bash\\nwasp start db\\n```\\n\\nThis will start and connect your app to a Postgres database for you. No need to do anything else! \ud83e\udd2f\xa0\\n\\nJust leave this terminal tab, along with docker desktop, open and running in the background.\\n\\nNow, in a different terminal tab, run\\n\\n```bash\\nwasp db migrate-dev\\n```\\n\\nand make sure to give your database migration a name, like `init`.\\n\\n<a name=\'env\' href=\'#env\'></a>\\n\\n### Environment Variables\\n\\nIn the root of your project, you\u2019ll find a `.env.server.example` file that looks like this:\\n\\n```bash\\n# set up your own credentials on https://imgflip.com/signup and rename this file to .env.server\\n# NOTE: make sure you register with Username and Password (not google) \\nIMGFLIP_USERNAME=\\nIMGFLIP_PASSWORD=\\n\\n# get your api key from https://platform.openai.com/\\nOPENAI_API_KEY=\\n\\nJWT_SECRET=asecretphraseatleastthirtytwocharacterslong\\n```\\n\\nRename this file to `.env.server` and follow the instructions in it to get your:\\n\\n- [Imgflip credentials](https://imgflip.com/signup) and\\n- [OpenAI API keys](https://platform.openai.com/)\\n\\nas we will need them to generate our memes \ud83e\udd21\\n\\n<a name=\'start\' href=\'#start\'></a>\\n\\n### Start your App\\n\\nWith everything setup correctly, you should now be able to run \\n\\n```bash\\nwasp start\\n```\\n\\nWhen running `wasp start`, Wasp will install all the necessary npm packages, start our NodeJS server on port 3001, and our React client on port 3000. \\n\\nHead to [localhost:3000](http://localhost:3000/) in your browser to check it out. We should have the basis for our app that looks like this:\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1541hswduhm7d2bm8oz.png)\\n\\n<a name=\'generate-meme\' href=\'#generate-meme\'></a>\\n\\n## Generating a Meme\\n\\nThe boilerplate code already has the client-side form set up for generating memes based on:\\n\\n- topics\\n- intended audience\\n\\nThis is the info we will send to the backend to call the OpenAI API using function calls. We then send this info to the [imglfip.com API](https://imgflip.com/api) to generate the meme.\\n\\nBut the **/caption_image** endpoint of the imgflip API needs the meme template id. And to get that ID we first need to fetch the available meme templates from imgflip\u2019s **/get_memes** endpoint\\n\\nSo let\u2019s set that up now.\\n\\n<a name=\'generate-server\' href=\'#generate-server\'></a>\\n\\n### Server-Side Code\\n\\nCreate a new file in `src/server/` called `utils.ts`:\\n\\n```tsx\\nimport axios from \'axios\';\\nimport { stringify } from \'querystring\';\\nimport HttpError from \'@wasp/core/HttpError.js\';\\n\\ntype GenerateMemeArgs = {\\n  text0: string;\\n  text1: string;\\n  templateId: string;\\n};\\n\\nexport const fetchMemeTemplates = async () => {\\n  try {\\n    const response = await axios.get(\'https://api.imgflip.com/get_memes\');\\n    return response.data.data.memes;\\n  } catch (error) {\\n    console.error(error);\\n    throw new HttpError(500, \'Error fetching meme templates\');\\n  }\\n};\\n\\nexport const generateMemeImage = async (args: GenerateMemeArgs) => {\\n  console.log(\'args: \', args);\\n\\n  try {\\n    const data = stringify({\\n      template_id: args.templateId,\\n      username: process.env.IMGFLIP_USERNAME,\\n      password: process.env.IMGFLIP_PASSWORD,\\n      text0: args.text0,\\n      text1: args.text1,\\n    });\\n\\n    // Implement the generation of meme using the Imgflip API\\n    const res = await axios.post(\'https://api.imgflip.com/caption_image\', data, {\\n      headers: {\\n        \'Content-Type\': \'application/x-www-form-urlencoded\',\\n      },\\n    });\\n\\n    const url = res.data.data.url;\\n\\n    console.log(\'generated meme url: \', url);\\n\\n    return url as string;\\n  } catch (error) {\\n    console.error(error);\\n    throw new HttpError(500, \'Error generating meme image\');\\n  }\\n};\\n```\\n\\nThis gives us some utility functions to help us fetch all the meme templates that we can possibly generate meme images with.\\n\\nNotice that the POST request to the **/caption_image** endpoint takes the following data:\\n\\n- our imgflip **username** and **password**\\n- **ID** of the meme template we will use\\n- the text for top of the meme, i.e. **text0**\\n- the text for the bottom of the meme, i.e. **text1**\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gt16im7qb0agg6m2idft.png)\\n\\nThe text0 and text1 arguments will generated for us by our lovely friend, ChatGPT. But in order for GPT to do that, we have to set up its API call, too.\\n\\nTo do that, create a new file in `src/server/` called `actions.ts`. \\n\\nThen go back to your `main.wasp` config file and add the following Wasp Action at the bottom of the file:\\n\\n```tsx\\n//...\\n\\naction createMeme {\\n  fn: import { createMeme } from \\"@server/actions.js\\",\\n  entities: [Meme, Template, User]\\n}\\n```\\n\\nAn [Action is a type of Wasp Operation](https://wasp-lang.dev/docs/data-model/operations/actions) that changes some state on the backend. It\u2019s essentially a NodeJS function that gets called on the server, but Wasp takes care of setting it all up for you.\\n\\nThis means you don\'t have to worry about building an HTTP API for the Action, managing server-side request handling, or even dealing with client-side response handling and caching. Instead, you just write the business logic!\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1qoo0k5hg2hl3i49lqb.png)\\n\\nIf you\u2019ve got the [Wasp VS Code extension installed](https://marketplace.visualstudio.com/items?itemName=wasp-lang.wasp), you\u2019ll see an error (above). Hover over it and click `Quick Fix` > `create function createMeme`.\\n\\nThis will scaffold a `createMeme` function (below) for you in your `actions.ts` file if the file exists. Pretty Cool!\\n\\n```tsx\\nimport { CreateMeme } from \'@wasp/actions/types\'\\n\\ntype CreateMemeInput = void\\ntype CreateMemeOutput = void\\n\\nexport const createMeme: CreateMeme<CreateMemeInput, CreateMemeOutput> = async (args, context) => {\\n  // Implementation goes here\\n}\\n```\\n\\nYou can see that it imports the Action types for you as well.\\n\\nBecause we will be sending the `topics` array and the intended `audience` string for the meme from our front-end form, and in the end we will return the newly created `Meme` entity, that\u2019s what we should define our types as. \\n\\nRemember, the `Meme` entity is the database model we defined in our `main.wasp` config file.\\n\\nKnowing that, we can change the content of `actions.ts` to this:\\n\\n```tsx\\nimport type { CreateMeme } from \'@wasp/actions/types\'\\nimport type { Meme } from \'@wasp/entities\';\\n\\ntype CreateMemeArgs = { topics: string[]; audience: string };\\n\\nexport const createMeme: CreateMeme<CreateMemeArgs, Meme> = async ({ topics, audience }, context) => {\\n  // Implementation goes here\\n}\\n```\\n\\nBefore we implement the rest of the logic, let\u2019s run through how our `createMeme` function should work and how our `Meme` will get generated:\\n\\n1. fetch the imgflip meme template we want to use\\n2. send its name, the topics, and intended audience to OpenAI\u2019s chat completions API\\n3. tell OpenAI we want the result back as arguments we can pass to our next function in JSON format, i.e. OpenAI\u2019s [function calling](https://platform.openai.com/docs/guides/gpt/function-calling)\\n4. pass those arguments to the imgflip **/caption-image** endpoint and get our created meme\u2019s url\\n5. save the meme url and other info into our DB as a `Meme` entity\\n\\nWith all that in mind, go ahead and entirely replace the content in our `actions.ts` with the completed `createMeme` action:\\n\\n```tsx\\nimport HttpError from \'@wasp/core/HttpError.js\';\\nimport OpenAI from \'openai\';\\nimport { fetchMemeTemplates, generateMemeImage } from \'./utils.js\';\\n\\nimport type { CreateMeme } from \'@wasp/actions/types\';\\nimport type { Meme, Template } from \'@wasp/entities\';\\n\\ntype CreateMemeArgs = { topics: string[]; audience: string };\\n\\nconst openai = new OpenAI({\\n  apiKey: process.env.OPENAI_API_KEY,\\n});\\n\\nexport const createMeme: CreateMeme<CreateMemeArgs, Meme> = async ({ topics, audience }, context) => {\\n  if (!context.user) {\\n    throw new HttpError(401, \'You must be logged in\');\\n  }\\n\\n  if (context.user.credits === 0 && !context.user.isAdmin) {\\n    throw new HttpError(403, \'You have no credits left\');\\n  }\\n\\n  const topicsStr = topics.join(\', \');\\n\\n  let templates: Template[] = await context.entities.Template.findMany({});\\n\\n\\tif (templates.length === 0) {\\n    const memeTemplates = await fetchMemeTemplates();\\n    templates = await Promise.all(\\n      memeTemplates.map(async (template: any) => {\\n        const addedTemplate = await context.entities.Template.upsert({\\n          where: { id: template.id },\\n          create: {\\n            id: template.id,\\n            name: template.name,\\n            url: template.url,\\n            width: template.width,\\n            height: template.height,\\n            boxCount: template.box_count\\n          },\\n          update: {}\\n        });\\n\\n        return addedTemplate;\\n      })\\n    );\\n  }\\n\\n  // filter out templates with box_count > 2\\n  templates = templates.filter((template) => template.boxCount <= 2);\\n  const randomTemplate = templates[Math.floor(Math.random() * templates.length)];\\n\\n  console.log(\'random template: \', randomTemplate);\\n\\n  const sysPrompt = `You are a meme idea generator. You will use the imgflip api to generate a meme based on an idea you suggest. Given a random template name and topics, generate a meme idea for the intended audience. Only use the template provided`;\\n  const userPrompt = `Topics: ${topicsStr} \\\\n Intended Audience: ${audience} \\\\n Template: ${randomTemplate.name} \\\\n`;\\n\\n  let openAIResponse: OpenAI.Chat.Completions.ChatCompletion;\\n  try {\\n    openAIResponse = await openai.chat.completions.create({\\n      messages: [\\n        { role: \'system\', content: sysPrompt },\\n        { role: \'user\', content: userPrompt },\\n      ],\\n      functions: [\\n        {\\n          name: \'generateMemeImage\',\\n          description: \'Generate meme via the imgflip API based on the given idea\',\\n          parameters: {\\n            type: \'object\',\\n            properties: {\\n              text0: { type: \'string\', description: \'The text for the top caption of the meme\' },\\n              text1: { type: \'string\', description: \'The text for the bottom caption of the meme\' },\\n            },\\n            required: [\'templateName\', \'text0\', \'text1\'],\\n          },\\n        },\\n      ],\\n      function_call: {\\n        name: \'generateMemeImage\',\\n      },\\n      model: \'gpt-4-0613\',\\n    });\\n  } catch (error: any) {\\n    console.error(\'Error calling openAI: \', error);\\n    throw new HttpError(500, \'Error calling openAI\');\\n  }\\n\\n  console.log(openAIResponse.choices[0]);\\n\\n  /**\\n   * the Function call returned by openAI looks like this:\\n   */\\n  // {\\n  //   index: 0,\\n  //   message: {\\n  //     role: \'assistant\',\\n  //     content: null,\\n  //     function_call: {\\n  //       name: \'generateMeme\',\\n  //       arguments: \'{\\\\n\' +\\n  //         `  \\"text0\\": \\"CSS you\'ve been writing all day\\",\\\\n` +\\n  //         \'  \\"text1\\": \\"This looks horrible\\"\\\\n\' +\\n  //         \'}\'\\n  //     }\\n  //   },\\n  //   finish_reason: \'stop\'\\n  // }\\n  if (!openAIResponse.choices[0].message.function_call) throw new HttpError(500, \'No function call in openAI response\');\\n\\n  const gptArgs = JSON.parse(openAIResponse.choices[0].message.function_call.arguments);\\n  console.log(\'gptArgs: \', gptArgs);\\n\\n  const memeIdeaText0 = gptArgs.text0;\\n  const memeIdeaText1 = gptArgs.text1;\\n\\n  console.log(\'meme Idea args: \', memeIdeaText0, memeIdeaText1);\\n\\n  const memeUrl = await generateMemeImage({\\n    templateId: randomTemplate.id,\\n    text0: memeIdeaText0,\\n    text1: memeIdeaText1,\\n  });\\n\\n  const newMeme = await context.entities.Meme.create({\\n    data: {\\n      text0: memeIdeaText0,\\n      text1: memeIdeaText1,\\n      topics: topicsStr,\\n      audience: audience,\\n      url: memeUrl,\\n      template: { connect: { id: randomTemplate.id } },\\n      user: { connect: { id: context.user.id } },\\n    },\\n  });\\n\\n  return newMeme;\\n};\\n```\\n\\nAt this point, the code above should be pretty self-explanatory, but I want to highlight a couple points:\\n\\n1. the `context` object is passed through to all Actions and Queries by Wasp. It contains the [Prisma](https://prisma.io) client with access to the DB entities you defined in your  `main.wasp` config file.\\n2. We first look for the imgflip meme templates in our DB. If none are found, we fetch them using our `fetchTemplates` utility function we defined earlier. Then we `upsert` them into our DB.\\n3. There are some meme templates that take more than 2 text boxes, but for this tutorial we\u2019re only using meme templates with 2 text inputs to make it easier.\\n4. We choose a random template from this list to use as a basis for our meme (it\u2019s actually a great way to serendipitously generate some interesting meme content).\\n5. We give the OpenAI API info about the functions it can create arguments for via the `functions` and `function_call` properties, which tell it to always return JSON arguments for our function, `generateMemeImage`\\n\\nGreat! But once we start generating memes, we will need a way to display them on our front end.\\n\\nSo let\u2019s now create a Wasp Query. A Query works just like an Action, except it\u2019s only for *reading* data.\\n\\nGo to `src/server` and create a new file called `queries.ts`.\\n\\nNext, in your `main.wasp` file add the following code:\\n\\n```tsx\\n//...\\n\\nquery getAllMemes {\\n  fn: import { getAllMemes } from \\"@server/queries.js\\",\\n  entities: [Meme]\\n}\\n```\\n\\nThen in your `queries.ts` file, add the `getAllMemes` function:\\n\\n```tsx\\nimport HttpError from \'@wasp/core/HttpError.js\';\\n\\nimport type { Meme } from \'@wasp/entities\';\\nimport type { GetAllMemes } from \'@wasp/queries/types\';\\n\\nexport const getAllMemes: GetAllMemes<void, Meme[]> = async (_args, context) => {\\n  const memeIdeas = await context.entities.Meme.findMany({\\n    orderBy: { createdAt: \'desc\' },\\n    include: { template: true },\\n  });\\n\\n  return memeIdeas;\\n};\\n```\\n\\n<a name=\'generate-client\' href=\'#generate-client\'></a>\\n\\n### Client-Side Code\\n\\nNow that we\u2019ve got the `createMeme` and `getAllMemes` code implemented server-side, let\u2019s hook it up to our client. \\n\\nWasp makes it really easy to import the Operations we just created and call them on our front end.\\n\\nYou can do so by going to `src/client/pages/Home.tsx` and adding the following code to the top of the file:\\n\\n```tsx\\n//...other imports...\\nimport { useQuery } from \'@wasp/queries\';\\nimport createMeme from \'@wasp/actions/createMeme\';\\nimport getAllMemes from \'@wasp/queries/getAllMemes\';\\nimport useAuth from \'@wasp/auth/useAuth\';\\n\\nexport function HomePage() {\\n  const [topics, setTopics] = useState([\'\']);\\n  const [audience, setAudience] = useState(\'\');\\n  const [isMemeGenerating, setIsMemeGenerating] = useState(false);\\n\\n  // \ud83d\ude0e \ud83d\ude0e \ud83d\ude0e\\n  const { data: user } = useAuth();\\n  const { data: memes, isLoading, error } = useQuery(getAllMemes); \\n\\n  const handleGenerateMeme: FormEventHandler<HTMLFormElement> = async (e) => {\\n    e.preventDefault();\\n    if (!user) {\\n      history.push(\'/login\');\\n      return;\\n    }\\n    if (topics.join(\'\').trim().length === 0 || audience.length === 0) {\\n      alert(\'Please provide topic and audience\');\\n      return;\\n    }\\n    try {\\n      setIsMemeGenerating(true);\\n      await createMeme({ topics, audience }); // <--- \ud83d\ude0e \ud83d\ude0e \ud83d\ude0e\\n    } catch (error: any) {\\n      alert(\'Error generating meme: \' + error.message);\\n    } finally {\\n      setIsMemeGenerating(false);\\n    }\\n  };\\n\\n//...\\n```\\n\\nAs you can see, we\u2019ve imported `createMeme` and `getAllMemes` (\ud83d\ude0e). \\n\\nFor `getAllMemes`, we wrap it in the `useQuery` hook so that we can fetch and cache the data. On the other hand, our `createMeme` Action gets called in `handleGenerateMeme` which we will call when submit our form.\\n\\nRather than adding code to the `Home.tsx` file piece-by-piece, here is the file with all the code to generate and display the memes. Go ahead and replace all of `Home.tsx` with this code and I\u2019ll explain it in more detail below:\\n\\n```tsx\\nimport { useState, FormEventHandler } from \'react\';\\nimport { useQuery } from \'@wasp/queries\';\\nimport createMeme from \'@wasp/actions/createMeme\';\\nimport getAllMemes from \'@wasp/queries/getAllMemes\';\\nimport useAuth from \'@wasp/auth/useAuth\';\\nimport { useHistory } from \'react-router-dom\';\\nimport {\\n  AiOutlinePlusCircle,\\n  AiOutlineMinusCircle,\\n  AiOutlineRobot,\\n} from \'react-icons/ai\';\\n\\nexport function HomePage() {\\n  const [topics, setTopics] = useState([\'\']);\\n  const [audience, setAudience] = useState(\'\');\\n  const [isMemeGenerating, setIsMemeGenerating] = useState(false);\\n\\n  const history = useHistory();\\n  const { data: user } = useAuth();\\n  const { data: memes, isLoading, error } = useQuery(getAllMemes);\\n\\n  const handleGenerateMeme: FormEventHandler<HTMLFormElement> = async (e) => {\\n    e.preventDefault();\\n    if (!user) {\\n      history.push(\'/login\');\\n      return;\\n    }\\n    if (topics.join(\'\').trim().length === 0 || audience.length === 0) {\\n      alert(\'Please provide topic and audience\');\\n      return;\\n    }\\n    try {\\n      setIsMemeGenerating(true);\\n      await createMeme({ topics, audience });\\n    } catch (error: any) {\\n      alert(\'Error generating meme: \' + error.message);\\n    } finally {\\n      setIsMemeGenerating(false);\\n    }\\n  };\\n\\n  const handleDeleteMeme = async (id: string) => {\\n    //...\\n  };\\n\\n  if (isLoading) return \'Loading...\';\\n  if (error) return \'Error: \' + error;\\n\\n  return (\\n    <div className=\'p-4\'>\\n      <h1 className=\'text-3xl font-bold mb-4\'>Welcome to Memerator!</h1>\\n      <p className=\'mb-4\'>Start generating meme ideas by providing topics and intended audience.</p>\\n      <form onSubmit={handleGenerateMeme}>\\n        <div className=\'mb-4 max-w-[500px]\'>\\n          <label htmlFor=\'topics\' className=\'block font-bold mb-2\'>\\n            Topics:\\n          </label>\\n          {topics.map((topic, index) => (\\n            <input\\n              key={index}\\n              type=\'text\'\\n              id=\'topics\'\\n              value={topic}\\n              onChange={(e) => {\\n                const updatedTopics = [...topics];\\n                updatedTopics[index] = e.target.value;\\n                setTopics(updatedTopics);\\n              }}\\n              className=\'p-1 mr-1 mb-1 border rounded text-lg focus:outline-none focus:ring-2 focus:ring-primary-600 focus:border-transparent\'\\n            />\\n          ))}\\n          <div className=\'flex items-center my-2 gap-1\'>\\n            <button\\n              type=\'button\'\\n              onClick={() => topics.length < 3 && setTopics([...topics, \'\'])}\\n              className=\'flex items-center gap-1 bg-primary-200 hover:bg-primary-300 border-2 text-black text-xs py-1 px-2 rounded\'\\n            >\\n              <AiOutlinePlusCircle /> Add Topic\\n            </button>\\n            {topics.length > 1 && (\\n              <button\\n                onClick={() => setTopics(topics.slice(0, -1))}\\n                className=\'flex items-center gap-1 bg-red-500 hover:bg-red-700 border-2 text-white text-xs py-1 px-2 rounded\'\\n              >\\n                <AiOutlineMinusCircle /> Remove Topic\\n              </button>\\n            )}\\n          </div>\\n        </div>\\n        <div className=\'mb-4\'>\\n          <label htmlFor=\'audience\' className=\'block font-bold mb-2\'>\\n            Intended Audience:\\n          </label>\\n          <input\\n            type=\'text\'\\n            id=\'audience\'\\n            value={audience}\\n            onChange={(e) => setAudience(e.target.value)}\\n            className=\'p-1 border rounded text-lg focus:outline-none focus:ring-2 focus:ring-primary-600 focus:border-transparent\'\\n          />\\n        </div>\\n        <button\\n          type=\'submit\'\\n          className={`flex items-center gap-1 bg-primary-200 hover:bg-primary-300 border-2 text-black text-sm font-bold py-1 px-2 rounded ${\\n            isMemeGenerating ? \'opacity-50 cursor-not-allowed\' : \'cursor-pointer\'\\n          } $}`}\\n        >\\n          <AiOutlineRobot />\\n          {!isMemeGenerating ? \'Generate Meme\' : \'Generating...\'}\\n        </button>\\n      </form>\\n\\n      {!!memes && memes.length > 0 ? (\\n        memes.map((memeIdea) => (\\n          <div key={memeIdea.id} className=\'mt-4 p-4 bg-gray-100 rounded-lg\'>\\n            <img src={memeIdea.url} width=\'500px\' />\\n            <div className=\'flex flex-col items-start mt-2\'>\\n              <div>\\n                <span className=\'text-sm text-gray-700\'>Topics: </span>\\n                <span className=\'text-sm italic text-gray-500\'>{memeIdea.topics}</span>\\n              </div>\\n              <div>\\n                <span className=\'text-sm text-gray-700\'>Audience: </span>\\n                <span className=\'text-sm italic text-gray-500\'>{memeIdea.audience}</span>\\n              </div>\\n            </div>\\n            {/* TODO: implement edit and delete meme features */}\\n          </div>\\n        ))\\n      ) : (\\n        <div className=\'flex justify-center mt-5\'> :( no memes found</div>\\n      )}\\n    </div>\\n  );\\n}\\n```\\n\\nThere are two things I want to point out about this code:\\n\\n1. The `useQuery` hook calls our `getAllMemes` Query when the component mounts. It also caches the result for us, as well as automatically re-fetching whenever we add a new Meme to our DB via `createMeme`. This means our page will reload automatically whenever a new meme is generated.\\n2. The `useAuth` hook allows us to fetch info about our logged in user. If the user isn\u2019t logged in, we force them to do so before they can generate a meme.\\n\\nThese are really cool Wasp features that make your life as a developer a lot easier \ud83d\ude42\\n\\nSo go ahead now and try and generate a meme. Here\u2019s the one I just generated:\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2ypm9n0uyra47mp5g85.png)\\n\\nHaha. Pretty good!\\n\\nNow wouldn\u2019t it be cool though if we could edit and delete our memes? And what if we could expand the set of meme templates for our generator to use? Wouldn\u2019t that be cool, too?\\n\\nYes, it would be. So let\u2019s do that.\\n\\n<a name=\\"part-two\\" href=\\"#part-two\\"></a>\\n\\n# Part 2.\\n\\nSo we\u2019ve got ourselves a really good basis for an app at this point.\\n\\nWe\u2019re using [OpenAI\u2019s function calling feature](https://platform.openai.com/docs/guides/gpt/function-calling) to explain a function to GPT, and get it to return results for us in a format we can use to call that function.\\n\\nThis allows us to be certain GPT\u2019s result will be usable in further parts of our application and opens up the door to creating AI agents.\\n\\nIf you think about it, we\u2019ve basically got ourselves a really simple Meme generating \u201cagent\u201d. How cool is that?!\\n\\n<a name=\\"templates\\" href=\\"#templates\\"></a>\\n\\n## Fetching & Updating Templates with Cron Jobs\\n\\nTo be able to generate our meme images via [ImgFlip\u2019s API](https://imgflip.com/api), we have to choose and send a meme template `id` to the API, along with the text arguments we want to fill it in with.\\n\\nFor example, the `Grandma Finds Internet` meme template has the following `id`:\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zoo4uainls9jxq7fzysv.png)\\n\\nBut the only way for us to get available meme templates from ImgFlip is to send a `GET` request to\\n[https://api.imgflip.com/get_memes](https://api.imgflip.com/get_memes). And according to ImgFlip, the **/get-memes** endpoint works like this:\\n\\n> Gets an array of popular memes that may be captioned with this API. The size of this array and the order of memes may change at any time. When this description was written, it returned 100 memes ordered by how many times they were captioned in the last 30 days\\n> \\n\\nSo it returns a list of the top 100 memes from the last 30 days. And as this is always changing, we can run a daily cron job to fetch the list and update our database with any new templates that don\u2019t already exist in it.\\n\\nWe know this will work because the ImgFlip docs for the **/caption-image** endpoint \u2014 which we use to create a meme image \u2014 says this:\\n\\n> *key:* template_id\\n*value:* A template ID as returned by the **get_memes** response. Any ID that was ever returned from the **get_memes** response should work for this parameter\u2026\\n> \\n\\nAwesome!\\n\\n<a name=\\"cron\\" href=\\"#cron\\"></a>\\n\\n### Defining our Daily Cron Job\\n\\nNow, to create an automatically [recurring cron job in Wasp](https://wasp-lang.dev/docs/advanced/jobs) is really easy. \\n\\nFirst, go to your `main.wasp` file and add:\\n\\n```tsx\\njob storeMemeTemplates {\\n  executor: PgBoss,\\n  perform: {\\n    fn: import { fetchAndStoreMemeTemplates } from \\"@server/workers.js\\",\\n  },\\n  schedule: {\\n    // daily at 7 a.m.\\n    cron: \\"0 7 * * *\\" \\n  },\\n  entities: [Template],\\n}\\n```\\n\\nThis is telling Wasp to run the `fetchAndStoreMemeTemplates` function every day at 7 a.m.\\n\\nNext, create a new file in `src/server` called `workers.ts` and add the function:\\n\\n```tsx\\nimport axios from \'axios\';\\n\\nexport const fetchAndStoreMemeTemplates = async (_args: any, context: any) => {\\n  console.log(\'.... ><><>< get meme templates cron starting ><><>< ....\');\\n\\n  try {\\n    const response = await axios.get(\'https://api.imgflip.com/get_memes\');\\n\\n    const promises = response.data.data.memes.map((meme: any) => {\\n      return context.entities.Template.upsert({\\n        where: { id: meme.id },\\n        create: {\\n          id: meme.id,\\n          name: meme.name,\\n          url: meme.url,\\n          width: meme.width,\\n          height: meme.height,\\n          boxCount: meme.box_count,\\n        },\\n        update: {},\\n      });\\n    });\\n\\n    await Promise.all(promises);\\n  } catch (error) {\\n    console.error(\'error fetching meme templates: \', error);\\n  }\\n};\\n```\\n\\nYou can see that we send a `GET` request to the proper endpoint, then we loop through the array of memes it returns to us add any new templates to the database.\\n\\nNotice that we use Prisma\u2019s `upsert` method here. This allows us to create a new entity in the database if it doesn\u2019t already exist. If it does, we don\u2019t do anything, which is why `update` is left blank.\\n\\nWe use `[Promise.all()` to call that array of promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) correctly.\\n\\n<a name=\\"cron-test\\" href=\\"#cron-test\\"></a>\\n\\n### Testing\\n\\nNow, assuming you\u2019ve got your app running with `wasp start`, you will see the cron job run in the console every day at 7 a.m.\\n\\nIf you want to test that the cron job is working correctly, you could run it on a faster schedule. Let\u2019s try that now by changing it in our `main.wasp` file to run every minute:\\n\\n```tsx\\n//...\\n  schedule: {\\n    // runs every minute.\\n    cron: \\"* * * * *\\" \\n  },\\n```\\n\\nFirst, your terminal where you ran `wasp start` to start your app should output the following:\\n\\n```bash\\n[Server]  \ud83d\udd0d Validating environment variables...\\n[Server]  \ud83d\ude80 \\"Username and password\\" auth initialized\\n[Server]  Starting pg-boss...\\n[Server]  pg-boss started!\\n[Server]  Server listening on port 3001\\n```\\n\\n\u2026followed shortly after by:\\n\\n```bash\\n[Server]  .... ><><>< get meme templates cron starting ><><>< ....\\n```\\n\\nGreat. We\u2019ve got an automatically recurring cron job going.\\n\\nYou can check your database for saved templates by opening another terminal window and running:\\n\\n```bash\\nwasp db studio \\n```\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yldqge5186hegvzjyo30.png)\\n\\n<a name=\\"edit\\" href=\\"#edit\\"></a>\\n\\n## Editing Memes\\n\\nUnfortunately, sometimes GPT\u2019s results have some mistakes. Or sometimes the idea is really good, but we want to further modify it to make it even better.\\n\\nWell, that\u2019s pretty simple for us to do since we can just make another call to [ImgFlip\u2019s API](https://imgflip.com/api).\\n\\nSo let\u2019s set do that by setting up a dedicated page where we:\\n\\n- fetch that specific meme based on its `id`\\n- display a form to allow the user to edit the meme `text`\\n- send that info to a server-side Action which calls the ImgFlip API, generates a new image URL, and updates our `Meme` entity in the DB.\\n\\n<a name=\\"server\\" href=\\"#server\\"></a>\\n\\n### Server-Side Code\\n\\nTo make sure we can fetch the individual meme we want to edit, we first need to set up a Query that does this.\\n\\nGo to your `main.wasp` file and add this Query declaration:\\n\\n```tsx\\nquery getMeme {\\n  fn: import { getMeme } from \\"@server/queries.js\\",\\n  entities: [Meme]\\n}\\n```\\n\\n\\nNow go to `src/server/queries.ts` and add the following function:\\n\\n```tsx\\nimport type { Meme, Template } from \'@wasp/entities\';\\nimport type { GetAllMemes, GetMeme } from \'@wasp/queries/types\';\\n\\ntype GetMemeArgs = { id: string };\\ntype GetMemeResult = Meme & { template: Template };\\n\\n//...\\n\\nexport const getMeme: GetMeme<GetMemeArgs, GetMemeResult> = async ({ id }, context) => {\\n  if (!context.user) {\\n    throw new HttpError(401);\\n  }\\n\\n  const meme = await context.entities.Meme.findUniqueOrThrow({\\n    where: { id: id },\\n    include: { template: true },\\n  });\\n\\n  return meme;\\n};\\n```\\n\\nWe\u2019re just fetching the single meme based on its `id` from the database.\\n\\nWe\u2019re also including the related meme `Template` so that we have access to its `id` as well, because we need to send this to the ImgFlip API too.\\n\\nPretty simple!\\n\\nNow let\u2019s create our `editMeme` action by going to our `main.wasp` file and adding the following Action:\\n\\n```tsx\\n//...\\n\\naction editMeme {\\n  fn: import { editMeme } from \\"@server/actions.js\\",\\n  entities: [Meme, Template, User]\\n}\\n```\\n\\nNext, move over to the `server/actions.ts` file and let\u2019s add the following server-side function:\\n\\n```tsx\\n//... other imports\\nimport type { EditMeme } from \'@wasp/actions/types\';\\n\\n//... other types\\ntype EditMemeArgs = Pick<Meme, \'id\' | \'text0\' | \'text1\'>;\\n\\nexport const editMeme: EditMeme<EditMemeArgs, Meme> = async ({ id, text0, text1 }, context) => {\\n  if (!context.user) {\\n    throw new HttpError(401, \'You must be logged in\');\\n  }\\n\\n  const meme = await context.entities.Meme.findUniqueOrThrow({\\n    where: { id: id },\\n    include: { template: true },\\n  });\\n\\n  if (!context.user.isAdmin && meme.userId !== context.user.id) {\\n    throw new HttpError(403, \'You are not the creator of this meme\');\\n  }\\n\\n  const memeUrl = await generateMemeImage({\\n    templateId: meme.template.id,\\n    text0: text0,\\n    text1: text1,\\n  });\\n\\n  const newMeme = await context.entities.Meme.update({\\n    where: { id: id },\\n    data: {\\n      text0: text0,\\n      text1: text1,\\n      url: memeUrl,\\n    },\\n  });\\n\\n  return newMeme;\\n};\\n```\\n\\nAs you can see, this function expects the `id` of the already existing meme, along with the new `text` boxes. That\u2019s because we\u2019re letting the user manually input/edit the text that GPT generated, rather than making another request the the OpenAI API.\\n\\nNext, we look for that specific meme in our database, and if we don\u2019t find it we throw an error (`findUniqueOrThrow`).\\n\\nWe check to make sure that that meme belongs to the user that is currently making the request, because we don\u2019t want a different user to edit a meme that doesn\u2019t belong to them.\\n\\nThen we send the template `id` of that meme along with the new text to our previously created `generateMemeImage` function. This function calls the ImgFlip API and returns the url of the newly created meme image.\\n\\nWe then `update` the database to save the new URL to our Meme.\\n\\nAwesome!\\n\\n<a name=\\"client\\" href=\\"#client\\"></a>\\n\\n### Client-Side Code\\n\\nLet\u2019s start by adding a new route and page to our `main.wasp` file:\\n\\n```tsx\\n//...\\n\\nroute EditMemeRoute { path: \\"/meme/:id\\", to: EditMemePage }\\npage EditMemePage {\\n  component: import { EditMemePage } from \\"@client/pages/EditMemePage\\",\\n  authRequired: true\\n}\\n```\\n\\nThere are two important things to notice:\\n\\n1. the path includes the `:id` parameter, which means we can access page for any meme in our database by going to, e.g. `memerator.com/meme/5`\\n2. by using the `authRequired` option, we tell Wasp to automatically block this page from unauthorized users. Nice!\\n\\nNow, create this page by adding a new file called `EditMemePage.tsx` to `src/client/pages`. Add the following code:\\n\\n```tsx\\nimport { useState, useEffect, FormEventHandler } from \'react\';\\nimport { useQuery } from \'@wasp/queries\';\\nimport editMeme from \'@wasp/actions/editMeme\';\\nimport getMeme from \'@wasp/queries/getMeme\';\\nimport { useParams } from \'react-router-dom\';\\nimport { AiOutlineEdit } from \'react-icons/ai\';\\n\\nexport function EditMemePage() {\\n  // http://localhost:3000/meme/573f283c-24e2-4c45-b6b9-543d0b7cc0c7\\n  const { id } = useParams<{ id: string }>();\\n\\n  const [text0, setText0] = useState(\'\');\\n  const [text1, setText1] = useState(\'\');\\n  const [isLoading, setIsLoading] = useState(false);\\n\\n  const { data: meme, isLoading: isMemeLoading, error: memeError } = useQuery(getMeme, { id: id });\\n\\n  useEffect(() => {\\n    if (meme) {\\n      setText0(meme.text0);\\n      setText1(meme.text1);\\n    }\\n  }, [meme]);\\n\\n  const handleSubmit: FormEventHandler<HTMLFormElement> = async (e) => {\\n    e.preventDefault();\\n    try {\\n      setIsLoading(true);\\n      await editMeme({ id, text0, text1 });\\n    } catch (error: any) {\\n      alert(\'Error generating meme: \' + error.message);\\n    } finally {\\n      setIsLoading(false);\\n    }\\n  };\\n\\n  if (isMemeLoading) return \'Loading...\';\\n  if (memeError) return \'Error: \' + memeError.message;\\n\\n  return (\\n    <div className=\'p-4\'>\\n      <h1 className=\'text-3xl font-bold mb-4\'>Edit Meme</h1>\\n      <form onSubmit={handleSubmit}>\\n        <div className=\'flex gap-2 items-end\'>\\n          <div className=\'mb-2\'>\\n            <label htmlFor=\'text0\' className=\'block font-bold mb-2\'>\\n              Text 0:\\n            </label>\\n            <textarea\\n              id=\'text0\'\\n              value={text0}\\n              onChange={(e) => setText0(e.target.value)}\\n              className=\'border rounded px-2 py-1\'\\n            />\\n          </div>\\n          <div className=\'mb-2\'>\\n            <label htmlFor=\'text1\' className=\'block font-bold mb-2\'>\\n              Text 1:\\n            </label>\\n\\n            <div className=\'flex items-center mb-2\'>\\n              <textarea\\n                id=\'text1\'\\n                value={text1}\\n                onChange={(e) => setText1(e.target.value)}\\n                className=\'border rounded px-2 py-1\'\\n              />\\n            </div>\\n          </div>\\n        </div>\\n\\n        <button\\n          type=\'submit\'\\n          className={`flex items-center gap-1 bg-primary-200 hover:bg-primary-300 border-2 text-black text-sm py-1 px-2 rounded ${\\n            isLoading ? \'opacity-50 cursor-not-allowed\' : \'cursor-pointer\'\\n          } $}`}\\n        >\\n          <AiOutlineEdit />\\n          {!isLoading ? \'Save Meme\' : \'Saving...\'}\\n        </button>\\n      </form>\\n      {!!meme && (\\n        <div className=\'mt-4  mb-2 bg-gray-100 rounded-lg p-4\'>\\n          <img src={meme.url} width=\'500px\' />\\n          <div className=\'flex flex-col items-start mt-2\'>\\n            <div>\\n              <span className=\'text-sm text-gray-700\'>Topics: </span>\\n              <span className=\'text-sm italic text-gray-500\'>{meme.topics}</span>\\n            </div>\\n            <div>\\n              <span className=\'text-sm text-gray-700\'>Audience: </span>\\n              <span className=\'text-sm italic text-gray-500\'>{meme.audience}</span>\\n            </div>\\n            <div>\\n              <span className=\'text-sm text-gray-700\'>ImgFlip Template: </span>\\n              <span className=\'text-sm italic text-gray-500\'>{meme.template.name}</span>\\n            </div>\\n          </div>\\n        </div>\\n      )}\\n    </div>\\n  );\\n}\\n```\\n\\nSome things to notice here are:\\n\\n1. because we\u2019re using dynamic routes (`/meme/:id`), we pull the URL paramater `id` from the url with `useParams` hook.\\n2. we then pass that `id` within the `getMemes` Query to fetch that specific meme to edit: `useQuery(getMeme, { id: id })`\\n    1. remember, our server-side action depends on this `id` in order to fetch the meme from our database\\n\\nThe rest of the page is just our form for calling the `editMeme` Action, as well as displaying the meme we want to edit.\\n\\nThat\u2019s great!\\n\\nNow that we have that `EditMemePage`, we need a way to navigate to it from the home page.\\n\\nTo do that, go back to the `Home.tsx` file, add the following imports at the top, and find the comment that says `{/* TODO: implement edit and delete meme features */}` and replace it with the following code: \\n\\n```tsx\\nimport { Link } from \'@wasp/router\';\\nimport { AiOutlineEdit } from \'react-icons/ai\';\\n\\n//...\\n\\n{user && (user.isAdmin || user.id === memeIdea.userId) && (\\n  <div className=\'flex items-center mt-2\'>\\n    <Link key={memeIdea.id} params={{ id: memeIdea.id }} to={`/meme/:id`}>\\n      <button className=\'flex items-center gap-1 bg-primary-200 hover:bg-primary-300 border-2 text-black text-xs py-1 px-2 rounded\'>\\n        <AiOutlineEdit />\\n        Edit Meme\\n      </button>\\n    </Link>\\n    {/* TODO: add delete meme functionality */}\\n  </div>\\n)}\\n```\\n\\nWhat\u2019s really cool about this, is that Wasp\u2019s `Link` component will give you [type-safe routes](https://wasp-lang.dev/docs/advanced/links), by making sure you\u2019re following the pattern you defined in your `main.wasp` file.\\n\\nAnd with that, so long as the authenticated user was the creator of the meme (or is an admin), the `Edit Meme` button will show up and direct the user to the `EditMemePage`\\n\\nGive it a try now. It should look like this:\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/ymSr2eRXz9c?si=BI9s2WEHnRiPtC3G\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\n<a name=\\"delete\\" href=\\"#delete\\"></a>\\n\\n## Deleting Memes\\n\\nOk. When I initially started writing this tutorial, I thought I\u2019d also explain how to add `delete` meme functionality to the app as well.\\n\\nBut seeing as we\u2019ve gotten this far, and as the entire two-part tutorial is pretty long, I figured you should be able to implement yourself by this point.\\n\\nSo I\u2019ll leave you guide as to how to implement it yourself. Think of it as a bit of homework:\\n\\n1. define the `deleteMeme` Action in your `main.wasp` file\\n2. export the async function from the `actions.ts` file\\n3. import the Action in your client-side code\\n4. create a button which takes the meme\u2019s `id` as an argument in your `deleteMeme` Action.\\n\\nIf you get stuck, you can use the `editMeme` section as a guide. Or you can check out the [finished app\u2019s GitHub repo](https://github.com/vincanger/memerator/) for the completed code!\\n\\n<a name=\\"conclusion\\" href=\\"#conclusion\\"></a>\\n\\n# Conclusion\\n\\nThere you have it! Your own instant meme generator \ud83e\udd16\ud83d\ude06\\n\\nBTW, If you found this useful,\xa0**please show us your support by\xa0[giving us a star on GitHub](https://github.com/wasp-lang/wasp)**! It will help us continue to make more stuff just like it. \\n\\n![https://res.cloudinary.com/practicaldev/image/fetch/s--tnDxibZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://res.cloudinary.com/practicaldev/image/fetch/s--OCpry2p9--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bky8z46ii7ayejprrqw3.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--tnDxibZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://res.cloudinary.com/practicaldev/image/fetch/s--OCpry2p9--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bky8z46ii7ayejprrqw3.gif)"},{"id":"/2023/08/23/using-product-requirement-documents-generate-better-web-apps-with-ai","metadata":{"permalink":"/wasp-docs/blog/2023/08/23/using-product-requirement-documents-generate-better-web-apps-with-ai","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-08-23-using-product-requirement-documents-generate-better-web-apps-with-ai.md","source":"@site/blog/2023-08-23-using-product-requirement-documents-generate-better-web-apps-with-ai.md","title":"Using Product Requirement Documents to Generate Better Web Apps with AI","description":"I\u2019m an indiehacker that likes creating lots of fun side-projects, like my SaaS app CoverLetterGPT with ~4,000 users. That\u2019s why I\'ve been on the lookout for AI-assisted coding tools to help me kickstart new full-stack web apps as quickly as possible.","date":"2023-08-23T00:00:00.000Z","formattedDate":"August 23, 2023","tags":[{"label":"ai","permalink":"/wasp-docs/blog/tags/ai"},{"label":"prd","permalink":"/wasp-docs/blog/tags/prd"},{"label":"product requirement","permalink":"/wasp-docs/blog/tags/product-requirement"},{"label":"react","permalink":"/wasp-docs/blog/tags/react"},{"label":"full-stack","permalink":"/wasp-docs/blog/tags/full-stack"},{"label":"generate","permalink":"/wasp-docs/blog/tags/generate"},{"label":"hack","permalink":"/wasp-docs/blog/tags/hack"}],"readingTime":8.07,"hasTruncateMarker":false,"authors":[{"name":"Vinny","title":"DevRel @ Wasp","url":"https://vincanger.github.io","email":"vince@wasp-lang.dev","imageURL":"https://vincanger.github.io/assets/vince_smiley.jpg","key":"vinny"}],"frontMatter":{"title":"Using Product Requirement Documents to Generate Better Web Apps with AI","authors":["vinny"],"image":"/img/prd/outsmarting-ai-1600.gif","tags":["ai","prd","product requirement","react","full-stack","generate","hack"]},"prevItem":{"title":"Build your own AI Meme Generator & learn how to use OpenAI\'s function calls","permalink":"/wasp-docs/blog/2023/09/17/ai-meme-generator-how-to-use-openai-function-call"},"nextItem":{"title":"Build a real-time voting app with WebSockets, React & TypeScript \ud83d\udd0c\u26a1\ufe0f","permalink":"/wasp-docs/blog/2023/08/09/build-real-time-voting-app-websockets-react-typescript"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n\\nI\u2019m an indiehacker that likes creating lots of fun side-projects, like my SaaS app [CoverLetterGPT](https://CoverLetterGPT.xyz) with ~4,000 users. That\u2019s why I\'ve been on the lookout for AI-assisted coding tools to help me kickstart new full-stack web apps as quickly as possible.\\n\\nI tried out a bunch, but found that most of them produced codebases that were too simple to work with, or getting a good result was just about as time consuming as coding it myself.\\n\\nBut through the process of trying out different tools and methods, I stumbled across a hack that helped me create comprehensive, functional codebases for full-stack apps with Auth, API routes, Tailwind CSS, DB management, and other more complex features.\\n\\n**The trick?** Ask [ChatGPT](https://chat.openai.com) to write you a detailed Product Requirement Doc for the app you\u2019d like to create, and then pass this to Wasp\u2019s [GPT Web App Generator](https://magic-app-generator.wasp-lang.dev/).\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92bf5pjvdpfkdppcer0j.png)\\n\\nThe results are really surprising and give you a far better starter codebase than the other tools I\u2019ve tried (mainly due to the specificity of the generator itself).\\n\\nAnd best of all, its free to use! \ud83e\udd11\\n\\n# Intro\\n\\nI\u2019m a self-taught, full-stack web developer and I have a lot of fun building side projects.\\n\\nFor example, the side project I\u2019m most proud of is an open-source cover letter generator SaaS App, [CoverLetterGPT](https://CoverLetterGPT.xyz), which has close to 4,000 users!\\n\\nI also have a lot of ridiculous side-project ideas, like [this app](https://boozetube.netlify.app/) that can turn your favorite tech influencer\u2019s YouTube videos into a drinking game. \ud83e\udd23\\n\\nThat\u2019s why I\u2019ve been trying out lots of AI-assisted coding tools to generate **fully-functional, full-stack web apps** as quickly as possible.\\n\\nThere are the obvious tools at the moment, like using ChatGPT and Copilot within your IDE, but new ones are popping up all the time, especially those that act as AI assistants or \u201cagents\u201d.\\n\\nI\u2019ve gotten a chance to try out some of them, and I even wrote a long-form comparison piece where I put [two such tools to the test](https://dev.to/wasp/smol-ai-vs-wasp-ai-which-is-the-better-ai-junior-developer-4fcb), so check that out if you\u2019re interested.\\n\\n**But there\u2019s a major problem with these tools**: even though they\u2019re able to generate some good boilerplate code, they often include a lot of errors and don\u2019t make the developer\'s job *that* much easier in the end.\\n\\n# Where the problem lies\\n\\nOn paper, AI-assisted coding tools generally save devs time and effort, especially when it comes to isolated code snippets.\\n\\nOn one hand, we have tools like ChatGPT and Copilot, which aid you with refactoring, fixing errors, or generating a snippet of code. It\'s much like assembling a jigsaw puzzle, where the tools serve you the next piece that fits the immediate gap.\\n\\nBut coding isn\'t just about filling the next available space; it\u2019s about **envisioning the entire picture**, understanding the broader system and how different pieces interrelate.\\n\\n![https://media3.giphy.com/media/SrnCKS6s02XT2tw6kz/giphy.gif?cid=7941fdc6b01lfcj3taubztyp823itz03hhy9qx8p0mslbtij&ep=v1_gifs_search&rid=giphy.gif&ct=g](https://media3.giphy.com/media/SrnCKS6s02XT2tw6kz/giphy.gif?cid=7941fdc6b01lfcj3taubztyp823itz03hhy9qx8p0mslbtij&ep=v1_gifs_search&rid=giphy.gif&ct=g)\\n\\nAI-assisted coding tools that behave more like agents have the potential to understand this broader context needed to generate larger codebases, but it\u2019s easier said than done. Currently, most of the tools out there end up generating code that comes full of errors.\\n\\nWorst of all, some of the code they output can be so messy it actually means *more* work for you.\\n\\n# How to fix it\\n\\nAI assistants, much like novice apprentices, need a comprehensive understanding of what they should work towards. To achieve this, you need to craft a detailed outline along with a comprehensive set of instructions to give the AI as much context as possible.\\n\\nYou essentially want to be taking on the role of a Product Manager/Designer and be giving the AI a **Product Requirement Document (PRD)**, i.e. an authoritative document that clearly outlines the\\n\\n* purpose,\\n    \\n* features,\\n    \\n* functionality,\\n    \\n* and behavior\\n    \\n\\nof the product to be developed.\\n\\nBut supplying the PRD is just half the battle. This is because components of your web app within the frontend and backend need to know about each other.\\n\\nAnd this is where most of these tools fall short, with tools like [Smol-Developer](https://github.com/smol-ai/developer) creating decent client and server code that work great on their own, but unfortunately don\u2019t work together!\\n\\nGiven this, it seems like an AI tool that already knows the ins and outs of the whole system, that understands the interconnectedness of various parts of a web app, is our best bet.\\n\\nIn short, we need a tool that doesn\'t just \'do its task\' but \'understands the project\'.\\n\\n# The Best Tool for the Job: GPT Web App Generator.\\n\\nRemember, I\u2019m focusing on generating comprehensive full-stack codebases here, and for that Wasp\u2019s [GPT Web App Generator](https://magic-app-generator.wasp-lang.dev/) gets the job done surprisingly well.\\n\\nHow does it do this? Well, the full answer lies in how [Wasp](https://wasp-lang.dev/) as a framework is able to help you build full-stack React/NodeJS web apps.\\n\\nIt\u2019s beyond the scope of this article to [explain it in full detail](https://wasp-lang.dev/docs), but the TL;DR is that Wasp has a compiler that helps build your app based on a config file. The config file is like a set of **instructions** that its compiler understands and uses to piece together the different parts of the full-stack app for you.\\n\\n![https://media1.giphy.com/media/heVoZxS2qAGk4Ay5E5/giphy.gif?cid=7941fdc6x2abm5omkgd1d79rz6dt5kzaead3mxu8xt4xuwc2&ep=v1_gifs_search&rid=giphy.gif&ct=g](https://media1.giphy.com/media/heVoZxS2qAGk4Ay5E5/giphy.gif?cid=7941fdc6x2abm5omkgd1d79rz6dt5kzaead3mxu8xt4xuwc2&ep=v1_gifs_search&rid=giphy.gif&ct=g)\\n\\nThis is what makes it easier for the AI to get all the pieces of the app right! Once it writes the fundamental client and server code, along with the main config file, the Wasp compiler takes over and pieces it all together, removing a lot of potential possibilities for errors!\\n\\nIn the end, you get a React/NodeJS codebase with features like:\\n\\n1. full-stack auth\\n    \\n2. server config and API routes\\n    \\n3. tailwind CSS config and styles\\n    \\n4. cron jobs and queues\\n    \\n5. email sending\\n    \\n6. deployment\\n    \\n\\nWhat\u2019s cool too is that this tool doesn\'t require you to be highly explicit, [because the specifics are baked into the tool itself](https://dev.to/wasp/how-we-built-a-gpt-code-agent-that-generates-full-stack-web-apps-in-react-nodejs-explained-simply-4f9). In other words, **it saves you tons of time and energy without compromising on the quality or coherence of the end product.**\\n\\n# The Hack: Getting GPT to write the PRD for you\\n\\nOk, but if you\u2019re like me, you don\u2019t really know how to write a good PRD. Plus, writing a detailed PRD can be pretty time-consuming. But luckily ChatGPT knows how.\\n\\nThanks, ChatGPT \ud83d\ude4f\\n\\nSo to get really great results out of Wasp\u2019s [GPT Web App Generator](https://magic-app-generator.wasp-lang.dev/), I first ask [ChatGPT](https://chat.openai.com) (using GPT-4) to write a detailed product requirement doc for me, like this:\\n\\n```plaintext\\nWrite a Product Requirement Document for the following full-stack app:\\n\\nAn app where users can track their house plants and their watering schedule.\\n```\\n\\nAnd then I\u2019ll slightly modify ChatGPT\u2019s output before I pass it to GPT Web App Generator:\\n\\n```plaintext\\nProduct Requirements Document for a House Plants Tracking Application\\n\\n1. **Product Title**: GreenLush: Your House Plant Care Companion\\n\\n2. **Purpose**: \\n\\nThe GreenLush app is designed to help users manage their house plants and keep track of their watering schedules. This app will serve as a reminder tool, a database for plant types, and a platform for users to know more about house plant care. \\n\\n3. **Features and Functionality**:\\n\\n    3.1. **User Registration & Profile Management**: To allow users to create and manage their account.\\n    \\n    3.2. **Plant Database**: A comprehensive directory of house plants, with visuals and information about each type.\\n    \\n    3.3. **Plant Profile**: Users can create a profile for each house plant they own, fill in its type, and assign a custom nickname and photo.\\n    \\n    3.4. **Watering Schedule**: By selecting or inputting the type of plant, the app will suggest an ideal watering schedule. Users can confirm or customize this schedule and notifications will be sent when it\'s time to water each specific plant. \\n\\n    3.5. **House Plant Care Tips**: A section of the app that provides general care tips and recommendations for house plants.\\n\\n4. **Behavior of the Product**:\\n\\n    4.1. Users will be prompted to sign up when they open the app for the first time. \\n  \\n    4.2. Once registered, users will be able to browse the plant database, create and manage plant profiles, set watering schedules, and read plant care tips. \\n\\n    4.3. Notification alerts will be sent according to the set watering schedule.\\n```\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdyywqox4zq00lmqjdw2.png)\\n\\n[GPT Web App Generator](https://magic-app-generator.wasp-lang.dev/) will start generating a plan for your app, execute that plan file by file, and even do some error-checking and fixing.\\n\\nPretty neat!\\n\\nThen, the generated app code can be reviewed before you download it and run it locally. This is nice because sometimes it\u2019s useful to tweak the prompt and a few settings to see if you get better results.\\n\\nBest of all, the process is free. You don\u2019t even need to use your own API key!\\n\\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3f440u6xj3oadx21dhw.png)\\n\\nThe picture above is the actual generated, working full-stack app I got out-of-the-box from the example prompt above. All I had to do was initialize the database, register/log in, and BOOM, the app was up and running!\\n\\n\ud83e\udd29 BTW, If you want to check out the code that GPT Web App Generator created based on the above PRD, go here: [https://magic-app-generator.wasp-lang.dev/result/1f28b518-0cca-4352-84e4-69a4ac04d0fa](https://magic-app-generator.wasp-lang.dev/result/1f28b518-0cca-4352-84e4-69a4ac04d0fa)\\n\\nThere are more examples of types of apps you can build with this tool, [written about here](https://dev.to/wasp/gpt-web-app-generator-let-ai-create-a-full-stack-react-nodejs-codebase-based-on-your-description-2g39), but it\u2019s probably best to just play around with it yourself and see what you can get!\\n\\n# Conclusion\\n\\nThere are several really cool AI-assisted coding tools out there, but for kickstarting a full-stack React/NodeJS app, I\u2019ve found [GPT Web App Generator](https://magic-app-generator.wasp-lang.dev/) to be the best performing one.\\n\\nIt consistently generates functional, comprehensive full-stack starter codebases that need little to no error-fixing, depending on the complexity of the app.\\n\\nCouple that with the \u201cPRD hack\u201d, and you can save yourself a substantial amount of time by avoiding writing a ton of boilerplate."},{"id":"/2023/08/09/build-real-time-voting-app-websockets-react-typescript","metadata":{"permalink":"/wasp-docs/blog/2023/08/09/build-real-time-voting-app-websockets-react-typescript","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md","source":"@site/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md","title":"Build a real-time voting app with WebSockets, React & TypeScript \ud83d\udd0c\u26a1\ufe0f","description":"TL;DR","date":"2023-08-09T00:00:00.000Z","formattedDate":"August 9, 2023","tags":[{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"websockets","permalink":"/wasp-docs/blog/tags/websockets"},{"label":"react","permalink":"/wasp-docs/blog/tags/react"},{"label":"typescript","permalink":"/wasp-docs/blog/tags/typescript"},{"label":"real-time","permalink":"/wasp-docs/blog/tags/real-time"},{"label":"node","permalink":"/wasp-docs/blog/tags/node"},{"label":"express","permalink":"/wasp-docs/blog/tags/express"}],"readingTime":21.78,"hasTruncateMarker":false,"authors":[{"name":"Vinny","title":"DevRel @ Wasp","url":"https://vincanger.github.io","email":"vince@wasp-lang.dev","imageURL":"https://vincanger.github.io/assets/vince_smiley.jpg","key":"vinny"}],"frontMatter":{"title":"Build a real-time voting app with WebSockets, React & TypeScript \ud83d\udd0c\u26a1\ufe0f","authors":["vinny"],"image":"/img/websockets-app/websockets-banner.png","tags":["wasp","websockets","react","typescript","real-time","node","express"]},"prevItem":{"title":"Using Product Requirement Documents to Generate Better Web Apps with AI","permalink":"/wasp-docs/blog/2023/08/23/using-product-requirement-documents-generate-better-web-apps-with-ai"},"nextItem":{"title":"Smol AI \ud83d\udc23 vs. Wasp AI \ud83d\udc1d - Which is the Better AI Junior Developer?","permalink":"/wasp-docs/blog/2023/08/01/smol-ai-vs-wasp-ai"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n\\n## TL;DR\\n\\nWebSockets allow your app to have \u201creal time\u201d features, where updates are instant because they\u2019re passed on an open, two-way channel. This is a different from CRUD apps, which usually use HTTP requests that must establish a connection, send a request, receive a response, and then close the connection.\\n\\n<ImgWithCaption\\n  source=\\"img/websockets-app/Untitled.png\\"\\n  width=\\"550px\\"\\n/>\\n\\nTo use WebSockets in your React app, you\u2019ll need a dedicated server, such as an ExpressJS app with NodeJS, in order to maintain a persistent connection.\\n\\nUnfortunately, serverless solutions (e.g. NextJS, AWS lambda) don\u2019t natively support WebSockets. Bummer. \ud83d\ude1e \\n\\nWhy not? Well, serverless services turn on and off depending on if a request is coming in. With WebSockets, we need this \u201calways on\u201d connection that only a dedicated server can provide (although you can pay for third-party services as a workaround).\\n\\nLuckily, we\u2019re going to talk about two great ways you can implement them:\\n\\n1. Implementing and configuring it yourself with React, NodeJS, and Socket.IO\\n2. By using [Wasp](https://wasp-lang.dev), a full-stack React-NodeJS framework, to configure and integrate Socket.IO into your app for you.\\n\\nThese methods allow you to build fun stuff, like this instantly updating \u201cvoting with friends\u201d app we built here (check out the [GitHub repo for it](https://github.com/vincanger/websockets-wasp)):\\n\\n\x3c!-- [https://www.youtube.com/watch?v=Twy-2P0Co6M](https://www.youtube.com/watch?v=Twy-2P0Co6M) --\x3e\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/Twy-2P0Co6M\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\n## Why WebSockets?\\n\\nSo, imagine you\'re at a party sending text messages to a friend to tell them what food to bring. \\n\\nNow, wouldn\u2019t it be easier if you called your friend on the phone so you could talk constantly,  instead of sending sporadic messages? That\'s pretty much what WebSockets are in the world of web applications. \\n\\nFor example, traditional HTTP requests (e.g. CRUD/RESTful) are like those text messages \u2014 your app has to **ask the server** every time it wants new information, just like you had to send a text message to your friend every time you thought of food for your party. \\n\\nBut with WebSockets, once a connection is established, it **remains open** for constant, two-way communication, so the server can send new information to your app the instant it becomes available, even if the client didn\u2019t ask for it. \\n\\nThis is perfect for real-time applications like chat apps, game servers, or when you\'re keeping track of stock prices. For example, apps like Google Docs, Slack, WhatsApp, Uber, Zoom, and Robinhood all use WebSockets to power their real-time communication features.\\n\\n![https://media3.giphy.com/media/26u4hHj87jMePiO3u/giphy.gif?cid=7941fdc6hxgjnub1rcs80udcj652956fwmm4qhxsmk6ldxg7&ep=v1_gifs_search&rid=giphy.gif&ct=g](https://media3.giphy.com/media/26u4hHj87jMePiO3u/giphy.gif?cid=7941fdc6hxgjnub1rcs80udcj652956fwmm4qhxsmk6ldxg7&ep=v1_gifs_search&rid=giphy.gif&ct=g)\\n\\nSo remember, when your app and server have a lot to talk about, go for WebSockets and let the conversation flow freely!\\n\\n## How WebSockets Work\\n\\nIf you want real-time capabilities in your app, you don\u2019t always need WebSockets. You can implement similar functionality by using resource-heavy processes, such as:\\n\\n1. long-polling, e.g. running `setInterval` to periodically hit the server and check for updates.\\n2. one-way \u201cserver-sent events\u201d, e.g. keeping a unidirectional server-to-client connection open to receive new updates from the server only.\\n\\n<ImgWithCaption\\n  source=\\"img/websockets-app/Untitled 1.png\\"\\n  width=\\"550px\\"\\n  caption=\\"1. HTTP handshake, 2. two-way instant communication, 3. close connection\\"\\n/>\\n\\nWebSockets, on the other hand, provide a two-way (aka \u201cfull-duplex\u201d) communication channel between the client and server. \\n\\nOnce established via an HTTP \u201chandshake\u201d, the server and client can freely exchange information instantly before the connection is finally closed by either side.\\n\\nAlthough introducing WebSockets does add complexity due to asynchronous and event-driven components, choosing the right libraries and frameworks can make it easy.\\n\\nIn the sections below, we will show you two ways to implement WebSockets into a React-NodeJS app:\\n\\n1. Configuring it yourself alongside your own standalone Node/ExpressJS server\\n2. Letting Wasp, a full-stack framework with superpowers, easily configure it for you\\n\\n## Adding WebSockets Support in a React-NodeJS App\\n\\n### What You Shouldn\u2019t Use: Serverless Architecture\\n\\nBut first, here\u2019s a \u201cheads up\u201d for you: despite being a great solution for certain use-cases, serverless solutions are **not** the right tool for this job.\\n\\nThat means, popular frameworks and infrastructure, like NextJS and AWS Lambda, do not support WebSockets integration out-of-the-box. \\n\\n\x3c!-- [https://www.youtube.com/watch?v=e5Cye4pIFeA](https://www.youtube.com/watch?v=e5Cye4pIFeA) --\x3e\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/e5Cye4pIFeA\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\nInstead of running on a dedicated, traditional server, such solutions utilize serverless functions (also known as lambda functions), which are designed to execute and complete a task as soon as a request comes in. It\u2019s as if they \u201cturn on\u201d when the request comes in, and then \u201cturn off\u201d once it\u2019s completed.\\n\\nThis serverless architecture is not ideal for keeping a WebSocket connection alive because we want a persistent, \u201calways-on\u201d connection.\\n\\nThat\u2019s why you need a \u201cserverful\u201d architecture if you want to build real-time apps. And although there is a workaround to getting WebSockets on a serverless architecture, [like using third-party services](https://vercel.com/guides/do-vercel-serverless-functions-support-websocket-connections), this has a number of drawbacks:\\n\\n- **Cost:** these services exist as subscriptions and can get costly as your app scales\\n- **Limited Customization:** you\u2019re using a pre-built solution, so you have less control\\n- **Debugging:** fixing errors gets more difficult, as your app is not running locally\\n\\n<ImgWithCaption\\n  source=\\"img/websockets-app/Untitled 2.png\\"\\n  width=\\"550px\\"\\n/>\\n\\n### Using ExpressJS with Socket.IO  \u2014 Complex/Customizable Method\\n\\nOkay, let\'s start with the first, more traditional approach: creating a dedicated server for your client to establish a two-way communication channel with.\\n\\n:::note\\n\ud83d\udc68\u200d\ud83d\udcbb If you want to code along you can follow the instructions below. Alternatively, if you just want to see the finished React-NodeJS full-stack app, check out the [github repo here](https://github.com/vincanger/websockets-react)\\n:::\\n\\nIn this exampple, we\u2019ll be using [ExpressJS](https://expressjs.com/) with the [Socket.IO](http://Socket.io) library. Although there are others out there, Socket.IO is a great library that makes working with WebSockets in NodeJS [easier](https://socket.io/docs/v4/).\\n\\nIf you want to code along, first clone the `start` branch:\\n\\n```bash\\ngit clone --branch start https://github.com/vincanger/websockets-react.git\\n```\\n\\nYou\u2019ll notice that inside we have two folders:\\n\\n- \ud83d\udcc1\xa0`ws-client` for our React app\\n- \ud83d\udcc1\xa0`ws-server` for our ExpressJS/NodeJS server\\n\\nLet\u2019s `cd` into the server folder and install the dependencies:\\n\\n```bash\\ncd ws-server && npm install\\n```\\n\\nWe also need to install the types for working with typescript:\\n\\n```bash\\nnpm i --save-dev @types/cors\\n```\\n\\nNow run the server, using the `npm start` command in your terminal. \\n\\nYou should see `listening on *:8000` printed to the console!\\n\\nAt the moment, this is what our `index.ts` file looks like:\\n\\n```tsx\\nimport cors from \'cors\';\\nimport express from \'express\';\\n\\nconst app = express();\\napp.use(cors({ origin: \'*\' }));\\nconst server = require(\'http\').createServer(app);\\n\\napp.get(\'/\', (req, res) => {\\n  res.send(`<h1>Hello World</h1>`);\\n});\\n\\nserver.listen(8000, () => {\\n  console.log(\'listening on *:8000\');\\n});\\n```\\n\\nThere\u2019s not much going on here, so let\u2019s install the [Socket.IO](http://Socket.IO) package and start adding WebSockets to our server!\\n\\nFirst, let\u2019s kill the server with `ctrl + c` and then run: \\n\\n```bash\\nnpm install socket.io\\n```\\n\\nLet\u2019s go ahead and replace the `index.ts` file with the following code. I know it\u2019s a lot of code, so I\u2019ve left a bunch of comments that explain what\u2019s going on ;):\\n\\n```tsx\\nimport cors from \'cors\';\\nimport express from \'express\';\\nimport { Server, Socket } from \'socket.io\';\\n\\ntype PollState = {\\n  question: string;\\n  options: {\\n    id: number;\\n    text: string;\\n    description: string;\\n    votes: string[];\\n  }[];\\n};\\ninterface ClientToServerEvents {\\n  vote: (optionId: number) => void;\\n  askForStateUpdate: () => void;\\n}\\ninterface ServerToClientEvents {\\n  updateState: (state: PollState) => void;\\n}\\ninterface InterServerEvents { }\\ninterface SocketData {\\n  user: string;\\n}\\n\\nconst app = express();\\napp.use(cors({ origin: \'http://localhost:5173\' })); // this is the default port that Vite runs your React app on\\nconst server = require(\'http\').createServer(app);\\n// passing these generic type parameters to the `Server` class\\n// ensures data flowing through the server are correctly typed.\\nconst io = new Server<\\n  ClientToServerEvents,\\n  ServerToClientEvents,\\n  InterServerEvents,\\n  SocketData\\n>(server, {\\n  cors: {\\n    origin: \'http://localhost:5173\',\\n    methods: [\'GET\', \'POST\'],\\n  },\\n});\\n\\n// this is middleware that Socket.IO uses on initiliazation to add\\n// the authenticated user to the socket instance. Note: we are not\\n// actually adding real auth as this is beyond the scope of the tutorial\\nio.use(addUserToSocketDataIfAuthenticated);\\n\\n// the client will pass an auth \\"token\\" (in this simple case, just the username)\\n// to the server on initialize of the Socket.IO client in our React App\\nasync function addUserToSocketDataIfAuthenticated(socket: Socket, next: (err?: Error) => void) {\\n  const user = socket.handshake.auth.token;\\n  if (user) {\\n    try {\\n      socket.data = { ...socket.data, user: user };\\n    } catch (err) {}\\n  }\\n  next();\\n}\\n\\n// the server determines the PollState object, i.e. what users will vote on\\n// this will be sent to the client and displayed on the front-end\\nconst poll: PollState = {\\n  question: \\"What are eating for lunch \u2728 Let\'s order\\",\\n  options: [\\n    {\\n      id: 1,\\n      text: \'Party Pizza Place\',\\n      description: \'Best pizza in town\',\\n      votes: [],\\n    },\\n    {\\n      id: 2,\\n      text: \'Best Burger Joint\',\\n      description: \'Best burger in town\',\\n      votes: [],\\n    },\\n    {\\n      id: 3,\\n      text: \'Sus Sushi Place\',\\n      description: \'Best sushi in town\',\\n      votes: [],\\n    },\\n  ],\\n};\\n\\nio.on(\'connection\', (socket) => {\\n  console.log(\'a user connected\', socket.data.user);\\n\\n\\t// the client will send an \'askForStateUpdate\' request on mount\\n\\t// to get the initial state of the poll\\n  socket.on(\'askForStateUpdate\', () => {\\n    console.log(\'client asked For State Update\');\\n    socket.emit(\'updateState\', poll);\\n  });\\n\\n  socket.on(\'vote\', (optionId: number) => {\\n    // If user has already voted, remove their vote.\\n    poll.options.forEach((option) => {\\n      option.votes = option.votes.filter((user) => user !== socket.data.user);\\n    });\\n    // And then add their vote to the new option.\\n    const option = poll.options.find((o) => o.id === optionId);\\n    if (!option) {\\n      return;\\n    }\\n    option.votes.push(socket.data.user);\\n\\t\\t// Send the updated PollState back to all clients\\n    io.emit(\'updateState\', poll);\\n  });\\n\\n  socket.on(\'disconnect\', () => {\\n    console.log(\'user disconnected\');\\n  });\\n});\\n\\nserver.listen(8000, () => {\\n  console.log(\'listening on *:8000\');\\n});\\n```\\n\\nGreat, start the server again with `npm start` and let\u2019s add the [Socket.IO](http://Socket.IO) client to the front-end.\\n\\n`cd` into the `ws-client` directory and run\\n\\n```bash\\ncd ../ws-client && npm install\\n```\\n\\nNext, start the development server with `npm run dev` and you should see the hardcoded starter app in your browser:\\n\\n<ImgWithCaption\\n  source=\\"img/websockets-app/Untitled 3.png\\"\\n  width=\\"550px\\"\\n/>\\n\\nYou may have noticed that poll does not match the `PollState` from our server. We need to install the [Socket.IO](http://Socket.IO) client and set it all up in order start our real-time communication and get the correct poll from the server.\\n\\nGo ahead and kill the development server with `ctrl + c` and run:\\n\\n```bash\\nnpm install socket.io-client\\n```\\n\\nNow let\u2019s create a hook that initializes and returns our WebSocket client after it establishes a connection. To do that, create a new file in `./ws-client/src` called `useSocket.ts`:\\n\\n```tsx\\nimport { useState, useEffect } from \'react\';\\nimport socketIOClient, { Socket } from \'socket.io-client\';\\n\\nexport type PollState = {\\n  question: string;\\n  options: {\\n    id: number;\\n    text: string;\\n    description: string;\\n    votes: string[];\\n  }[];\\n};\\ninterface ServerToClientEvents {\\n  updateState: (state: PollState) => void;\\n}\\ninterface ClientToServerEvents {\\n  vote: (optionId: number) => void;\\n  askForStateUpdate: () => void;\\n}\\n\\nexport function useSocket({endpoint, token } : { endpoint: string, token: string }) {\\n  // initialize the client using the server endpoint, e.g. localhost:8000\\n\\t// and set the auth \\"token\\" (in our case we\'re simply passing the username\\n\\t// for simplicity -- you would not do this in production!)\\n\\t// also make sure to use the Socket generic types in the reverse order of the server!\\n\\tconst socket: Socket<ServerToClientEvents, ClientToServerEvents>  = socketIOClient(endpoint,  {\\n    auth: {\\n      token: token\\n    }\\n  }) \\n  const [isConnected, setIsConnected] = useState(false);\\n\\n  useEffect(() => {\\n    console.log(\'useSocket useEffect\', endpoint, socket)\\n\\n    function onConnect() {\\n      setIsConnected(true)\\n    }\\n\\n    function onDisconnect() {\\n      setIsConnected(false)\\n    }\\n\\n    socket.on(\'connect\', onConnect)\\n    socket.on(\'disconnect\', onDisconnect)\\n\\n    return () => {\\n      socket.off(\'connect\', onConnect)\\n      socket.off(\'disconnect\', onDisconnect)\\n    }\\n  }, [token]);\\n\\n\\t// we return the socket client instance and the connection state\\n  return {\\n    isConnected,\\n    socket,\\n  };\\n}\\n```\\n\\nNow let\u2019s go back to our main `App.tsx` page and replace it with the following code (again I\u2019ve left comments to explain):\\n\\n```tsx\\nimport { useState, useMemo, useEffect } from \'react\';\\nimport { Layout } from \'./Layout\';\\nimport { Button, Card } from \'flowbite-react\';\\nimport { useSocket } from \'./useSocket\';\\nimport type { PollState } from \'./useSocket\';\\n\\nconst App = () => {\\n\\t// set the PollState after receiving it from the server\\n  const [poll, setPoll] = useState<PollState | null>(null);\\n\\t \\n\\t// since we\'re not implementing Auth, let\'s fake it by\\n\\t// creating some random user names when the App mounts\\n  const randomUser = useMemo(() => {\\n    const randomName = Math.random().toString(36).substring(7);\\n    return `User-${randomName}`;\\n  }, []);\\n\\t\\n\\t// \ud83d\udd0c\u26a1\ufe0f get the connected socket client from our useSocket hook! \\n  const { socket, isConnected } = useSocket({ endpoint: `http://localhost:8000`, token: randomUser });\\n\\n  const totalVotes = useMemo(() => {\\n    return poll?.options.reduce((acc, option) => acc + option.votes.length, 0) ?? 0;\\n  }, [poll]);\\n\\n\\t// every time we receive an \'updateState\' event from the server\\n\\t// e.g. when a user makes a new vote, we set the React\'s state\\n\\t// with the results of the new PollState \\n  socket.on(\'updateState\', (newState: PollState) => {\\n    setPoll(newState);\\n  });\\n\\n  useEffect(() => {\\n    socket.emit(\'askForStateUpdate\');\\n  }, []);\\n\\n  function handleVote(optionId: number) {\\n    socket.emit(\'vote\', optionId);\\n  }\\n\\n  return (\\n    <Layout user={randomUser}>\\n      <div className=\'w-full max-w-2xl mx-auto p-8\'>\\n        <h1 className=\'text-2xl font-bold\'>{poll?.question ?? \'Loading...\'}</h1>\\n        <h2 className=\'text-lg italic\'>{isConnected ? \'Connected \u2705\' : \'Disconnected \ud83d\uded1\'}</h2>\\n        {poll && <p className=\'leading-relaxed text-gray-500\'>Cast your vote for one of the options.</p>}\\n        {poll && (\\n          <div className=\'mt-4 flex flex-col gap-4\'>\\n            {poll.options.map((option) => (\\n              <Card key={option.id} className=\'relative transition-all duration-300 min-h-[130px]\'>\\n                <div className=\'z-10\'>\\n                  <div className=\'mb-2\'>\\n                    <h2 className=\'text-xl font-semibold\'>{option.text}</h2>\\n                    <p className=\'text-gray-700\'>{option.description}</p>\\n                  </div>\\n                  <div className=\'absolute bottom-5 right-5\'>\\n                    {randomUser && !option.votes.includes(randomUser) ? (\\n                      <Button onClick={() => handleVote(option.id)}>Vote</Button>\\n                    ) : (\\n                      <Button disabled>Voted</Button>\\n                    )}\\n                  </div>\\n                  {option.votes.length > 0 && (\\n                    <div className=\'mt-2 flex gap-2 flex-wrap max-w-[75%]\'>\\n                      {option.votes.map((vote) => (\\n                        <div\\n                          key={vote}\\n                          className=\'py-1 px-3 bg-gray-100 rounded-lg flex items-center justify-center shadow text-sm\'\\n                        >\\n                          <div className=\'w-2 h-2 bg-green-500 rounded-full mr-2\'></div>\\n                          <div className=\'text-gray-700\'>{vote}</div>\\n                        </div>\\n                      ))}\\n                    </div>\\n                  )}\\n                </div>\\n                <div className=\'absolute top-5 right-5 p-2 text-sm font-semibold bg-gray-100 rounded-lg z-10\'>\\n                  {option.votes.length} / {totalVotes}\\n                </div>\\n                <div\\n                  className=\'absolute inset-0 bg-gradient-to-r from-yellow-400 to-orange-500 opacity-75 rounded-lg transition-all duration-300\'\\n                  style={{\\n                    width: `${totalVotes > 0 ? (option.votes.length / totalVotes) * 100 : 0}%`,\\n                  }}\\n                ></div>\\n              </Card>\\n            ))}\\n          </div>\\n        )}\\n      </div>\\n    </Layout>\\n  );\\n};\\nexport default App;\\n```\\n\\nGo ahead now and start the client with `npm run dev`. Open another terminal window/tab, `cd` into the `ws-server` directory and run `npm start`.\\n\\nIf we did that correctly, we should be seeing our finished, working, REAL TIME app! \ud83d\ude42\\n\\nIt looks and works great if you open it up in two or three browser tabs. Check it out:\\n\\n<ImgWithCaption\\n  source=\\"img/websockets-app/Untitled.gif\\"\\n  width=\\"550px\\"\\n/>\\n\\nNice!\\n\\nSo we\u2019ve got the core functionality here, but as this is just a demo, there are a couple very important pieces missing that make this app unusable in production.\\n\\nMainly, we\u2019re creating a random fake user each time the app mounts. You can check this by refreshing the page and voting again. You\u2019ll see the votes just add up, as we\u2019re creating a new random user each time. We don\u2019t want that! \\n\\nWe should instead be authenticating and persisting a session for a user that\u2019s registered in our database. But another problem: we don\u2019t even have a database at all in this app!\\n\\nYou can start to see the how the complexity add ups for even just a simple voting feature\\n\\nLuckily, our next solution, Wasp, has integrated Authentication and Database Management. Not to mention, it also takes care of a lot of the WebSockets configuration for us.\\n\\nSo let\u2019s go ahead and give that a go! \\n\\n### Implementing WebSockets with Wasp \u2014 Fast/Zero Config Method\\n\\nBecause Wasp is an innovative full-stack framework, it makes building React-NodeJS apps quick and developer-friendly. \\n\\nWasp has lots of time-saving features, including WebSocket support via [Socket.IO](http://socket.io/), Authentication, Database Management, and Full-stack type-safety out-of-the box.\\n\\n\x3c!-- [https://twitter.com/WaspLang/status/1673742264873500673?s=20](https://twitter.com/WaspLang/status/1673742264873500673?s=20) --\x3e\\n\\nWasp can take care of all this heavy lifting for you because of its use of a config file, which you can think of like a set of instructions that the Wasp compiler uses to help glue your app together.\\n\\nTo see it in action, let\'s implement WebSocket communication using Wasp by following these steps \\n\\n:::tip\\nIf you just want to see finished app\u2019s code, you can check out the [GitHub repo here](https://github.com/vincanger/websockets-wasp)\\n:::\\n\\n1. Install Wasp globally by running the following command in your terminal:\\n\\n```bash\\ncurl -sSL [https://get.wasp-lang.dev/installer.sh](https://get.wasp-lang.dev/installer.sh) | sh \\n```\\n\\nIf you want to code along, first clone the `start` branch of the example app:\\n\\n```bash\\ngit clone --branch start https://github.com/vincanger/websockets-wasp.git\\n```\\n\\nYou\u2019ll notice that the structure of the Wasp app is split:\\n\\n- \ud83d\udc1d\xa0a `main.wasp` config file exists at the root\\n- \ud83d\udcc1\xa0`src/client` is our directory for our React files\\n- \ud83d\udcc1\xa0`src/server` is our directory for our ExpressJS/NodeJS functions\\n\\nLet\u2019s start out by taking a quick look at our `main.wasp` file.\\n\\n```jsx\\napp whereDoWeEat {\\n  wasp: {\\n    version: \\"^0.11.0\\"\\n  },\\n  title: \\"where-do-we-eat\\",\\n  client: {\\n    rootComponent: import { Layout } from \\"@client/Layout.jsx\\",\\n  },\\n\\t// \ud83d\udd10 this is how we get auth in our app.\\n  auth: {\\n    userEntity: User,\\n    onAuthFailedRedirectTo: \\"/login\\",\\n    methods: {\\n      usernameAndPassword: {}\\n    }\\n  },\\n  dependencies: [\\n    (\\"flowbite\\", \\"1.6.6\\"),\\n    (\\"flowbite-react\\", \\"0.4.9\\")\\n  ]\\n}\\n\\n// \ud83d\udc71 this is the data model for our registered users in our database\\nentity User {=psl\\n  id       Int     @id @default(autoincrement())\\n  username String  @unique\\n  password String\\npsl=}\\n\\n// ...\\n```\\n\\nWith this, the Wasp compiler will know what to do and will configure these features for us.\\n\\nLet\u2019s tell it we want WebSockets, as well. Add the `webSocket` definition to the `main.wasp` file, just between `auth` and `dependencies`:\\n\\n```jsx\\napp whereDoWeEat {\\n\\t// ... \\n  webSocket: {\\n    fn: import { webSocketFn } from \\"@server/ws-server.js\\",\\n  },\\n\\t// ...\\n}\\n```\\n\\nNow we have to define the `webSocketFn`. In the `./src/server` directory create a new file, `ws-server.ts` and copy the following code:\\n\\n```tsx\\nimport { WebSocketDefinition } from \'@wasp/webSocket\';\\nimport { User } from \'@wasp/entities\';\\n\\n// define the types. this time we will get the entire User object\\n// in SocketData from the Auth that Wasp automatically sets up for us \ud83c\udf89\\ntype PollState = {\\n  question: string;\\n  options: {\\n    id: number;\\n    text: string;\\n    description: string;\\n    votes: string[];\\n  }[];\\n};\\ninterface ServerToClientEvents {\\n  updateState: (state: PollState) => void;\\n}\\ninterface ClientToServerEvents {\\n  vote: (optionId: number) => void;\\n  askForStateUpdate: () => void;\\n}\\ninterface InterServerEvents {}\\ninterface SocketData {\\n  user: User; \\n}\\n\\n// pass the generic types to the websocketDefinition just like \\n// in the previous example\\nexport const webSocketFn: WebSocketDefinition<\\n  ClientToServerEvents,\\n  ServerToClientEvents,\\n  InterServerEvents,\\n  SocketData\\n> = (io, _context) => {\\n  const poll: PollState = {\\n    question: \\"What are eating for lunch \u2728 Let\'s order\\",\\n    options: [\\n      {\\n        id: 1,\\n        text: \'Party Pizza Place\',\\n        description: \'Best pizza in town\',\\n        votes: [],\\n      },\\n      {\\n        id: 2,\\n        text: \'Best Burger Joint\',\\n        description: \'Best burger in town\',\\n        votes: [],\\n      },\\n      {\\n        id: 3,\\n        text: \'Sus Sushi Place\',\\n        description: \'Best sushi in town\',\\n        votes: [],\\n      },\\n    ],\\n  };\\n  io.on(\'connection\', (socket) => {\\n    if (!socket.data.user) {\\n      console.log(\'Socket connected without user\');\\n      return;\\n    }\\n\\n    console.log(\'Socket connected: \', socket.data.user?.username);\\n    socket.on(\'askForStateUpdate\', () => {\\n      socket.emit(\'updateState\', poll);\\n    });\\n\\n    socket.on(\'vote\', (optionId) => {\\n      // If user has already voted, remove their vote.\\n      poll.options.forEach((option) => {\\n        option.votes = option.votes.filter((username) => username !== socket.data.user.username);\\n      });\\n      // And then add their vote to the new option.\\n      const option = poll.options.find((o) => o.id === optionId);\\n      if (!option) {\\n        return;\\n      }\\n      option.votes.push(socket.data.user.username);\\n      io.emit(\'updateState\', poll);\\n    });\\n\\n    socket.on(\'disconnect\', () => {\\n      console.log(\'Socket disconnected: \', socket.data.user?.username);\\n    });\\n  });\\n};\\n```\\n\\nYou may have noticed that there\u2019s a lot less configuration and boilerplate needed here in the Wasp implementation. That\u2019s because the: \\n\\n- endpoints,\\n- authentication,\\n- and Express and [Socket.IO](http://Socket.IO) middleware\\n\\nare all being handled for you by Wasp. Noice!\\n\\n<ImgWithCaption\\n  source=\\"img/websockets-app/Untitled 4.png\\"\\n  width=\\"550px\\"\\n/>\\n\\nLet\u2019s go ahead now and run the app to see what we have at this point. \\n\\nFirst, we need to initialize the database so that our Auth works correctly. This is something we didn\u2019t do in the previous example due to high complexity, but is easy to do with Wasp:\\n\\n```bash\\nwasp db migrate-dev\\n```\\n\\nOnce that\u2019s finished, run the app (it my take a while on first run to install all depenedencies):\\n\\n```bash\\nwasp start\\n```\\n\\nYou should see a login screen this time. Go ahead and first register a user, then login:\\n\\n<ImgWithCaption\\n  source=\\"img/websockets-app/Untitled 5.png\\"\\n  width=\\"550px\\"\\n/>\\n\\nOnce logged in, you\u2019ll see the same hardcoded poll data as in the previous example, because, again, we haven\u2019t set up the [Socket.IO](http://Socket.IO) client on the frontend. But this time it should be much easier.\\n\\nWhy? Well, besides less configuration, another nice benefit of working with [TypeScript with Wasp](/docs/advanced/web-sockets), is that you just have to define payload types with matching event names on the server, and those types will get exposed automatically on the client! \\n\\nLet\u2019s take a look at how that works now.\\n\\nIn `.src/client/MainPage.tsx`, replace the contents with the following code:\\n\\n```tsx\\nimport { useState, useMemo, useEffect } from \\"react\\";\\nimport { Button, Card } from \\"flowbite-react\\";\\n// Wasp provides us with pre-configured hooks and types based on\\n// our server code. No need to set it up ourselves!\\nimport {\\n  useSocketListener,\\n  useSocket,\\n  ServerToClientPayload,\\n} from \\"@wasp/webSocket\\";\\nimport useAuth from \\"@wasp/auth/useAuth\\";\\n\\nconst MainPage = () => {\\n\\t// we can easily access the logged in user with this hook\\n\\t// that wasp provides for us\\n  const { data: user } = useAuth();\\n  const [poll, setPoll] = useState<ServerToClientPayload<\\"updateState\\"> | null>(\\n    null\\n  );\\n  const totalVotes = useMemo(() => {\\n    return (\\n      poll?.options.reduce((acc, option) => acc + option.votes.length, 0) ?? 0\\n    );\\n  }, [poll]);\\n\\t\\n\\t// pre-built hooks, configured for us by Wasp\\n  const { socket } = useSocket(); \\n  useSocketListener(\\"updateState\\", (newState) => {\\n    setPoll(newState);\\n  });\\n\\n  useEffect(() => {\\n    socket.emit(\\"askForStateUpdate\\");\\n  }, []);\\n\\n  function handleVote(optionId: number) {\\n    socket.emit(\\"vote\\", optionId);\\n  }\\n\\n  return (\\n    <div className=\\"w-full max-w-2xl mx-auto p-8\\">\\n      <h1 className=\\"text-2xl font-bold\\">{poll?.question ?? \\"Loading...\\"}</h1>\\n      {poll && (\\n        <p className=\\"leading-relaxed text-gray-500\\">\\n          Cast your vote for one of the options.\\n        </p>\\n      )}\\n      {poll && (\\n        <div className=\\"mt-4 flex flex-col gap-4\\">\\n          {poll.options.map((option) => (\\n            <Card key={option.id} className=\\"relative transition-all duration-300 min-h-[130px]\\">\\n              <div className=\\"z-10\\">\\n                <div className=\\"mb-2\\">\\n                  <h2 className=\\"text-xl font-semibold\\">{option.text}</h2>\\n                  <p className=\\"text-gray-700\\">{option.description}</p>\\n                </div>\\n                <div className=\\"absolute bottom-5 right-5\\">\\n                  {user && !option.votes.includes(user.username) ? (\\n                    <Button onClick={() => handleVote(option.id)}>Vote</Button>\\n                  ) : (\\n                    <Button disabled>Voted</Button>\\n                  )}\\n                  {!user}\\n                </div>\\n                {option.votes.length > 0 && (\\n                  <div className=\\"mt-2 flex gap-2 flex-wrap max-w-[75%]\\">\\n                    {option.votes.map((vote) => (\\n                      <div\\n                        key={vote}\\n                        className=\\"py-1 px-3 bg-gray-100 rounded-lg flex items-center justify-center shadow text-sm\\"\\n                      >\\n                        <div className=\\"w-2 h-2 bg-green-500 rounded-full mr-2\\"></div>\\n                        <div className=\\"text-gray-700\\">{vote}</div>\\n                      </div>\\n                    ))}\\n                  </div>\\n                )}\\n              </div>\\n              <div className=\\"absolute top-5 right-5 p-2 text-sm font-semibold bg-gray-100 rounded-lg z-10\\">\\n                {option.votes.length} / {totalVotes}\\n              </div>\\n              <div\\n                className=\\"absolute inset-0 bg-gradient-to-r from-yellow-400 to-orange-500 opacity-75 rounded-lg transition-all duration-300\\"\\n                style={{\\n                  width: `${\\n                    totalVotes > 0\\n                      ? (option.votes.length / totalVotes) * 100\\n                      : 0\\n                  }%`,\\n                }}\\n              ></div>\\n            </Card>\\n          ))}\\n        </div>\\n      )}\\n    </div>\\n  );\\n};\\nexport default MainPage;\\n```\\n\\nIn comparison to the previous implementation, Wasp saved us from having to configure the [Socket.IO](http://Socket.IO) client, as well as building our own hooks.\\n\\nAlso, hover over the variables in your client-side code, and you\u2019ll see that the types are being automatically inferred for you! \\n\\nHere\u2019s just one example, but it should work for them all:\\n\\n<ImgWithCaption\\n  source=\\"img/websockets-app/Untitled 6.png\\"\\n  width=\\"550px\\"\\n/>\\n\\nNow if you open up a new private/incognito tab, register a new user, and login, you\u2019ll see a fully working, real-time voting app. The best part is, in comparison to the previous approach, we can log out and back in, and our voting data persists, which is exactly what we\u2019d expect from a production grade app. \ud83c\udfa9\\n\\n<ImgWithCaption\\n  source=\\"img/websockets-app/Untitled 1.gif\\"\\n  width=\\"550px\\"\\n/>\\n\\nAwesome\u2026 \ud83d\ude0f\\n\\n## Comparing the Two Approaches\\n\\nNow, just because one approach seems easier, doesn\u2019t always mean it\u2019s always better. Let\u2019s give a quick run-down of the advantages and disadvantages of both the implementations above.\\n\\n|  | Without Wasp | With Wasp |\\n| --- | --- | --- |\\n| \ud83d\ude0e\xa0Intended User  | Senior Developers, web development teams | Full-stack developers, \u201cIndiehackers\u201d, junior devs |\\n| \ud83d\udcc8\xa0Complexity of Code | Medium-to-High | Low |\\n| \ud83d\udea4\xa0Speed | Slower, more methodical | Faster, more integrated |\\n| \ud83e\uddd1\u200d\ud83d\udcbb\xa0Libraries | Any | Socket.IO |\\n| \u26d1\xa0Type safety  | Implement on both server and client | Implement once on server, inferred by Wasp on client |\\n| \ud83c\udfae\xa0Amount of control | High, as you determine the implementation | Opinionated, as Wasp decides the basic implementation |\\n| \ud83d\udc1b\xa0Learning Curve | Complex: full knowledge of front and backend technologies, including WebSockets | Intermediate: Knowledge of full-stack fundamentals necessary. |\\n\\n### Implementing WebSockets Using React, Express.js (Without Wasp)\\n\\nAdvantages:\\n\\n1. Control & **Flexibility**: You can approach the implementation of WebSockets in the way that best suits your project\'s needs, as well as your choice between a [number of different WebSocket libraries](https://www.atatus.com/blog/websocket-libraries-for-nodejs/), not just Socket.IO.\\n\\nDisadvantages:\\n\\n1. **More Code & Complexity**: Without the abstractions provided by a framework like Wasp, you might need to write more code and create your own abstractions to handle common tasks. Not to mention the proper configuration of a NodeJS/ExpressJS server (the one provided in the example is very basic)\\n2. Manual **Type Safety: If you\u2019re working with TypeScript, you have to be more careful typing your  event handlers and payload types coming into and going out from the server, or implement a more type-safe approach yourself.**\\n\\n### Implementing WebSockets with Wasp (uses React, ExpressJS, and [Socket.IO](http://Socket.IO) under the hood)\\n\\nAdvantages:\\n\\n1. Fully-Integrated**/Less code**: Wasp provides useful abstractions such as `useSocket` and `useSocketListener` hooks for use in React components (on top of other features like Auth, Async Jobs, Email-sending, DB management, and Deployment), simplifying the client-side code, and allowing for full integration with less configuration.\\n2. **Type Safety**: Wasp facilitates full-stack type safety for WebSocket events and payloads. This reduces the likelihood of runtime errors due to mismatched data types and saves you from writing even more boilerplate.\\n\\nDisadvantages:\\n\\n1. **Learning curve**: Developers unfamiliar with Wasp will need to learn the framework to effectively use it.\\n2. **Less control**: While Wasp provides a lot of conveniences, it abstracts away some of the details, giving developers slightly less control over certain aspects of socket management.\\n\\n## Conclusion\\n\\nIn general, how you add WebSockets to your React app depends on the specifics of your project, your comfort level with the available tools, and the trade-offs you\'re willing to make between ease of use, control, and complexity.\\n\\nDon\u2019t forget, if you want to check out the full finished code from our \u201cLunch Voting\u201d example full-stack app, go here: [https://github.com/vincanger/websockets-wasp](https://github.com/vincanger/websockets-wasp)\\n\\nAnd if you know of a better, cooler, sleeker way of implementing WebSockets into your apps, let us know in the comments below\\n\\n<ImgWithCaption\\n  source=\\"img/websockets-app/Untitled 7.png\\"\\n  width=\\"550px\\"\\n/>"},{"id":"/2023/08/01/smol-ai-vs-wasp-ai","metadata":{"permalink":"/wasp-docs/blog/2023/08/01/smol-ai-vs-wasp-ai","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-08-01-smol-ai-vs-wasp-ai.md","source":"@site/blog/2023-08-01-smol-ai-vs-wasp-ai.md","title":"Smol AI \ud83d\udc23 vs. Wasp AI \ud83d\udc1d - Which is the Better AI Junior Developer?","description":"TL;DR","date":"2023-08-01T00:00:00.000Z","formattedDate":"August 1, 2023","tags":[{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"ai","permalink":"/wasp-docs/blog/tags/ai"},{"label":"gpt","permalink":"/wasp-docs/blog/tags/gpt"},{"label":"langchain","permalink":"/wasp-docs/blog/tags/langchain"},{"label":"fullstack","permalink":"/wasp-docs/blog/tags/fullstack"},{"label":"node","permalink":"/wasp-docs/blog/tags/node"},{"label":"react","permalink":"/wasp-docs/blog/tags/react"},{"label":"agent","permalink":"/wasp-docs/blog/tags/agent"}],"readingTime":26.42,"hasTruncateMarker":true,"authors":[{"name":"Vinny","title":"DevRel @ Wasp","url":"https://vincanger.github.io","email":"vince@wasp-lang.dev","imageURL":"https://vincanger.github.io/assets/vince_smiley.jpg","key":"vinny"}],"frontMatter":{"title":"Smol AI \ud83d\udc23 vs. Wasp AI \ud83d\udc1d - Which is the Better AI Junior Developer?","authors":["vinny"],"image":"/img/smol-ai-vs-wasp-ai/smol-vs-wasp-banner.png","tags":["wasp","ai","gpt","langchain","fullstack","node","react","agent"]},"prevItem":{"title":"Build a real-time voting app with WebSockets, React & TypeScript \ud83d\udd0c\u26a1\ufe0f","permalink":"/wasp-docs/blog/2023/08/09/build-real-time-voting-app-websockets-react-typescript"},"nextItem":{"title":"How we built a GPT code agent that generates full-stack web apps in React & Node.js, explained simply","permalink":"/wasp-docs/blog/2023/07/17/how-we-built-gpt-web-app-generator"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n### TL;DR\\n\\nAI-assisted coding tools are on the rise. In this article, we take a deep dive into two tools that use similar techniques, but are intended for different outcomes. \\n\\n[Smol AI\u2019s \u201cSmol-Developer\u201d](https://github.com/smol-ai/developer) gained a lot of notoriety very quickly by being one of the first such tools on the scene. It is a simple set of python scripts that allow a user to build prototype apps using natural language in an iterative approach. \\n\\n[Wasp\u2019s \u201cGPT Web App Generator\u201d](https://magic-app-generator.wasp-lang.dev/) is more of a newcomer and focuses on building more complex full-stack React + NodeJS web app prototypes through a simple prompt and fancy UI.\\n\\nWhen comparing the two, Smol-Developer\u2019s strength is its **versatility**. If you want to spend time tinkering and tweaking, you can do a lot to your own prompting, and even the code, in order to get decent results on a **broad range of apps**. \\n\\nOn the other hand, Wasp AI shines by being **specific.** Because it\u2019s only built for generating full-stack React/NodeJS/Prisma/Tailwind codebases, it does the tweaking and advanced prompting for you, and thus it performs much better in generating **higher quality content** with less effort for a specific use case.\\n\\n<ImgWithCaption\\n  source=\\"img/smol-ai-vs-wasp-ai/Untitled.png\\"\\n  width=\\"550px\\"\\n/>\\n\\nWill either of these tools completely replace Junior Developers in their current form? Of course not. But they do allow for rapid prototyping and testing of novel ideas.\\n\\nRead on to learn more about how they work, which tool is right for the job at hand, and how you can use them in your current workflow.\\n\\n\x3c!--truncate--\x3e\\n\\n## Intro\\n\\nThe age of AI-assisted coding tools is fully upon us. GitHub\u2019s Copilot might be the go-to professional solution, but since its release numerous open-source solutions have popped up.\\n\\nMost of these newer solutions tend towards functioning as an AI Agent, going beyond just suggesting the next logical pieces of code within your current file, they aim to create simple prototypes of entire apps. Some are focused more on scaffolding entire app prototypes from an initial prompt, while others function as interactive assistants, helping you modify and improve existing codebases. \\n\\nEither way, they\u2019re often being described as \u201cAI Junior Developers\u201d, because they can take a product requirement (i.e. \u201cprompt\u201d) and build a pretty good \u2014 but far from perfect \u2014 first iteration, saving developers a lot of time.\\n\\nThis article is going to focus on two tools that aim to build somewhat complex working prototypes from a single prompt: [Smol AI](https://github.com/smol-ai/developer) and [Wasp AI](https://magic-app-generator.wasp-lang.dev/). We\u2019ll test them out by running the same prompts through each and seeing what we get.\\n\\nBy the end of it, you\u2019ll have a pretty good understanding of how they work, their advantages and disadvantages, and what kind of tasks they\u2019re best suited for.\\n\\n## Before We Begin\\n\\n[Wasp = }](https://wasp-lang.dev) is the only open-source, completely serverful fullstack React/Node framework with a built-in compiler and AI-assisted features that lets you build your app super quickly. \\n\\nWe\u2019re working hard to help you build performant web apps as easily as possible \u2014 including creating content like this, which is released weekly!\\n\\nWe would be super grateful if you could help us out by starring our repo on GitHub: [https://www.github.com/wasp-lang/wasp](https://www.github.com/wasp-lang/wasp) \ud83d\ude4f\\n\\n![please please please](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5b1bjvpt97e7o2psgle7.gif)\\n\\n\u2026e*ven Ron would star [Wasp on GitHub](https://www.github.com/wasp-lang/wasp)* \ud83e\udd29\\n\\n## The Tools\\n\\n### Smol-Developer\\n\\nSmol AI (described as a platform for \u201cmodel distillation and AI developer agents\u201d) actually has a few open-source tools on offer, but Smol-Developer is the one we\u2019ll be taking a look at. It was initially released by [Swyx](https://twitter.com/swyx) on May 11th and already has over 10k GitHub stars!\\n\\nIt aims to be a generalist, prompt-based coding assistant run from the command line. The developer\u2019s job becomes a process of iterative prompting, testing, and re-prompting in order to get the optimal output. It is not limited to any language or type of app it can create, although simple apps tend to work best.\\n\\n<ImgWithCaption\\n  source=\\"img/smol-ai-vs-wasp-ai/smol-ai-tweet.png\\"\\n  width=\\"400px\\"\\n/>\\n\\nCheck out this tweet thread above to get a better understanding: [https://twitter.com/swyx/status/1657892220492738560](https://twitter.com/swyx/status/1657892220492738560)\\n\\nRunning from the command line, Smol AI is essentially a chain of calls to the OpenAI chat completions (i.e. \u201cChatGpt\u201d) endpoint via a python script that:\\n\\n1. takes an initial user-generated prompt\\n2. creates a plan based on internal prompts* for executing the app with:\\n    1. the structure of the entire app \\n    2. each file and its exported variables to be generated\\n    3. function names\\n3. generates file paths based on the plan\\n4. loops through file paths and generates code for each file based on plan and prompt\\n\\nThe generated output can then be evaluated by the developer and the prompt can be iterated on to account for any errors or bugs found during runtime.\\n\\nSmol-Developer quickly gained notoriety by being one of the first of such tools on the scene, in addition to Swyx\u2019s prominence within it. So if you\u2019re curious to see what\u2019s being built with it, just check out some of the numerous YouTube videos on it. \\n\\nOne of my personal favorites is AI Jason\u2019s expos\xe9 and commentary. He gives a concise explanation, shows you some great tips on how to use Smol-Developer effectively, and as a Product Designer/Manager he gives an interesting perspective on its benefits:\\n\\n\x3c!-- [https://www.youtube.com/watch?v=BMRywudsqtY](https://www.youtube.com/watch?v=BMRywudsqtY) --\x3e\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/BMRywudsqtY\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\n- Smol-Developer GitHub Repo: [https://github.com/smol-ai/developer/](https://github.com/smol-ai/developer/)\\n\\n<details>\\n  <summary> *Curious to see what the internal system prompt looks like? </summary>\\n\\n    \\n    You are a top tier AI developer who is trying to write a program that will generate code for the user based on their intent.\\n    \\n    Do not leave any todos, fully implement every feature requested.\\n\\n    When writing code, add comments to explain what you intend to do and why it aligns with the program plan and specific instructions from the original prompt.\\n          \\n    In response to the user\'s prompt, write a plan.\\n\\n    In this plan, please name and briefly describe the structure of the app we will generate, including, for each file we are generating, what variables they export, data schemas, id names of every DOM elements that javascript functions will use, message names, and function names.\\n\\n    Respond only with plans following the above schema.\\n\\n    the app prompt is: {prompt}\\n\\n</details>\\n\\n\\n### Wasp\u2019s GPT Web App Generator\\n\\nIn contrast to Smol-Developer, Wasp\u2019s AI tool, [GPT Web App Generator](https://magic-app-generator.wasp-lang.dev/), is currently an open-source web app (yes, it\u2019s a web app that makes web apps). Since it\u2019s release on the 12th of July, there have been over 6,500 apps generated with over 300 apps being generated each day!\\n\\n\x3c!-- ![Untitled](../static/img/smol-ai-vs-wasp-ai/Untitled%201.png) --\x3e\\n<ImgWithCaption \\n  source=\\"img/smol-ai-vs-wasp-ai/Untitled%201.png\\"\\n  width=\\"550px\\"\\n/>\\n\\nHere\u2019s a quick 1 minute video showcasing how [GPT Web App Generator](https://magic-app-generator.wasp-lang.dev/) works:\\n\\n\x3c!-- [https://www.youtube.com/watch?v=u0MVsPb2MP8](https://www.youtube.com/watch?v=u0MVsPb2MP8) --\x3e\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/u0MVsPb2MP8\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\nSo to give a bit of background, [Wasp](https://wasp-lang.dev) is actually a full-stack web app framework built around a compiler and config file. Using this approach, Wasp simplifies the web app creation process by handling boilerplate code for you, taking the core app logic written by the developer and connecting the entire stack together from frontend to backend, and database management. \\n\\nIt currently works with React, NodeJS, Tanstack-Query, and Prisma, taking care of features like Auth, Routing, Cron Jobs, Fullstack Typesafety, and Caching. This allows developers to focus more on the fun stuff, like the app\u2019s features, instead of spending time on boring configurations.\\n\\nBecause Wasp uses a compiler and config file to generate the app from, this makes it surprisingly well suited for guiding LLMs like ChatGPT towards creating more complex apps with it, as it essentially a plan or set of instructions for how to build the app!\\n\\nTake this simple example of how you\u2019d tell Wasp that you want `username and password` authentication in your app:\\n\\n```jsx\\n// main.wasp file\\n\\napp RecipeApp {\\n  title: \\"My Recipes\\",\\n  wasp: { version: \\"^0.11.0\\" },\\n  auth: {\\n    methods: { usernameAndPassword: {} },\\n    onAuthFailedRedirectTo: \\"/login\\",\\n    userEntity: User\\n  }\\n}\\n\\nentity User {=psl  // Data models are defined using Prisma Schema Language.\\n  id          Int        @id @default(autoincrement())\\n  username    String     @unique\\n  password    String\\n  recipes     Recipe[]\\npsl=}\\n```\\n\\nWasp\u2019s config file is like an app outline that the compiler understands and can then use to connect and glue the app together, taking care of the boilerplate for you.\\n\\nBy leveraging the powers of Wasp, GPT Web App Generator works by:\\n\\n1. taking a simple user-generated prompt via the UI\\n2. giving GPT a descriptive example of a Wasp app and config file via internal prompts*\\n3. creating a plan that meets these requirements \\n4. generating the code for each part of the app according to the plan\\n5. checking each file for expected errors/hallucinations and fixing them\\n\\nIn the end, the user can download the codebase as a zipped file and run it locally. Simpler apps, such as [TodoApp](https://magic-app-generator.wasp-lang.dev/result/07ed440a-3155-4969-b3f5-2031fb1f622f)\xa0or\xa0[MyPlants](https://magic-app-generator.wasp-lang.dev/result/3bb5dca2-f134-4f96-89d6-0812deab6e0c) tend to work straight out of the box, while more complex apps need a bit of finessing to get working.\\n\\n- Try out the GPT Web App Generator at: [https://magic-app-generator.wasp-lang.dev/](https://magic-app-generator.wasp-lang.dev/) or via the command line via Wasp\'s [experimental release](https://magic-app-generator.wasp-lang.dev/#:~:text=%5BAdvanced%5D%20Can%20I%20use%20GPT4%20for%20the%20whole%20app%3F)\\n- Wasp AI / Generator GitHub: [https://github.com/wasp-lang/wasp/tree/wasp-ai/waspc/src/Wasp/AI](https://github.com/wasp-lang/wasp/tree/wasp-ai/waspc/src/Wasp/AI)\\n\\n<details>\\n  <summary> *Curious to see what the internal system prompt looks like? </summary>\\n  <div>\\n\\n    Wasp is a full-stack web app framework that uses React (for client), NodeJS and Prisma (for server).\\n    High-level of the app is described in main.wasp file (which is written in special Wasp DSL), details in JS/JSX files.\\n    Wasp DSL (used in main.wasp) reminds a bit of JSON, and doesn\'t use single quotes for strings, only double quotes. Examples will follow.\\n\\n    Important Wasp features:\\n      - Routes and Pages: client side, Pages are written in React.\\n      - Queries and Actions: RPC, called from client, execute on server (nodejs).\\n        Queries are for fetching and should not do any mutations, Actions are for mutations.\\n      - Entities: central data models, defined via PSL (Prisma schema language), manipulated via Prisma.\\n    Typical flow: Routes point to Pages, Pages call Queries and Actions, Queries and Actions work with Entities.\\n\\n    Example main.wasp (comments are explanation for you):\\n\\n    ```wasp\\n    app todoApp {\\n      wasp: { version: \\"^0.11.1\\" },\\n      title: \\"ToDo App\\",\\n      auth: {\\n        userEntity: User,\\n        methods: { usernameAndPassword: {} },\\n        onAuthFailedRedirectTo: \\"/login\\"\\n      },\\n      client: {\\n        rootComponent: import { Layout } from \\"@client/Layout.jsx\\",\\n      },\\n      db: {\\n        prisma: {\\n          clientPreviewFeatures: [\\"extendedWhereUnique\\"]\\n        }\\n      },\\n    }\\n\\n    route SignupRoute { path: \\"/signup\\", to: SignupPage }\\n    page SignupPage {\\n      component: import Signup from \\"@client/pages/auth/Signup.jsx\\"\\n    }\\n\\n    route LoginRoute { path: \\"/login\\", to: LoginPage }\\n    page LoginPage {\\n      component: import Login from \\"@client/pages/auth/Login.jsx\\"\\n    }\\n\\n    route DashboardRoute { path: \\"/\\", to: Dashboard }\\n    page DashboardPage {\\n      authRequired: true,\\n      component: import Dashboard from \\"@client/pages/Dashboard.jsx\\"\\n    }\\n\\n    entity User {=psl\\n        id          Int       @id @default(autoincrement())\\n        username    String    @unique\\n        password    String\\n        tasks       Task[]\\n    psl=}\\n\\n    entity Task {=psl\\n        id          Int       @id @default(autoincrement())\\n        description String\\n        isDone      Boolean   @default(false)\\n        user        User      @relation(fields: [userId], references: [id])\\n        userId      Int\\n    psl=}\\n\\n    query getUser {\\n      fn: import { getUser } from \\"@server/queries.js\\",\\n      entities: [User] // Entities that this query operates on.\\n    }\\n\\n    query getTasks {\\n      fn: import { getTasks } from \\"@server/queries.js\\",\\n      entities: [Task]\\n    }\\n\\n    action createTask {\\n      fn: import { createTask } from \\"@server/actions.js\\",\\n      entities: [Task]\\n    }\\n\\n    action updateTask {\\n      fn: import { updateTask } from \\"@server/actions.js\\",\\n      entities: [Task]\\n    }\\n    ```\\n\\n    We are looking for a plan to build a new Wasp app (description at the end of prompt).\\n\\n    Instructions you must follow while generating plan:\\n      - App uses username and password authentication.\\n      - App MUST have a \'User\' entity, with following fields required:\\n      - `id Int @id @default(autoincrement())`\\n      - `username String @unique`\\n      - `password String`\\n    It is also likely to have a field that refers to some other entity that user owns, e.g. `tasks Task[]`.\\n      - One of the pages in the app must have a route path \\"/\\".\\n      - Don\'t generate the Login or Signup pages and routes under any circumstances. They are already generated.\\n\\n    Plan is represented as JSON with the following schema:\\n\\n    {\\n      \\"entities\\": [{ \\"entityName\\": string, \\"entityBodyPsl\\": string }],\\n      \\"actions\\": [{ \\"opName\\": string, \\"opFnPath\\": string, \\"opDesc\\": string }],\\n      \\"queries\\": [{ \\"opName\\": string, \\"opFnPath\\": string, \\"opDesc\\": string }],\\n      \\"pages\\": [{ \\"pageName\\": string, \\"componentPath\\": string, \\"routeName\\": string, \\"routePath\\": string, \\"pageDesc\\": string }]\\n    }\\n\\n    Here is an example of a plan (a bit simplified, as we didn\'t list all of the entities/actions/queries/pages):\\n\\n    {\\n      \\"entities\\": [{\\n        \\"entityName\\": \\"User\\",\\n        \\"entityBodyPsl\\": \\"  id Int @id @default(autoincrement())\\\\n  username String @unique\\\\n  password String\\\\n  tasks Task[]\\"\\n      }],\\n      \\"actions\\": [{\\n        \\"opName\\": \\"createTask\\",\\n        \\"opFnPath\\": \\"@server/actions.js\\",\\n        \\"opDesc\\": \\"Checks that user is authenticated and if so, creates new Task belonging to them. Takes description as an argument and by default sets isDone to false. Returns created Task.\\"\\n      }],\\n      \\"queries\\": [{\\n        \\"opName\\": \\"getTask\\",\\n        \\"opFnPath\\": \\"@server/queries.js\\",\\n        \\"opDesc\\": \\"Takes task id as an argument. Checks that user is authenticated, and if so, fetches and returns their task that has specified task id. Throws HttpError(400) if tasks exists but does not belong to them.\\"\\n      }],\\n      \\"pages\\": [{\\n        \\"pageName\\": \\"TaskPage\\",\\n        \\"componentPath\\": \\"@client/pages/Task.jsx\\",\\n        \\"routeName: \\"TaskRoute\\",\\n        \\"routePath\\": \\"/task/:taskId\\",\\n        \\"pageDesc\\": \\"Diplays a Task with the specified taskId. Allows editing of the Task. Uses getTask query and createTask action.\\",\\n      }]\\n    }\\n\\n    We will later use this plan to write main.wasp file and all the other parts of Wasp app,\\n    so make sure descriptions are detailed enough to guide implementing them.\\n    Also, mention in the descriptions of actions/queries which entities they work with,\\n    and in descriptions of pages mention which actions/queries they use.\\n\\n    Typically, plan will have AT LEAST one query, at least one action, at least one page, and at\\n    least two entities. It will very likely have more than one of each, though.\\n\\n    DO NOT create actions for login and logout under any circumstances. They are already included in Wasp.\\n\\n    Note that we are using SQLite as a database for Prisma, so don\'t use scalar arrays in PSL, like `String[]`,\\n    as those are not supported in SQLite. You can of course normally use arrays of other models, like `Task[]`.\\n\\n    Please, respond ONLY with a valid JSON that is a plan.\\n    There should be no other text in the response.\\n\\n    ==== APP DESCRIPTION: ====\\n\\n    App name: TodoApp\\n    A simple todo app with one main page that lists all the tasks. User can create new tasks by providing their description, toggle existing ones, or edit their description. User owns tasks. User can only see and edit their own tasks. Tasks are saved in the database.\\n  </div>\\n\\n</details>\\n\\n## Comparison Test\\n\\n### Prompt 1: PONG Game\\n\\nTo get a sense for how each coding agent performed, I tried out two different prompts on both Smol-Developer and Wasp\u2019s GPT Web App Generator with only slight modifications to the prompts to fit the requirements of each tool.\\n\\nThe first prompt was the default prompt that comes hardcoded into Smol-Developer\u2019s `[main.py](http://main.py)` script:\\n\\n> *a simple JavaScript/HTML/CSS/Canvas app that is a one player game of PONG. The left paddle is controlled by the player, following where the mouse goes. The right paddle is controlled by a simple AI algorithm, which slowly moves the paddle toward the ball at every frame, with some probability of error. Make the canvas a 400 x 400 black square and center it in the app. Make the paddles 100px long, yellow and the ball small and red. Make sure to render the paddles and name them so they can controlled in javascript. Implement the collision detection and scoring as well. Every time the ball bounces off a paddle, the ball should move faster.*\\n> \\n\\n:::note\\n\ud83d\udca1 For Wasp\u2019s GPT Web App Generator, I replaced the first line with \u201ca simple one player game of PONG\u201d since Wasp will automatically generate a full-stack React/NodeJS app.\\n\\n:::\\n\\nBoth were able to create a functional PONG game out-of-the box, but only on the second try. The first try created decent PONG starters, but both had buggy game logic (e.g. computer opponent failed to hit ball, or ball would spin off into oblivion). I didn\u2019t change the prompts at all, but just simply ran them a second time each \u2014 and that did the trick!\\n\\n\x3c!-- ![Smol AI\u2019s PONG game](../static/img/smol-ai-vs-wasp-ai/Untitled%202.png) --\x3e\\n<ImgWithCaption\\n  source=\\"img/smol-ai-vs-wasp-ai/Untitled%202.png\\"\\n  width=\\"400px\\"\\n  caption=\\"Smol AI\u2019s PONG game\\"\\n/>\\n\\n\x3c!-- ![Wasp\u2019s PONG game](../static/img/smol-ai-vs-wasp-ai/Untitled%203.png) --\x3e\\n<ImgWithCaption\\n  source=\\"img/smol-ai-vs-wasp-ai/Untitled%203.png\\"\\n  width=\\"400px\\"\\n  caption=\\"Wasp AI\u2019s PONG game\\"\\n/>\\n\\n\\nFor both of the generated apps, the game logic was very simple. Scores weren\u2019t recorded, and once a game ended, you\u2019d have to refresh the page to start a new one.\\n\\nAlthough, while Smol-Developer only created the game logic, GPT Web App Generator created the game logic as well as the logic for authentication, creating games, and updating a game\u2019s score, saving it all to the database (though the scoring functions weren\u2019t being utilized initially).\\n\\nTo be fair, this isn\u2019t really a surprise though as these features are baked into the design of Wasp and the Generator.\\n\\nOn the other hand, to get these same features for Smol-Developer, we\u2019d have to elaborate on our prompt, giving it explicit instructions to implement them, and iterate on it a number of times before landing on an acceptable prototype. \\n\\nThis is what I attempted to test out with the second prompt.\\n\\n### Prompt 2: Blog App\\n\\n![Untitled](../static/img/smol-ai-vs-wasp-ai/Untitled%204.png)\\n\\nThis time, for the second app test, I used a default prompt featured on the GPT Web App Generator homepage for creating a Blog app:\\n\\n> A blogging platform with posts and post comments.\\nUser owns posts and comments and they are saved in the database.\\nEverybody can see all posts, but only the owner can edit or delete them. Everybody can see all the comments.\\nApp has four pages:\\n> \\n> 1. \\"Home\\" page lists all posts (their titles and authors) and is accessible by anybody.\\n> If you click on a post, you are taken to the \\"View post\\" page.\\n> It also has a \'New post\' button, that only logged in users can see, and that takes you to the \\"New post\\" page.\\n> 2. \\"New post\\" page is accessible only by the logged in users. It has a form for creating a new post (title, content).\\n> 3. \\"Edit post\\" page is accessible only by the post owner. It has a form for editing the post with the id specified in the url.\\n> 4. \\"View post\\" page is accessible by anybody and it shows the details of the post with the id specified in the url: its title, author, content and comments.\\n> It also has a form for creating a new comment, that is accessible only by the logged in users.\\n\\n:::note\\n\ud83d\udca1 For the Smol-Developer prompt, I added the lines: \u201cThe app consists of a React client and a NodeJS server. Posts are saved in an sqlite database using Prisma ORM.\u201d\\n:::\\n\\n\x3c!-- [Running Wasp\u2019s GPT Web App Generator](https://youtu.be/8A_i5L9MJ90) --\x3e\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/8A_i5L9MJ90\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\n\\nAs this was a suggested prompt on the GPT Web App Generator page, let\u2019s start with the Wasp app result first. \\n\\nAfter downloading the generated codebase and running the app, I ran into an error `Failed to resolve import \\"./ext-src/ViewPost.jsx\\" from \\"src/router.jsx\\". Does the file exist?`\\n\\n\x3c!-- ![Untitled](../static/img/smol-ai-vs-wasp-ai/Untitled%205.png) --\x3e\\n<ImgWithCaption\\n  source=\\"img/smol-ai-vs-wasp-ai/Untitled%205.png\\"\\n  width=\\"550px\\"\\n/>\\n\\n\\nOne quick look at the `main.wasp` file revealed that the Generator gave the wrong path to the `ViewPost` page, although it did get all the other Page paths correct (highlighted in yellow above).\\n\\nOnce that path was corrected, a working app popped up at localhost:3000. Nice!\\n\\n\x3c!-- ![Kapture 2023-07-27 at 11.49.19.mp4](../static/img/smol-ai-vs-wasp-ai/Kapture_2023-07-27_at_11.49.19.mp4) --\x3e\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/c8JacesyTe8\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\nThe video above was my first time trying out the app, and as you can see, most of the functionality is there and working correctly \u2014 Authentication and Authorization, and basic CRUD operations. Pretty amazing! \\n\\nThere were still a couple of errors that prevented the app from being fully functional out-of-the-box, but they were easy to fix:\\n\\n1. Blog posts on the homepage did not have a link in order to redirect to the their specific post page \u2014 fixable by just wrapping them in `<Link to={`/post/${post.id}`}>` \\n2. The client was passing the `postId` as a String instead of an `Int` to the `getPost` endpoint \u2014 fixable by wrapping the argument in `parseInt(postId)` to convert strings to integers \\n\\n\x3c!-- ![Untitled](../static/img/smol-ai-vs-wasp-ai/Untitled%206.png) --\x3e\\n<ImgWithCaption\\n  source=\\"img/smol-ai-vs-wasp-ai/Untitled%206.png\\"\\n  width=\\"400px\\"\\n/>\\n\\nAnd with those simple fixes we got a fully functioning, full-stack blog app with authentication,  database, and simple tailwind css styling! The best part was that all this took about ~5 minutes from start to finish. Sweet :)\\n\\n:::note\\n\ud83e\uddd1\u200d\ud83d\udcbb The Generator saves all the apps it creates along with a sharable link, so if you want to check out the original generated Blog app code (before fixes) from above, click here: [https://magic-app-generator.wasp-lang.dev/result/a3a76887-952b-4774-a773-42209c4bffa8](https://magic-app-generator.wasp-lang.dev/result/a3a76887-952b-4774-a773-42209c4bffa8)\\n\\n:::\\n\\n\x3c!-- [Running Smol-Developer](https://youtu.be/oT0pCbN-JgE?t=53) --\x3e\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/oT0pCbN-JgE?start=50\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\nThe Smol-Developer result was also very impressive, with a solid ExpressJS server and a lot of React client pages, but there were too many complicated errors that prevented me from getting the app started, including but not limited to:\\n\\n1. No build tools or configuration files\\n2. The server was importing database models that didn\u2019t exist\\n3. The server was importing but not utilizing Prisma as the ORM to communicate with the DB\\n4. Client had Auth logic, but was not utilizing it to protect pages/routes\\n\\n![Untitled](../static/img/smol-ai-vs-wasp-ai/Untitled%207.png)\\n\\nBecause there were too many fundamental issues with the app, I went ahead and added some more lines to the bottom of the prompt:\\n\\n> \u2026\\n>\\n>Scaffold the app to be able to use Vite as the client\'s build tool. Include a package.json file >with the dependencies and scripts for running the client and server.\\n> \\n\\nThis second attempt produced some of the changes I was looking for, like package.json files and Vite config files to bootstrap the React app, but it still **failed** to include:\\n\\n1. An index.html file \\n2. Package.json files with the correct dependencies being imported from within the client and server\\n3. A `prisma.schema` file\\n4. A css file (although it did include `classNames` in the jsx code)\\n\\nOn the other hand, the server code, albeit much sparser this time, did at least import and use Prisma correctly.\\n\\nSo I went ahead for a third attempt and modified and added the following lines to the bottom of the prompt:\\n\\n> \u2026\\n>\\n>Scaffold the app to be able to use Vite as the client\'s build tool. \\n>\\n>Make sure to include the following:\\n>1. package.json files for both the server and client. Make sure that these files include the >dependencies being imported in the respective apps. \\n>2. an index.html file in the client\'s public folder, so that Vite can build the app. \\n>3. a `prisma.schema` file with the models and their fields. Make sure these are the same models >being used app-wide.\\n>4. a css file with styles that match the `className`s used in the app.\\n> \\n\\nWith these additions to the prompt, the third iteration of the app did in fact include them! Well, most of them, but unfortunately not all of them. Now I was getting the css and package.json files, but no vite config file was created this time, even though the instructions for using \u201cVite as the client\u2019s build tool\u201d produced one previously.\\n\\nBesides that, no auth logic was implemented, imports were out place or missing, and an `index.jsx` file was also nowhere to be found, so I decided to stop there.\\n\\n\x3c!-- ![Untitled](../static/img/smol-ai-vs-wasp-ai/Untitled%208.png) --\x3e\\n<ImgWithCaption \\n  source=\\"img/smol-ai-vs-wasp-ai/Untitled%208.png\\"\\n  width=\\"400px\\"\\n/>\\n\\nI\u2019m sure I could have iterated on the prompt enough times until I got closer to a working app, but at ~$0.80-$1.20 a generation, I didn\u2019t feel like racking up more of an OpenAI bill. \\n\\n:::note\\n\ud83d\udcb8 Price per generation is another big difference between the Smol AI and Wasp AI. Because more work is being done by Wasp\u2019s compiler and less by GPT, each app costs about ~$0.10-$0.20 to generate (although Wasp covers the cost and allows you to use it for free), whereas to generate [complex full-stack apps with Smol-Developer can cost upwards of ~$10.00](https://www.youtube.com/watch?v=zsxyqz6SYp8)!\\n\\n:::\\n\\nPlus, there are plenty of YouTubers who\u2019ve created videos about the process of using Smol-Developer and it seems they all come to similar conclusions: you need to create a very detailed and explicit prompt in order to get a working prototype (In fact, in AI Jason\u2019s Smol-AI video above, he mentioned that he got the best results out of the box when prompting Smol-Developer to write everything to one file only \u2014 of course this limits you to generating simple apps only that are not so easy to continue from manually).\\n\\n## Thoughts & Further Considerations\\n\\nAt their core, SmolAI and WaspAI function quite similarly, by first prompting the LLM to create a plan for the app\u2019s architecture, and then to execute on that plan, file by file. \\n\\nBut because Smol-Developer aims to be able to generate a wider range of apps, the expectation is on the Developer (or \u201cPrompt Engineer\u201d) to create a highly detailed, explicit prompt, which is more akin to a Product Requirement Doc that a Product Designer would write. This can take a few iterations to get right and pushes Smol-Developer in the direction of \u201cNatural Language Programming\u201d tool.\\n\\nOn the other hand, Wasp\u2019s GPT Web App Generator has a lot of prompting and programming going on behind the scenes, abstracted away from the user and hidden within the Generator\u2019s code and Wasp\u2019s compiler. Wasp comes with a lot of knowledge baked in and already has a good idea of what it wants to build, which means the user has less to think about it. This means that we\u2019re more likely to get a working complex prototype from a short, simple prompt, but we have less flexibility in the kinds of apps we\u2019re able to create \u2014 we always get a full-stack web app.\\n\\nIn general, Wasp is like a junior developer specialized in web dev and has a lot of experience with a specific stack, while Smol AI is a junior developer that\u2019s a generalist who is more versatile, but has less specific knowledge and experience with web dev \ud83d\ude42\\n\\n|  | Smol AI  | Wasp AI |\\n| --- | --- | --- |\\n| \ud83e\uddd1\u200d\ud83d\udcbb\xa0Types of Apps  | Varied  | Full-stack Web Apps |\\n| \ud83d\uddef\xa0Programming Languages  | All Types | JavaScript/TypeScript |\\n| \ud83d\udcc8\xa0Complexity of Generated App  | Simple to Medium | Medium to Complex |\\n| \ud83d\udcb0\xa0Price per Generation \u2014 via OpenAI\u2019s API | $0.80 to $10.00 | $0.10 to $0.20\xa0|\\n| \ud83d\udcb3\xa0Payment Method | bring your own API key  | free \u2014 paid for by Wasp  |\\n| \ud83d\udc1b\xa0Debugging  | Yes, if you\u2019re willing to tinker | Built-in, but limited |\\n| \ud83d\udde3\xa0Type of Prompt Needed  | Complex and detailed, 1 or more pages (e.g. an entire Product Requirement Doc) | Simple, 1-3 paragraphs |\\n| \ud83d\ude0e\xa0Intended User  | Engineers, Product Designers wanting to generate a broad range of simple prototypes | Web Devs, Product Designers that want a feature rich full-stack web app prototype  |\\n\\nOther big differences lie within: \\n\\n1. Error Correction upon Code Creation\\n    1. Smol AI initially had a debugging script, but this has temporarily deprecated due to the fact that it expects the entire codebase when debugging, and current 32k and 100k token context windows are only available in private beta for GPT4 and Anthropic at the moment.\\n    2. Wasp AI has some error correction baked into its process, as the structure of a Wasp app is more defined and the range of errors are more predictable.\\n2. Price per app generation via OpenAI\u2019s chat completion endpoints \\n    1. Smol AI can cost anywhere from **~$0.80 to $10.00** [depending on the complexity of the app](https://www.youtube.com/watch?v=zsxyqz6SYp8).\\n    2. Wasp AI costs ~**$0.10 to $0.20**\xa0per app, when using the default mix of GPT 4 and GPT 3.5 turbo, but Wasp covers the bill here. If you choose to run [it just with GPT4](https://magic-app-generator.wasp-lang.dev/#:~:text=%5B-,Advanced,-%5D%20Can%20I%20use), then the cost is 10x at\xa0**$1.00 to $2.00** per generation and you have to provide your own API key.\\n3. User Interface\\n    1. Smol Developer works through the command line and has minimal logging and process feedback\\n    2. Wasp AI currently uses a clean web app UI with more logging and feedback, as well as through the command line without a UI (you have to download the [experimental Wasp release](https://magic-app-generator.wasp-lang.dev/#:~:text=%5BAdvanced%5D%20Can%20I%20use%20GPT4%20for%20the%20whole%20app%3F) to do so at this time).\\n\\nOverall, both solutions produce amazing results, allowing solo developers or teams iterate on ideas and generate prototypes faster than before. But they still have a lot of room for improvement.\\n\\nFor example, what these tools lack the most at the moment is in interactive debugging and incremental generation. It would be great if they could allow the user to generate additional code and fix problems in the codebase on the fly, rather than having to go back, rewrite the prompt, and regenerate an entire new codebase.\\n\\nI\u2019m not aware of the Smol AI roadmap, but seeing that it\u2019s received a grant from [Vercel\u2019s AI accelerator program,](https://vercel.com/blog/ai-accelerator-participants) I\u2019m sure we will be seeing development on it continue and the tool improve (let me know in the comments if you do have some insight here).\\n\\nOn the other hand, as I\u2019m a member of the Wasp team, I can confidently say that Wasp will soon be adding the initial generation process and interactive debugging into Wasp\u2019s command line interface!\\n\\nSo I definitely think it\u2019s early days and that these tools will continue to progress \u2014 and continue to produce more impressive results \ud83d\ude80\\n\\n## Which Tool Should You Use?\\n\\nObviously, there can be no clear winner here as the answer to question of which tool you should use as your next \u201cAI Junior Developer\u201d depends largely on your goals.\\n\\nAre you looking for a tool that can generate a broad range of simple apps? And are you interested in learning more about building AI-assisted coding tools and natural language programming and don\u2019t mind tweaking and tinkering for a while? Well then, [Smol-Developer](https://github.com/smol-ai/developer) is what you\u2019re looking for!\\n\\nDo you want to generate a working full-stack React/Node app prototype with all the bells and whistles as quickly and easily as possible? Head straight for Wasp\u2019s [GPT Web App Generator](https://magic-app-generator.wasp-lang.dev/)!\\n\\n:::info Help me help you\\n\ud83c\udf1f **If you haven\u2019t yet, please** [star us on GitHub](https://www.github.com/wasp-lang/wasp), especially if you found this useful! If you do, it helps support us in creating more content like this. And if you don\u2019t\u2026 well, we will deal with it, I guess.\\n\\n![https://media.giphy.com/media/3oEjHEmvj6yScz914s/giphy.gif](https://media.giphy.com/media/3oEjHEmvj6yScz914s/giphy.gif)\\n:::\\n\\nIn general, as Jason \u201cAI Jason\u201d Zhou said:\\n\\n> \u201c*I\u2019m really excited about [AI-assisted coding tools] because if I want to user-test a certain product idea I can ask it to build a prototype very, very quickly, and test with real users\u201d*\\n> \\n\\nJason makes a great point here, that these tools don\u2019t really have the capacity to replace Junior Developers entirely in their current capacity (although they will surely improve in the future), but they do improve the speed and ease with which we can try out novel ideas!\\n\\nI personally believe that in the near future we will see more domain-specific AI-assisted tools like Wasp\u2019s [GPT Web App Generator](https://magic-app-generator.wasp-lang.dev) because of the performance gains they bring to the end user. Code agents that are focused on a niche can produce better results out of the box due to the embedded knowledge. In the future, I think we can expect a lot of agents that are each tailored towards fulfilling a specific task.\\n\\nBut don\u2019t just take my word for it. Go ahead try out [Smol-Developer](https://github.com/smol-ai/developer) and the [GPT Web App Generator](https://magic-app-generator.wasp-lang.dev) for yourself and let me know what you think in the comments!"},{"id":"/2023/07/17/how-we-built-gpt-web-app-generator","metadata":{"permalink":"/wasp-docs/blog/2023/07/17/how-we-built-gpt-web-app-generator","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-07-17-how-we-built-gpt-web-app-generator.md","source":"@site/blog/2023-07-17-how-we-built-gpt-web-app-generator.md","title":"How we built a GPT code agent that generates full-stack web apps in React & Node.js, explained simply","description":"<ImgWithCaption","date":"2023-07-17T00:00:00.000Z","formattedDate":"July 17, 2023","tags":[{"label":"mage","permalink":"/wasp-docs/blog/tags/mage"},{"label":"wasp-ai","permalink":"/wasp-docs/blog/tags/wasp-ai"},{"label":"GPT","permalink":"/wasp-docs/blog/tags/gpt"}],"readingTime":22.68,"hasTruncateMarker":false,"authors":[{"name":"Martin Sosic","title":"Co-founder & CTO @ Wasp","url":"https://github.com/martinsos","email":"martin@wasp-lang.dev","imageURL":"https://github.com/martinsos.png","key":"martinsos"}],"frontMatter":{"title":"How we built a GPT code agent that generates full-stack web apps in React & Node.js, explained simply","authors":["martinsos"],"image":"/img/how-we-built-gpt-wasp/generator-logs.png","tags":["mage","wasp-ai","GPT"]},"prevItem":{"title":"Smol AI \ud83d\udc23 vs. Wasp AI \ud83d\udc1d - Which is the Better AI Junior Developer?","permalink":"/wasp-docs/blog/2023/08/01/smol-ai-vs-wasp-ai"},"nextItem":{"title":"GPT Web App Generator - Let AI create a full-stack React & Node.js codebase based on your description \ud83e\udd16\ud83e\udd2f","permalink":"/wasp-docs/blog/2023/07/10/gpt-web-app-generator"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<ImgWithCaption\\n  source=\\"img/how-we-built-gpt-wasp/generator-logs-yellow.png\\"\\n/>\\n\\nWe created [GPT Web App Generator](https://magic-app-generator.wasp-lang.dev/), which lets you shortly describe the web app you would like to create, and in a matter of minutes, a full-stack codebase, written in React, Node.js, Prisma, and Wasp, will be generated right in front of you, and available to download and run locally!\\n\\nWe started this as an experiment, to see how well we could use GPT to generate full-stack web apps in [Wasp](https://wasp-lang.dev/), the open-source JS web app framework that we are developing. Since we launched, we had more than 3000 apps generated in just a couple of days!\\n\\n<ImgWithCaption\\n  source=\\"img/gpt-wasp/how-it-works.gif\\"\\n  caption=\\"1. Describe your app 2. Pick the color 3. Generate your app \ud83d\ude80\\"\\n/>\\n\\nCheck out [this blog post](https://wasp-lang.dev/blog/2023/07/10/gpt-web-app-generator) to see GPT Web App Generator in action, including a one-minute demo video, few example apps, and learn a bit more about our plans for the future. Or, try it out yourself at https://magic-app-generator.wasp-lang.dev/ !\\n\\nIn this blog post, **we are going to explore the technical side of creating the GPT Web App Generator**: techniques we used, how we engineered our prompts, challenges we encountered, and choices we made! (Note from here on we will just refer to it as the \u201cGenerator\u201d, or \u201ccode agent\u201d when talking about the backend)\\n\\nAlso, all the code behind the Generator is open source: [web app](https://github.com/wasp-lang/wasp/blob/737ab428edf38f245cd9f8db60b637b723352e55/wasp-ai), [GPT code agent](https://github.com/wasp-lang/wasp/blob/737ab428edf38f245cd9f8db60b637b723352e55/waspc/src/Wasp/AI).\\n\\n## How well does it work \ud83e\udd14?\\n\\nFirst, let\u2019s quickly explain what we ended up with and how it performs.\\n\\nInput into our Generator is the app name, app description (free form text), and a couple of simple options such as primary app color, temperature, auth method, and GPT model to use.\\n\\n<ImgWithCaption\\n  source=\\"img/how-we-built-gpt-wasp/todo-input.png\\"\\n  caption=\\"Input for generating a Todo app\\"\\n/>\\n\\nAs an output, Generator spits out the whole JS codebase of a working full-stack web app: frontend, backend, and database. Frontend is React + Tailwind, the backend is NodeJS with Express, and for working with the database we used Prisma. This is all connected together with the Wasp framework.\\n\\nYou can see an example of generated codebase here: [https://magic-app-generator.wasp-lang.dev/result/07ed440a-3155-4969-b3f5-2031fb1f622f](https://magic-app-generator.wasp-lang.dev/result/07ed440a-3155-4969-b3f5-2031fb1f622f) .\\n\\n<ImgWithCaption\\n  source=\\"img/how-we-built-gpt-wasp/todo-results.png\\"\\n  caption=\\"Result of generating a Todo app\\"\\n/>\\n\\nGenerator does its best to produce code that works out of the box \u2192 you can download it to your machine and run it. For simpler apps, such as [TodoApp](https://magic-app-generator.wasp-lang.dev/result/07ed440a-3155-4969-b3f5-2031fb1f622f) or [MyPlants](https://magic-app-generator.wasp-lang.dev/result/3bb5dca2-f134-4f96-89d6-0812deab6e0c), it often generates code with no mistakes, and you can run them out of the box.\\n\\n<ImgWithCaption\\n  source=\\"img/gpt-wasp/todo-app.png\\"\\n  caption=\\"What generated TodoApp looks like\\"\\n/>\\n\\nFor a bit more complex apps, like a blog with posts and comments, it still generates a reasonable codebase but there are some mistakes to be expected here and there. For even more complex apps, it usually doesn\u2019t follow up completely, but stops at some level of complexity and fills in the rest with TODOs or omits functionality, so it is kind of like a simplified model of what was asked for. Overall, it is optimized for producing CRUD business web apps.\\n\\nThis makes it a great tool for kick-starting your next web app project with a solid prototype, or to even generate working, simple apps on the fly!\\n\\n## How does it work \u2699\ufe0f?\\n\\nWhen we set out to build the Generator, we gave ourselves the following goals:\\n\\n- we must be able to build it in a couple of weeks\\n- it has to be relatively easy to maintain in the future\\n- it needs to generate the app quickly and cheaply (a couple of minutes, < $1)\\n- generated apps should have as few mistakes as possible\\n\\nTherefore, to keep it simple, we don\u2019t do any LLM-level engineering or fine-tuning, instead, **we just use OpenAI API (specifically GPT3.5 and GPT4) to generate different parts of the app while giving it the right context at every moment (pieces of docs, examples, guidelines, \u2026)**. To ensure the coherence and quality of the generated app, we don\u2019t give our code agent too much freedom but instead heavily guide it, step by step, through generating the app.\\n\\nAs **step zero**, we generate some code files deterministically, without GPT, just based on the options that the user chose (primary color, auth method): those include some config files for the project, some basic global CSS, and some auth logic. You can see this logic here (we call those \u201cskeleton\u201d files): [code on Github](https://github.com/wasp-lang/wasp/blob/737ab428edf38f245cd9f8db60b637b723352e55/waspc/src/Wasp/AI/GenerateNewProject/Skeleton.hs) .\\n\\nThen, the code agent takes over!\\n\\n**The code agent does its work in 3 main phases**:\\n\\n1. **Planning \ud83d\udcdd**\\n2. **Generating \ud83c\udfed**\\n3. **Fixing \ud83d\udd27**\\n\\nSince GPT4 is quite slower and significantly more expensive than GPT3.5 (also has a lower rate limit regarding the number of tokens per minute, and also the number of requests per minute), we use GPT4 only for the planning, since that is the crucial step, and then after that, we use GPT3.5 for the rest.\\n\\nAs for **cost per app** \ud83d\udcb8: one app typically consumes from 25k to 60k tokens, which comes to about **$0.1 to $0.2** per app, when we use a mix of GPT4 and GPT3.5. If we run it just with GPT4, then the cost is 10x, which is from **$1 to $2**.\\n\\n### \ud83c\udfb6 Intermezzo: short explanation of OpenAI Chat Completions API\\n\\nOpenAI API offers different services, but we used only one of them: \u201cchat completions\u201d.\\n\\n**API itself is actually very simple: you send over a conversation, and you get a response from the GPT.**\\n\\nThe conversation is just a list of messages, where each message has content and a role, where the role specifies who \u201csaid\u201d that content \u2192 was it \u201cuser\u201d (you), or \u201cassistant\u201d (GPT).\\n\\nThe important thing to note is that **there is no concept of state/memory: every API call is completely standalone**, and the only thing that GPT knows about is the conversation you provide it with at that moment!\\n\\nIf you are wondering how ChatGPT (the web app that uses GPT in the background) works with no memory \u2192 well, each time you write a message, the whole conversation so far is resent again! There are some additional smart mechanisms in play here, but that is really it at its core.\\n\\n[Official guide](https://platform.openai.com/docs/guides/gpt/chat-completions-api), [official API reference](https://platform.openai.com/docs/api-reference/chat/create).\\n\\n### Step #1: Planning \ud83d\udcdd\\n\\nA Wasp app consists of Entities (Prisma data models), Operations (NodeJS Queries and Actions), and Pages (React).\\n\\nOnce given an app description and title, **the code agent first generates a Plan**: it is a list of Entities, Operations (Queries and Actions), and Pages that comprise the app. So kind of like an initial draft of the app. It doesn\u2019t generate the code yet \u2192 instead, it comes up with their names and some other details, including a short description of what they should behave like.\\n\\n<ImgWithCaption\\n  source=\\"img/how-we-built-gpt-wasp/gen-logs-planning.png\\"\\n/>\\n\\nThis is done via a single API request toward GPT, where the prompt consists of the following:\\n\\n - Short **info about the Wasp** framework + an example of some Wasp code.\\n - We **explain that we want to generate the Plan**, explain what it is, and how it is represented as **JSON**, by describing its schema.\\n - We provide some **examples of the Plan**, represented as JSON.\\n - Some **rules and guidelines** we want it to follow (e.g. \u201cplan should have at least 1 page\u201d, \u201cmake sure to generate a User entity\u201d).\\n - Instructions to return the Plan only as a **valid JSON response**, and no other text.\\n - **App name and description** (as provided by the user).\\n\\nYou can see how we generate such a prompt in the code [here](https://github.com/wasp-lang/wasp/blob/737ab428edf38f245cd9f8db60b637b723352e55/waspc/src/Wasp/AI/GenerateNewProject/Plan.hs#L61).\\n\\n<details>\\n  <summary> Also, here is an actual instance of this prompt for a TodoApp. </summary>\\n  <div>\\n\\n    Wasp is a full-stack web app framework that uses React (for client), NodeJS and Prisma (for server).\\n    High-level of the app is described in main.wasp file (which is written in special Wasp DSL), details in JS/JSX files.\\n    Wasp DSL (used in main.wasp) reminds a bit of JSON, and doesn\'t use single quotes for strings, only double quotes. Examples will follow.\\n\\n    Important Wasp features:\\n      - Routes and Pages: client side, Pages are written in React.\\n      - Queries and Actions: RPC, called from client, execute on server (nodejs).\\n        Queries are for fetching and should not do any mutations, Actions are for mutations.\\n      - Entities: central data models, defined via PSL (Prisma schema language), manipulated via Prisma.\\n    Typical flow: Routes point to Pages, Pages call Queries and Actions, Queries and Actions work with Entities.\\n\\n    Example main.wasp (comments are explanation for you):\\n\\n    ```wasp\\n    app todoApp {\\n      wasp: { version: \\"^0.11.1\\" },\\n      title: \\"ToDo App\\",\\n      auth: {\\n        userEntity: User,\\n        methods: { usernameAndPassword: {} },\\n        onAuthFailedRedirectTo: \\"/login\\"\\n      },\\n      client: {\\n        rootComponent: import { Layout } from \\"@client/Layout.jsx\\",\\n      },\\n      db: {\\n        prisma: {\\n          clientPreviewFeatures: [\\"extendedWhereUnique\\"]\\n        }\\n      },\\n    }\\n\\n    route SignupRoute { path: \\"/signup\\", to: SignupPage }\\n    page SignupPage {\\n      component: import Signup from \\"@client/pages/auth/Signup.jsx\\"\\n    }\\n\\n    route LoginRoute { path: \\"/login\\", to: LoginPage }\\n    page LoginPage {\\n      component: import Login from \\"@client/pages/auth/Login.jsx\\"\\n    }\\n\\n    route DashboardRoute { path: \\"/\\", to: Dashboard }\\n    page DashboardPage {\\n      authRequired: true,\\n      component: import Dashboard from \\"@client/pages/Dashboard.jsx\\"\\n    }\\n\\n    entity User {=psl\\n        id          Int       @id @default(autoincrement())\\n        username    String    @unique\\n        password    String\\n        tasks       Task[]\\n    psl=}\\n\\n    entity Task {=psl\\n        id          Int       @id @default(autoincrement())\\n        description String\\n        isDone      Boolean   @default(false)\\n        user        User      @relation(fields: [userId], references: [id])\\n        userId      Int\\n    psl=}\\n\\n    query getUser {\\n      fn: import { getUser } from \\"@server/queries.js\\",\\n      entities: [User] // Entities that this query operates on.\\n    }\\n\\n    query getTasks {\\n      fn: import { getTasks } from \\"@server/queries.js\\",\\n      entities: [Task]\\n    }\\n\\n    action createTask {\\n      fn: import { createTask } from \\"@server/actions.js\\",\\n      entities: [Task]\\n    }\\n\\n    action updateTask {\\n      fn: import { updateTask } from \\"@server/actions.js\\",\\n      entities: [Task]\\n    }\\n    ```\\n\\n    We are looking for a plan to build a new Wasp app (description at the end of prompt).\\n\\n    Instructions you must follow while generating plan:\\n      - App uses username and password authentication.\\n      - App MUST have a \'User\' entity, with following fields required:\\n      - `id Int @id @default(autoincrement())`\\n      - `username String @unique`\\n      - `password String`\\n    It is also likely to have a field that refers to some other entity that user owns, e.g. `tasks Task[]`.\\n      - One of the pages in the app must have a route path \\"/\\".\\n      - Don\'t generate the Login or Signup pages and routes under any circumstances. They are already generated.\\n\\n    Plan is represented as JSON with the following schema:\\n\\n    {\\n      \\"entities\\": [{ \\"entityName\\": string, \\"entityBodyPsl\\": string }],\\n      \\"actions\\": [{ \\"opName\\": string, \\"opFnPath\\": string, \\"opDesc\\": string }],\\n      \\"queries\\": [{ \\"opName\\": string, \\"opFnPath\\": string, \\"opDesc\\": string }],\\n      \\"pages\\": [{ \\"pageName\\": string, \\"componentPath\\": string, \\"routeName\\": string, \\"routePath\\": string, \\"pageDesc\\": string }]\\n    }\\n\\n    Here is an example of a plan (a bit simplified, as we didn\'t list all of the entities/actions/queries/pages):\\n\\n    {\\n      \\"entities\\": [{\\n        \\"entityName\\": \\"User\\",\\n        \\"entityBodyPsl\\": \\"  id Int @id @default(autoincrement())\\\\n  username String @unique\\\\n  password String\\\\n  tasks Task[]\\"\\n      }],\\n      \\"actions\\": [{\\n        \\"opName\\": \\"createTask\\",\\n        \\"opFnPath\\": \\"@server/actions.js\\",\\n        \\"opDesc\\": \\"Checks that user is authenticated and if so, creates new Task belonging to them. Takes description as an argument and by default sets isDone to false. Returns created Task.\\"\\n      }],\\n      \\"queries\\": [{\\n        \\"opName\\": \\"getTask\\",\\n        \\"opFnPath\\": \\"@server/queries.js\\",\\n        \\"opDesc\\": \\"Takes task id as an argument. Checks that user is authenticated, and if so, fetches and returns their task that has specified task id. Throws HttpError(400) if tasks exists but does not belong to them.\\"\\n      }],\\n      \\"pages\\": [{\\n        \\"pageName\\": \\"TaskPage\\",\\n        \\"componentPath\\": \\"@client/pages/Task.jsx\\",\\n        \\"routeName: \\"TaskRoute\\",\\n        \\"routePath\\": \\"/task/:taskId\\",\\n        \\"pageDesc\\": \\"Diplays a Task with the specified taskId. Allows editing of the Task. Uses getTask query and createTask action.\\",\\n      }]\\n    }\\n\\n    We will later use this plan to write main.wasp file and all the other parts of Wasp app,\\n    so make sure descriptions are detailed enough to guide implementing them.\\n    Also, mention in the descriptions of actions/queries which entities they work with,\\n    and in descriptions of pages mention which actions/queries they use.\\n\\n    Typically, plan will have AT LEAST one query, at least one action, at least one page, and at\\n    least two entities. It will very likely have more than one of each, though.\\n\\n    DO NOT create actions for login and logout under any circumstances. They are already included in Wasp.\\n\\n    Note that we are using SQLite as a database for Prisma, so don\'t use scalar arrays in PSL, like `String[]`,\\n    as those are not supported in SQLite. You can of course normally use arrays of other models, like `Task[]`.\\n\\n    Please, respond ONLY with a valid JSON that is a plan.\\n    There should be no other text in the response.\\n\\n    ==== APP DESCRIPTION: ====\\n\\n    App name: TodoApp\\n    A simple todo app with one main page that lists all the tasks. User can create new tasks by providing their description, toggle existing ones, or edit their description. User owns tasks. User can only see and edit their own tasks. Tasks are saved in the database.\\n  </div>\\n\\n</details>\\n    \\n\\nGPT then responds with a JSON (hopefully), that we parse, and we have ourselves a Plan! We will use this Plan in the following steps, to drive our generation of other parts of the app. Note that GPT sometimes adds text to the JSON response or returns invalid JSON, so we built in some simple approaches to overcome these issues, which we explain in detail later.\\n\\n### \ud83c\udfb6 Intermezzo: Common prompt design\\n\\nThe prompt design we just described above for generating a Plan is actually very similar for other steps (e.g. the Generation and Fixing steps along with their respective sub-steps), so let\u2019s cover those commonalities.\\n\\nAll of the prompts we use more or less adhere to the same basic structure:\\n\\n- **General context**\\n    - Short info about what Wasp framework is.\\n    - Doc snippets (with code examples if needed) about whatever we are generating right now (e.g. examples of NodeJS code, or examples of React code).\\n- **Project context**: stuff we generated in the previous steps that is relevant to the current step.\\n- Instructions on **what we want to generate right now** + JSON schema for it + example of such JSON response.\\n- **Rules and guidelines**: this is a good place to warn it about common mistakes it makes, or give it some additional advice, and emphasize what needs to happen and what must not happen.\\n- Instructions to **respond only with a valid JSON**, and no other text.\\n- **Original user prompt**: app name and description (as provided by the user).\\n\\nWe put the original user prompt at the end because then we can tell GPT in the system message after it sees the start of the original user prompt (we have a special header for it), that it needs to treat everything after it as an app description and not as instructions on what to do \u2192 this way we attempt to **defend from the potential prompt injection**.\\n\\n### Step #2: Generating \ud83c\udfed\\n\\nAfter producing the Plan, Generator goes step by step through the Plan and asks GPT to generate each web app piece, while providing it with docs, examples, and guidelines. Each time a web app piece is generated, Generator fits it into the whole app. This is where most of our work comes in: **equipping GPT with the right information at the right moment**.\\n\\n<ImgWithCaption\\n  source=\\"img/how-we-built-gpt-wasp/gen-logs-generating.png\\"\\n/>\\n\\nIn our case, we do it for all the Operations in the Plan (Actions and Queries: NodeJs code), and also for all the Pages in the Plan (React code), with one prompt for each. So if we have 2 queries, 3 actions, and 2 pages, that will be 2+3+2 = 7 GPT prompts/requests. Prompts are designed as explained previously.\\n\\nCode on Github: [generating an Operation](https://github.com/wasp-lang/wasp/blob/737ab428edf38f245cd9f8db60b637b723352e55/waspc/src/Wasp/AI/GenerateNewProject/Operation.hs), [generating a Page](https://www.notion.so/Postavi-da-mijenjamo-verziju-cabala-stalno-https-github-com-wasp-lang-wasp-issues-892-fb4f0edb0a024951ad236f82030008a5?pvs=21).\\n\\nWhen generating Operations, we provide GPT with the info about the previously generated Entities, while when generating Pages, we provide GPT with the info about previously generated Entities and Operations.\\n\\n### Step #3: Fixing \ud83d\udd27\\n\\nFinally, the Generator tries its best to fix any mistakes that GPT might have introduced previously. **GPT loves fixing stuff it previously generated** \u2192 if you first ask it to generate some code, and then just tell it to fix it, it will often improve it!\\n\\nTo enhance this process further, we don\u2019t just ask it to fix previous code, but also provide it with instructions on what to keep an eye out for, like common types of mistakes that we noticed it often does, and also point it to any specific mistakes we were able to detect on our own.\\n\\nRegarding detecting mistakes to report to GPT, **ideally, you would have a full REPL going on** \u2192 that means running the generated code through an interpreter/compiler, then sending it for repairs, and so on until all is fixed.\\n\\nIn our case, running the whole project through the TypeScript compiler was not feasible for us with the time limits we put on ourselves, but **we used some simpler static analysis tools** like Wasp\u2019s compiler (for the .wasp file) and `prisma format` for Prisma model schemas, and sent those to GPT to fix them. We also wrote some **simple heuristics of our own that are able to detect some of the common mistakes**.\\n\\n<ImgWithCaption\\n  source=\\"img/how-we-built-gpt-wasp/gen-logs-fixing.png\\"\\n/>\\n\\n[Our code (& prompt) for fixing a Page](https://github.com/wasp-lang/wasp/blob/737ab428edf38f245cd9f8db60b637b723352e55/waspc/src/Wasp/AI/GenerateNewProject/PageComponentFile.hs#L122).\\n\\n[Our code (& prompt) for fixing Operations](https://github.com/wasp-lang/wasp/blob/737ab428edf38f245cd9f8db60b637b723352e55/waspc/src/Wasp/AI/GenerateNewProject/OperationsJsFile.hs#L26).\\n\\nIn the prompt, we would usually repeat the same guidelines we provided previously in the Generation step, while also adding a couple of additional pointers to common mistakes, and that usually helps, it fixes stuff it missed before. But, often not everything, instead something will still get through. **Some things we just couldn\u2019t get it to fix consistently**, for example, Wasp-specific JS imports, no matter how much we emphasized what it needed to do with them, it would just keep messing them up. Even GPT4 wasn\u2019t perfect in this situation. For such situations, when possible, we ended up writing **our own heuristics that would fix those mistakes** ([fixing JS imports](https://github.com/wasp-lang/wasp/blob/737ab428edf38f245cd9f8db60b637b723352e55/waspc/src/Wasp/AI/GenerateNewProject/PageComponentFile.hs#L49)).\\n\\n## Things we tried/learned\\n\\n### Explanations \ud83d\udcac\\n\\nWe tried telling GPT to explain what it did while fixing mistakes: which mistakes it will fix, and which mistakes it fixed, since we read that that can help, but **we didn\u2019t see visible improvement in its performance**.\\n\\n### Testing \ud83e\uddea\\n\\nTesting the performance of your code agent is hard.\\n\\nIn our case, it takes a couple of minutes for our code agent to generate a new app, and you need to run tests directly with the OpenAI API. Also, **since results are non-deterministic, it can be pretty hard to say if output was affected by the changes** you did or not.\\n\\nFinally, evaluating the output itself can be hard (especially in our case when it is a whole full-stack web app).\\n\\nIdeally, we would have set up a system where we can run only parts of the whole generation process, and we could automatically run a specific part a number of times for each of different sets of parameters (which would include different prompts, but also parameters like type of model (gpt4 vs gpt3.5), temperature and similar), in order to compare performance for each of those parameter sets.\\n\\nEvaluation performance would also ideally be automated, e.g. we would count the mistakes during compilation and/or evaluate the quality of app design \u2192 but this is also quite hard.\\n\\nWe, unfortunately, didn\u2019t have time to set up such a system, so **we were mostly doing testing manually, which is quite subjective and vulnerable to randomness**, and is effective only for changes that have quite a big impact, while you can\u2019t really detect those that are minor optimizations.\\n\\n### Context vs smarts \ud83e\udde0\\n\\nWhen we started working on the Generator, we thought the size of GPT\u2019s context would be the main issue. However, we didn\u2019t have any issues with context at the end \u2192 most of what we wanted to specify would fit into 2k to max 4k tokens, while GPT3.5 has context up to 16k!\\n\\nInstead, **we had bigger problems with its \u201csmarts\u201d** \u2192 meaning that GPT would not follow the rules we very explicitly told it to follow, or would do things we explicitly forbid it from doing. GPT4 proved to be better at following rules than GPT3.5, but even GPT4 would keep doing some mistakes over and over and forgetting about specific rules (even though there was more than enough context). The \u201cfixing\u201d step did help with this: we would repeat the rules there and GPT would pick up more of them, but often still not all of them.\\n\\n### Handling JSON as a response \ud83d\udccb\\n\\nAs mentioned earlier in this article, in all our interactions with GPT, we always ask it to return the response as JSON, for which we specify the schema and give some examples.\\n\\nHowever, GPT still doesn\u2019t always follow that rule, and will sometimes add some text around the JSON, or will make a mistake in formatting JSON.\\n\\nThe way we handled this is with two simple fixes:\\n\\n1. Upon receiving JSON, we would remove all the characters from the start until we hit `{`, and also all chars from the end until we hit `}`. Simple heuristic, but it works very well for removing redundant text around the JSON in practice since GPT will normally not have any `{` or `}` in that text.\\n2. If we fail to parse JSON, we send it again for repairs, to GPT. We include the previous prompt and its last answer (that contains invalid JSON) and add instructions to fix it + JSON parse errors we got. We repeat this a couple of times until it gets it right (or until we give up).\\n\\nIn practice, **these two methods took care of invalid JSON in 99% of the cases for us**.\\n\\nNOTE: While we were implementing our code agent, OpenAI released new functionality for GPT, \u201cfunctions\u201d, which is basically a mechanism to have GPT respond with a structured JSON, following the schema of your description. So it would likely make more sense to do this with \u201cfunctions\u201d, but we already had this working well so we just stuck with it.  \\n\\n### Handling interruptions in the service \ud83d\udea7\\n\\nWe were calling OpenAI API directly, so we noticed quickly that often it would return 503 - service unavailable - especially during peak hours (e.g. 3 pm CET).\\n\\nTherefore, it is recommended to have some kind of retry mechanism, ideally with exponential backoff, that makes your code agent redundant to such random interruptions in the service, and also to potential rate limiting. **We went with the retry mechanism with exponential backoff and it worked great**.\\n\\n### Temperature \ud83c\udf21\ufe0f\\n\\nTemperature determines how creative GPT is, but the more creative it gets, the less \u201cstable\u201d it is. It hallucinates more and also has a harder time following rules.\\nA temperature is a number from 0 to 2, with a default value of 1.\\n\\nWe experimented with different values and found the following:\\n\\n- **\u2265 1.5** would every so and so start giving quite silly results with random strings in it.\\n- **\u2265 1.0, < 1.5** was okish but was introducing a bit too many mistakes.\\n- **\u2265 0.7, < 1.0** was optimal \u2192 creative enough, while still not having many mistakes.\\n- **\u2264 0.7** seemed to perform similarly to a bit higher values, but with a bit less creativity maybe.\\n\\nThat said, I don\u2019t think we tested values below 0.7 enough, and that is something we could certainly work on more.\\n\\n**We ended up using 0.7 as our default value, except for prompts that do fixing, for those we used a lower value of 0.5** because it seemed like GPT was changing stuff too much while fixing at 0.7 (being too creative). Our logic was: let it be creative when writing the first version of the code, then have it be a bit more conventional while fixing it. Again, we haven\u2019t tested all this enough, so this is certainly something I would like us to explore more. \\n\\n## Future \ud83d\udd2e\\n\\nWhile we ended up being impressed with the performance of what we managed to build in such a short time, we were also left wanting to try so many different ideas on how to improve it further. There are many avenues left to be explored in this ecosystem that is developing so rapidly, that it is hard to reach the point where you feel like you explored all the options and found the optimal solution.\\n\\nSome of the ideas that would be exciting to try in the future:\\n\\n1. We put quite a few limitations regarding the code that our code agent generates, to make sure it works well enough: we don\u2019t allow it to create helper files, to include npm dependencies, no TypeScript, no advanced Wasp features, \u2026 . **We would love to lift the limitations**, therefore allowing the creation of more complex and powerful apps.\\n\\n2. Instead of our code agent doing everything in one shot, we could **allow the user to interact with it** after the first version of the app is generated: to provide additional prompts, for example, to fix something, to add some feature to the app, to do something differently, \u2026. The hardest thing here would be figuring out which context to provide to the GPT at which moment and designing the experience appropriately, but I am certain it is doable, and it would take the Generator to the next level of usability.\\nAnother option is to allow intervention in between initial generation steps \u2192 for example, after the plan is generated, to allow the user to adjust it by providing additional instructions to the GPT.\\n\\n3. Find an open-source **LLM that fits the purpose and fine-tune / pre-train it for our purpose**. If we could teach it more about Wasp and the technologies we use, so we don\u2019t have to include it in every prompt, we could save quite some context + have the LLM be more focused on the rules and guidelines we are specifying in the prompt. We could also host it ourselves and have more control over the costs and rate limits.\\n\\n4. Take a **different approach to the code agent: let it be more free**. Instead of guiding it so carefully, we could teach it about all the different things it is allowed to ask for (ask for docs, ask for examples, ask to generate a certain piece of the app, ask to see a certain already generated piece of the app, \u2026) and would let it guide itself more freely. It could constantly generate a plan, execute it, update the plan, and so on until it reaches the state of equilibrium. This approach potentially promises more flexibility and would likely be able to generate apps of greater complexity, but it also requires quite more tokens and a powerful LLM to drive it \u2192 I believe this approach will become more feasible as LLMs become more capable.\\n\\n\\n## Support us! \u2b50\ufe0f\\n\\nIf you wish to express your support for what we are doing, consider giving us a [star on Github](https://github.com/wasp-lang/wasp)! Everything we do at Wasp is open source, and your support motivates us and helps us to keep making web app development easier and with less boilerplate.\\n\\nAlso, if you have any ideas on how we could improve our code agent, or maybe we can help you somehow -> feel free to join our [Discord server](https://discord.gg/rzdnErX) and let\'s chat!"},{"id":"/2023/07/10/gpt-web-app-generator","metadata":{"permalink":"/wasp-docs/blog/2023/07/10/gpt-web-app-generator","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-07-10-gpt-web-app-generator.md","source":"@site/blog/2023-07-10-gpt-web-app-generator.md","title":"GPT Web App Generator - Let AI create a full-stack React & Node.js codebase based on your description \ud83e\udd16\ud83e\udd2f","description":"<ImgWithCaption","date":"2023-07-10T00:00:00.000Z","formattedDate":"July 10, 2023","tags":[{"label":"wasp-ai","permalink":"/wasp-docs/blog/tags/wasp-ai"},{"label":"mage","permalink":"/wasp-docs/blog/tags/mage"},{"label":"GPT","permalink":"/wasp-docs/blog/tags/gpt"}],"readingTime":5.18,"hasTruncateMarker":false,"authors":[{"name":"Martin Sosic","title":"Co-founder & CTO @ Wasp","url":"https://github.com/martinsos","email":"martin@wasp-lang.dev","imageURL":"https://github.com/martinsos.png","key":"martinsos"}],"frontMatter":{"title":"GPT Web App Generator - Let AI create a full-stack React & Node.js codebase based on your description \ud83e\udd16\ud83e\udd2f","authors":["martinsos"],"image":"/img/gpt-wasp/gpt-wasp-thumbnail.png","tags":["wasp-ai","mage","GPT"]},"prevItem":{"title":"How we built a GPT code agent that generates full-stack web apps in React & Node.js, explained simply","permalink":"/wasp-docs/blog/2023/07/17/how-we-built-gpt-web-app-generator"},"nextItem":{"title":"Tutorial Jam #1 - Teach Others & Win Prizes!","permalink":"/wasp-docs/blog/2023/06/30/tutorial-jam"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<ImgWithCaption\\n    source=\\"img/gpt-wasp/thumbnail-yellow.png\\"\\n/>\\n\\nThis project started out as an experiment - we were interested if, given a short description, GPT can generate a full-stack web app in React & Node.js. The results went beyond our expectations!\\n\\n## How it works\\n\\nAll you have to do in order to use [GPT Web App Generator](https://magic-app-generator.wasp-lang.dev/) is **provide a short description of your app idea in plain English**. You can optionally select your app\'s brand color and the preferred authentication method (more methods coming soon).\\n\\n<ImgWithCaption\\n    source=\\"img/gpt-wasp/how-it-works.gif\\"\\n    caption=\\"1. Describe your app 2. Pick the color 3. Generate your app \ud83d\ude80\\"\\n/>\\n\\nThat\'s it - in a matter of minutes, a full-stack web app codebase, written in React, Node.js, Prisma, and Wasp, will be generated right in front of you, and available for you to download, run it locally and deploy with a single CLI command!\\n\\nSee a full one-minute demo here:\\n<div className=\'flex justify-center\'>\\n    <iframe width=\\"700\\" height=\\"400\\" src=\\"https://www.youtube.com/embed/u0MVsPb2MP8\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n</div>\\n\\n<br/>\\n\\nCheck out [this blog post](https://wasp-lang.dev/blog/2023/07/17/how-we-built-gpt-web-app-generator) if you are interested in technical details of how implemented the Generator!\\n\\n## The stack \ud83d\udcda\\n\\nBesides React & Node.js, GPT Web App Generator uses [Prisma](https://www.prisma.io/) and [Wasp](https://github.com/wasp-lang/wasp).\\n\\n[Prisma](https://www.prisma.io/) is a type-safe database ORM built on top of PostgreSQL. It makes it easy to deal with data models and database migrations.\\n\\n[Wasp](https://github.com/wasp-lang/wasp) is a batteries-included, full-stack framework for React & Node.js. It takes care of everything from front-end to back-end and database along with authentication, sending emails, async jobs, deployment, and more.\\n\\nAdditionaly, all the code behind GPT Web App Generator is completely open-source: [web app](https://github.com/wasp-lang/wasp/tree/main/mage), [GPT code agent](https://github.com/wasp-lang/wasp/tree/main/waspc/src/Wasp/AI).\\n\\n## What kind of apps can I build with it?\\n:::caution\\n\\nSince this is a GPT-powered project, it\'s output is not 100% deterministic and small mistakes will sometimes occur in the generated code. For the typical examples of web apps (as seen below) they are usually very minor and straightforward to fix.\\nIf you get stuck, [ping us on our Discord](https://discord.gg/rzdnErX).\\n\\n:::\\n\\nThe generated apps are full-stack and consist of front-end, back-end and database. Here are few of the examples we successfully created:\\n\\n### My Plants - track your plants\' watering schedule \ud83c\udf31\ud83d\udeb0\\n\\n<ImgWithCaption\\n    source=\\"img/gpt-wasp/my-plants.png\\"\\n/>\\n\\n- See the generated code and run it yourself [here](https://magic-app-generator.wasp-lang.dev/result/3bb5dca2-f134-4f96-89d6-0812deab6e0c)\\n\\nThis app does exactly what it says - makes sure that you water your plants on time! It comes with a fully functioning front-end, back-end and the database with `User` and `Plant` entities. It also features a [full-stack authentication](/blog/2023/04/12/auth-ui) (username & password) and a Tailwind-based design.\\n\\nThe next step would be to add more advanced features, such as email reminders (via [Wasp email sending support](/docs/advanced/email)) when it is time to water your plant.\\n\\nYou can see and download the [entire source code](https://magic-app-generator.wasp-lang.dev/result/3bb5dca2-f134-4f96-89d6-0812deab6e0c) and add more features and deploy the app yourself!\\n\\n### ToDo app - a classic \u2705\\n\\n<ImgWithCaption\\n    source=\\"img/gpt-wasp/todo-app.png\\"\\n/>\\n\\n- See the generated code and run it yourself [here](https://magic-app-generator.wasp-lang.dev/result/07ed440a-3155-4969-b3f5-2031fb1f622f)\\n\\nWhat kind of a demo would this be if it didn\'t include a ToDo app? GPT Web App Generator successfully scaffolded it, along with all the basic functionality - creating and marking a task as done.\\n\\nWith the foundations in place (full-stack code, authentication, Tailwind CSS design) you can [see & download the code here](https://magic-app-generator.wasp-lang.dev/result/07ed440a-3155-4969-b3f5-2031fb1f622f) and try it yourself!\\n\\n### Limitations\\n\\nIn order to reduce the complexity and therefore mistakes GPT makes, for this first version of Generator we went with the following limitations regarding generated apps:\\n\\n1. No additional npm dependencies.\\n2. No additional files beyond Wasp Pages (React) and Operations (Node). So no additional files with React components, CSS, utility JS, images or similar.\\n3. No TypeScript, just Javascript.\\n4. No advanced Wasp features (e.g. Jobs, Auto CRUD, Websockets, Social Auth, email sending, \u2026).\\n\\n## Summary & next steps\\n\\nAs mentioned above, our goal was to test whether GPT can be effectively used to generate full-stack web applications with React & Node.js. While it\'s now obvious it can, we have lot of ideas for new features and improvements.\\n\\n### Challenges\\nWhile we were expecting the main issue to be the size of context that GPT has, it turned out to be that the bigger issue is its \u201csmarts\u201d, which determine things like its planning capabilities, capacity to follow provided instructions (we had quite some laughs observing how it sometimes ignores our instructions), and capacity to not do silly mistakes. We saw GPT4 give better results than GPT3.5, but both still make mistakes, and GPT4 is also quite slow/expensive. Therefore we are quite excited about the further developments in the field of AI / LLMs, as they will directly affect the quality of the output for the tools like our Generator.\\n\\n### Next features wishlist\\n\\n1. Get feedback on this initial experiment - both on the Generator and the Wasp as a framework itself: best place to leave us feedback is on our [Discord](https://discord.com/invite/rzdnErX).\\n2. Further improve code agent & web app.\\n3. Release new version of `wasp` CLI that allows generating new Wasp project by providing short description via CLI. Our code agent will then use GPT to generate project on the disk. This is already ready and should be coming out soon.\\n4. Also allow Wasp users to use code agent for scaffolding specific parts of their Wasp app \u2192 you want to add a new Wasp Page (React)? Run our code agent via Wasp CLI or via Wasp vscode extension and have it generated for you, with initial logic already implemented.\\n5. As LLMs progress, try some alternative approaches, e.g. try fine-tuning an LLM with knowledge about Wasp, or give LLM more freedom while generating files and parts of the codebase.\\n6. Write a detailed blog post about how we implemented the Generator, which techniques we used, how we designed our prompts, what worked and what didn\u2019t work, \u2026 .\\n\\n## Support us! \u2b50\ufe0f\\n\\nIf you wish to express your support for what we are doing, consider giving us a [star on Github](https://github.com/wasp-lang/wasp)! Everything we do at Wasp is open source, and your support motivates us and helps us to keep making web app development easier and with less boilerplate."},{"id":"/2023/06/30/tutorial-jam","metadata":{"permalink":"/wasp-docs/blog/2023/06/30/tutorial-jam","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-06-30-tutorial-jam.md","source":"@site/blog/2023-06-30-tutorial-jam.md","title":"Tutorial Jam #1 - Teach Others & Win Prizes!","description":"<ImgWithCaption","date":"2023-06-30T00:00:00.000Z","formattedDate":"June 30, 2023","tags":[{"label":"launch-week","permalink":"/wasp-docs/blog/tags/launch-week"},{"label":"product-update","permalink":"/wasp-docs/blog/tags/product-update"}],"readingTime":3.985,"hasTruncateMarker":false,"authors":[{"name":"Vinny","title":"DevRel @ Wasp","url":"https://vincanger.github.io","email":"vince@wasp-lang.dev","imageURL":"https://vincanger.github.io/assets/vince_smiley.jpg","key":"vinny"}],"frontMatter":{"title":"Tutorial Jam #1 - Teach Others & Win Prizes!","authors":["vinny"],"image":"/img/tutorial-jam/tutorial-jam-banner.png","tags":["launch-week","product-update"]},"prevItem":{"title":"GPT Web App Generator - Let AI create a full-stack React & Node.js codebase based on your description \ud83e\udd16\ud83e\udd2f","permalink":"/wasp-docs/blog/2023/07/10/gpt-web-app-generator"},"nextItem":{"title":"Wasp LSP 2.0 - Next-level autocompletion and IDE integration for Wasp projects!","permalink":"/wasp-docs/blog/2023/06/29/new-wasp-lsp"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n\\n<ImgWithCaption\\n    source=\\"img/tutorial-jam/tutorial-jam-banner.png\\"\\n/>\\n\\n## Introduction\\n\\nThe Wasp Tutorial Jam is a contest where participants are required to create a tutorial about building a fullstack React/Node app with Wasp.\\n\\n## Wait, What\u2019s Wasp?\\n\\nFirst of all, it\u2019s sad that you\u2019ve never heard of [Wasp](https://wasp-lang.dev).\\n\\n![https://media0.giphy.com/media/kr5PszPQawIRq/giphy.gif?cid=7941fdc6gwgjf866b0akslgciedh53jf9narttadkglvvcp0&ep=v1_gifs_search&rid=giphy.gif&ct=g](https://media0.giphy.com/media/kr5PszPQawIRq/giphy.gif?cid=7941fdc6gwgjf866b0akslgciedh53jf9narttadkglvvcp0&ep=v1_gifs_search&rid=giphy.gif&ct=g)\\n\\nWasp is a unique fullstack framework for building React/NodeJS/Prisma/Tanstack Query apps.\\n\\nBecause it\u2019s based on a compiler, you write a simple config file, and Wasp can take care of generating the skeleton of your app for you (and regenerating when the config file changes). You can read more about [Wasp here](https://wasp-lang.dev)\\n\\n## Rules\\n\\nThe rules are simple. The tutorial must:\\n\\n- Use Wasp.\\n- Be written in English.\\n- Be original content and not copied from any existing sources.\\n- Be a written tutorial posted to a social blogging platform like [dev.to](http://dev.to) or [hashnode.dev](http://hashnode.dev), or a YouTube video tutorial\\n- Contain the hashtag `#buildwithwasp`\\n- Submitted by pasting the link in the #tutorialjam channel on our [Discord Server](https://discord.gg/rzdnErX)\\n    \\n    AND\\n    \\n- The tutorial can focus on any topic and be any length (short or long) just as long as it uses Wasp\u2019s fullstack capabilities.\\n\\n![https://media1.giphy.com/media/iB4PoTVka0Xnul7UaC/giphy.gif?cid=7941fdc67jeepog7whrdmkbux0c6kxzb8eyhqwpjcd1tunvp&ep=v1_gifs_search&rid=giphy.gif&ct=g](https://media1.giphy.com/media/iB4PoTVka0Xnul7UaC/giphy.gif?cid=7941fdc67jeepog7whrdmkbux0c6kxzb8eyhqwpjcd1tunvp&ep=v1_gifs_search&rid=giphy.gif&ct=g)\\n\\n## Judging Criteria\\n\\nThe judging criteria for the Tutorial Jam will be based on:\\n\\n- Clarity and conciseness of the tutorial.\\n- Creativity and originality of the tutorial.\\n- Effectiveness of the tutorial in helping the reader understand and use Wasp to create a fullstack web app or demonstrate a web development topic.\\n\\n## Templates & Tutorial Examples\\n\\nWe have a whole repo of starter templates that you can use with Wasp by [installing wasp](https://wasp-lang.dev/docs/quick-start) and running `wasp new` in the command line. The interactive prompt will ask you what template you\u2019d like to start with:\\n\\n```bash\\n[1] basic (default)\\n    Simple starter template with a single page.\\n[2] todo-ts\\n    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.\\n[3] saas\\n    Everything a SaaS needs! Comes with Google auth, ChatGPT API, Tailwind, & Stripe payments.\\n[4] embeddings\\n    Comes with code for generating vector embeddings and performing vector similarity search.\\n[5] WaspAI\\n    An AI powered code scaffolder. Tell it what kind of app you want and get a scaffolded fullstack app\\n```\\n\\nIn addition, here are some ideas to help you get inspired. You could build a simple fullstack app with Wasp in order to explain some key concepts:\\n\\n- **Wasp\u2019s New AI-Generated App Feature:** build any fullstack app using Wasp\u2019s new AI-generated App feature and explain the process.\\n    - *What worked? What didn\u2019t? What are some prompt engineering tips? What did you have to do to get the app in a desired final state?*\\n- **Full-Stack Type Safety:** Using Wasp\u2019s low-on-boilerplate fullstack typesaftey, you could dive deep into types on both frontend and backend.\\n    - *How does Wasp\u2019s fullstack typesafety compare to tRPC and/or the T3 stack?*\\n- **Data Management:** With complete control and easy implementation of data models, you could explore the concepts of databases, data management and relational data in a simplified environment.\\n    - *What are some tips and tricks for working with Prisma and relational DBs?*\\n- **Understanding Fullstack Web Development:** Wasp being a fullstack tool truly shines a light on how front-end and back-end connect in web development. It\u2019s a great tool for understanding how queries, actions, and other operations in back-end can be utilized in front-end components.\\n    - *How does the HTTP protocol work in detail?*\\n\\nOr you could write a tutorial that explains how to build:\\n\\n- **A vector-powered AI app:** Leverage Wasp\u2019s truly fullstack, serverful architecture to build a personalised tool powered by embeddings and vector stores.\\n- **Realtime Chat or Polling App:** Any realtime app could take advantage of Wasp\u2019s easy-to-use websockets features. The tutorial could explain handling real-time data, and other basic back-end concepts.\\n- **Online Shop:** An e-commerce platform model with features like user registration, product display, a shopping cart, and a check-out process, using Wasp\u2019s easy to configure authorization, and database management.\\n\\n## Prizes\\n\\nThe winners of the Wasp Tutorial Jam will receive the following prizes:\\n\\n- First Place: [Wasp-colored mechanical keyboard](https://www.caseking.de/ducky-one-3-yellow-mini-gaming-tastatur-rgb-led-mx-red-us-gata-1745.html?sPartner=999&gclid=Cj0KCQjw1_SkBhDwARIsANbGpFtYpC2-jFuJ94A6VF6oDFLEZQUya3Ky7P9Ih-nU_Zb9NsDjNhmITbIaAtBMEALw_wcB), and your tutorial and info featured on all our blogs (Wasp official website, dev.to, and hashnode)\\n- Second Place: 3 months access to [PluralSight](https://www.pluralsight.com/) courses (tons of Software Development courses, tutorials and lessons!) or a $75 Amazon giftcard, and your tutorial featured on all our blogs\\n- Third Place: Wasp Swag and a feature of your tutorial and info on our social media channels.\\n\\n<ImgWithCaption\\n    source=\\"img/tutorial-jam/keyboard.png\\"\\n/>\\n\\n## Submission Deadline\\n\\nAll submissions must be received by Sunday, July 16th 11:59 p.m. CET. \\nWinners will be announced the following week.\\n\\n## Questions?\\n\\nHead on over to our [Discord Server](https://discord.gg/rzdnErX) and ask away :)\\n\\nGood luck!"},{"id":"/2023/06/29/new-wasp-lsp","metadata":{"permalink":"/wasp-docs/blog/2023/06/29/new-wasp-lsp","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-06-29-new-wasp-lsp.md","source":"@site/blog/2023-06-29-new-wasp-lsp.md","title":"Wasp LSP 2.0 - Next-level autocompletion and IDE integration for Wasp projects!","description":"<ImgWithCaption","date":"2023-06-29T00:00:00.000Z","formattedDate":"June 29, 2023","tags":[{"label":"launch-week","permalink":"/wasp-docs/blog/tags/launch-week"},{"label":"product-update","permalink":"/wasp-docs/blog/tags/product-update"}],"readingTime":1.9,"hasTruncateMarker":false,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"Wasp LSP 2.0 - Next-level autocompletion and IDE integration for Wasp projects!","authors":["matijasos"],"image":"/img/new-lsp/new-lsp-banner.png","tags":["launch-week","product-update"]},"prevItem":{"title":"Tutorial Jam #1 - Teach Others & Win Prizes!","permalink":"/wasp-docs/blog/2023/06/30/tutorial-jam"},"nextItem":{"title":"What can you build with Wasp?","permalink":"/wasp-docs/blog/2023/06/28/what-can-you-build-with-wasp"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<ImgWithCaption\\n    source=\\"img/new-lsp/new-lsp-banner.png\\"\\n/>\\n\\nIt\'s the fourth day of our [Launch Week #3](blog/2023/06/22/wasp-launch-week-three) - today it\'s all about dev tooling and making sure that the time you spend looking at your IDE is as pleasurable as possible!\\n\\n**We present the next generation of Wasp LSP (Language Server Protocol) implementation for [VS Code](https://marketplace.visualstudio.com/items?itemName=wasp-lang.wasp)**! As you might already know, Wasp has its own simple configuration language (`.wasp`) that acts as a glue between your React & Node.js code.\\n\\nAlthough it\'s a very simple, declarative language (you can think of it as a bit nicer/smarter JSON), and having it allows us to completely tailor the developer experience (aka get rid of boilerplate), it also means we have to provide our own tooling for it (syntax highlighting, auto completion, ...).\\n\\nWe started with syntax highlighting, then basic autocompletion and snippet support, but now we really took things to the next level! Writing Wasp code now is much closer to what we had in our mind when envisioning Wasp.\\n\\nWithout further ado, here\'s what\'s new:\\n\\n## \u2728 Autocompletion for config object properties (`auth`, `webSocket`, ...)\\n\\nUntil now, Wasp offered autocompletion only for the top-level declarations such as `page` or `app`. Now, it works for any (sub)-property (as one would expect \ud83d\ude05)!\\n\\n<ImgWithCaption\\n    source=\\"img/new-lsp/dict-completion.gif\\"\\n    caption=\\"Fill out your Wasp configuration faster and with less typos! \ud83d\udcbb\ud83d\ude80\\"\\n/>\\n\\n## \ud83d\udd0d Type Hints\\n\\nOpening documentation takes you out of your editor and out of your flow. Stay in the zone with in-editor type hints! \ud83d\udca1\\n\\n<ImgWithCaption\\n    source=\\"img/new-lsp/type-hints.gif\\"\\n/>\\n\\n## \ud83d\udea8 Import Diagnostics\\n\\nKeep tabs on what\'s left to implement with JS import diagnostics! There\'s nothing more satisfying than watching those errors vanish. \ud83d\ude0c\\n\\n<ImgWithCaption\\n    source=\\"img/new-lsp/import-diagnostics.gif\\"\\n    caption=\\"Wasp now automatically detects if the function you referenced doesn\'t exist or is not exported.\\"\\n/>\\n\\n## \ud83d\udd17 Goto Definition\\n\\nYour Wasp file is the central hub of your project. Easily navigate your code with goto definition and make changes in a snap! \ud83d\udca8\\n\\n<ImgWithCaption\\n    source=\\"img/new-lsp/goto-definition.gif\\"\\n    caption=\\"Cmd/Ctrl + click and Wasp LSP takes you straight to the function body!\\"\\n/>\\n\\n\\nDon\'t forget to install [Wasp VS Code extension](https://marketplace.visualstudio.com/items?itemName=wasp-lang.wasp) and we wish you happy coding! You can get started right away and [try it out here](/docs/quick-start)."},{"id":"/2023/06/28/what-can-you-build-with-wasp","metadata":{"permalink":"/wasp-docs/blog/2023/06/28/what-can-you-build-with-wasp","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-06-28-what-can-you-build-with-wasp.md","source":"@site/blog/2023-06-28-what-can-you-build-with-wasp.md","title":"What can you build with Wasp?","description":"<ImgWithCaption","date":"2023-06-28T00:00:00.000Z","formattedDate":"June 28, 2023","tags":[{"label":"launch-week","permalink":"/wasp-docs/blog/tags/launch-week"},{"label":"showcase","permalink":"/wasp-docs/blog/tags/showcase"}],"readingTime":3.705,"hasTruncateMarker":false,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"What can you build with Wasp?","authors":["matijasos"],"image":"/img/build-with-wasp/build-with-wasp-banner.png","tags":["launch-week","showcase"]},"prevItem":{"title":"Wasp LSP 2.0 - Next-level autocompletion and IDE integration for Wasp projects!","permalink":"/wasp-docs/blog/2023/06/29/new-wasp-lsp"},"nextItem":{"title":"Build Your Own Personal Twitter Agent \ud83e\udde0\ud83d\udc26\u26d3 with LangChain","permalink":"/wasp-docs/blog/2023/06/27/build-your-own-twitter-agent-langchain"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<ImgWithCaption\\n    alt=\\"Launch Week 3 is coming\\"\\n    source=\\"img/build-with-wasp/build-with-wasp-banner.png\\"\\n/>\\n\\nWelcome to the 3rd day of our [Launch Week #3](blog/2023/06/22/wasp-launch-week-three) - Community Day! Our community is the most important aspect of everything we do at Wasp, and we believe it\'s only right to have a day dedicated to it.\\n\\nWe\'ll showcase some of the coolest project built with Wasp so far and through that explore together what kind of apps you can develop with it. Let\'s dive in!\\n\\n:::tip\\n\\nIf you\'re looking for a quick way to start your project, check out our [Ultimate SaaS Starter](https://github.com/wasp-lang/SaaS-Template-GPT). It packs Tailwind, GPT, Stripe ane other popular integrations, all pre-configured for you.\\n\\n:::\\n\\n## [CoverLetterGPT.xyz](https://coverlettergpt.xyz/) - GPT-powered cover letter generator\\n\\n<ImgWithCaption\\n    source=\\"img/build-with-wasp/cover-letter-gpt.png\\"\\n/>\\n\\n**Try it out**: [coverlettergpt.xyz](https://coverlettergpt.xyz/)\\n\\n**Source code**: https://github.com/vincanger/coverlettergpt\\n\\n**Wasp features used**: [Social login with Google + auth UI](/blog/2023/04/12/auth-ui), [email sending](/docs/advanced/email)\\n\\n**UI Framework**: [Chakra UI](https://chakra-ui.com/)\\n\\nCreated in the midst of a GPT craze, this is one of the most popular Wasp apps so far! It does exactly what it says on a tin - given job description and your CV, it generates a unique cover letter customized for you. It does that via parsing your CV and feeding it together with the job description to the GPT api, along with the additional settings such as creativity level (careful with that one!).\\n\\nAlthough it started as a fun side project, it seems that people actually find it useful, at least as a starting point for writing your own cover letter. CoverLetterGPT has been used to generate close to 5,000 cover letters!\\n\\nTry it out and have fun or use it as an inspiration for your next project!\\n\\n## [Amicus.work](https://www.amicus.work/) - most \\"enterprise SaaS\\" app \ud83d\udc54 \ud83d\udcbc\\n\\n<ImgWithCaption\\n    source=\\"img/build-with-wasp/amicus.png\\"\\n/>\\n\\n**Try it out**: [amicus.work](https://www.amicus.work/)\\n\\n**Wasp features used**: [Authentication](/docs/auth/overview), [email sending](/docs/advanced/email), [async/cron jobs](/docs/advanced/jobs)\\n\\n**UI Framework**: [Material UI](https://mui.com/)\\n\\nThis app really gives away those \\"enterprise SaaS\\" vibes - when you see it you know it means some serious business! The author describes it as \\"Asana for you lawyers\\" ([you can read how the author got first customers for it here](blog/2023/02/14/amicus-indiehacker-interview)), or as an easy way for lawyers to manage and collaborate on their workflows.\\n\\nFile upload, workflow creation, calendar integration, collaboration - this app has it all! Amicus might be the most advanced project made with Wasp so far. Erlis startedbuilding it even with Wasp still in Alpha, and it has withstood the test of time since then.\\n\\n## Description Generator - GPT-powered product description generator - first acquired app made with Wasp! \ud83d\udcb0\ud83d\udcb0\\n\\n<ImgWithCaption\\n    source=\\"img/build-with-wasp/description-generator.png\\"\\n/>\\n\\n**Try it out**: [description-generator.online](https://description-generator.online/)\\n\\n**Wasp features used**: [Social login with Google + auth UI](/blog/2023/04/12/auth-ui)\\n\\n**UI Framework**: [Chakra UI](https://chakra-ui.com/)\\n\\nAnother SaaS that uses GPT integration to cast its magic! Given product name and instructions on what kind of content you\'d like to get, this app generates the professionaly written product listing. It\'s a perfect fit for marketplace owners that want to present their products in the best light but don\'t have a budget for the marketing agency.\\n\\nWhat\'s special about Description Generator is that it was recently sold , making it the first Wasp-powered project that got acquired! Stay tuned, as the whole story is coming soon.\\n\\n## TweetBot - your personal Twitter intern! \ud83d\udc26\ud83e\udd16\\n\\n<ImgWithCaption\\n    source=\\"img/build-with-wasp/tweet-bot.png\\"\\n/>\\n\\n**Try it out**: [banger-tweet-bot.netlify.app](https://banger-tweet-bot.netlify.app/)\\n\\n**Source code**: https://github.com/vincanger/banger-tweet-bot\\n\\n**Wasp features used**:[Authentication](/docs/auth/overview), [async/cron jobs](/docs/advanced/jobs)\\n\\n**UI Framework**: [Tailwind](https://tailwindcss.com/)\\n\\nThe latest and greatest from [Vince\'s](https://twitter.com/hot_town) lab - an app that serves as your personal twitter brainstorming agent! It takes your raw ideas as an input, monitors current twitter trends (from the accounts you selected) and helps you brainstorm new tweets and also drafts them for you!\\n\\nWhile the previously mentioned projects queried the GPT API directly, TweetBot makes use of the [LangChain](https://js.langchain.com/) library, which does a lot of heavy lifting for you, allowing you to produce bigger prompts and preserve the context between subsequent queries.\\n\\n## Summary\\n\\nAs you could see above, Wasp can be used to build pretty much any database-backed web application! It is especially well suited for so called \\"workflow-based\\" applications where you typically have a bunch of resources (e.g. your tasks, or tweets) that you want to manipulate in some way. \\n\\nWith our built-in deployment support (e.g. you can [deploy to Fly.io for free with a single CLI command](https://wasp-lang.dev/docs/deploying)) the whole development process is extremely streamlined.\\n\\nWe can\'t wait to see what you build next!"},{"id":"/2023/06/27/build-your-own-twitter-agent-langchain","metadata":{"permalink":"/wasp-docs/blog/2023/06/27/build-your-own-twitter-agent-langchain","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md","source":"@site/blog/2023-06-27-build-your-own-twitter-agent-langchain.md","title":"Build Your Own Personal Twitter Agent \ud83e\udde0\ud83d\udc26\u26d3 with LangChain","description":"TL;DR","date":"2023-06-27T00:00:00.000Z","formattedDate":"June 27, 2023","tags":[{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"ai","permalink":"/wasp-docs/blog/tags/ai"},{"label":"gpt","permalink":"/wasp-docs/blog/tags/gpt"},{"label":"langchain","permalink":"/wasp-docs/blog/tags/langchain"},{"label":"fullstack","permalink":"/wasp-docs/blog/tags/fullstack"},{"label":"node","permalink":"/wasp-docs/blog/tags/node"},{"label":"react","permalink":"/wasp-docs/blog/tags/react"},{"label":"agent","permalink":"/wasp-docs/blog/tags/agent"}],"readingTime":45.765,"hasTruncateMarker":true,"authors":[{"name":"Vinny","title":"DevRel @ Wasp","url":"https://vincanger.github.io","email":"vince@wasp-lang.dev","imageURL":"https://vincanger.github.io/assets/vince_smiley.jpg","key":"vinny"}],"frontMatter":{"title":"Build Your Own Personal Twitter Agent \ud83e\udde0\ud83d\udc26\u26d3 with LangChain","authors":["vinny"],"image":"/img/build-your-own-twitter-agent/twitter-agent-logo.png","tags":["wasp","ai","gpt","langchain","fullstack","node","react","agent"]},"prevItem":{"title":"What can you build with Wasp?","permalink":"/wasp-docs/blog/2023/06/28/what-can-you-build-with-wasp"},"nextItem":{"title":"Wasp Launch Week #3: Magic","permalink":"/wasp-docs/blog/2023/06/22/wasp-launch-week-three"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n## TL;DR\\n\\n[LangChain](https://js.langchain.com), ChatGPT, and other emerging technology have made it possible to build some really creative tools. \\n\\nIn this tutorial, we\u2019ll build a full-stack web app that acts as our own personal Twitter Agent, or \u201cintern\u201d, as I like to call it. It keeps track of your notes and ideas, and uses them \u2014 along with tweets from trending-setting twitter users \u2014 to brainstorm new ideas and write tweet drafts for you! \ud83d\udca5\\n\\nBTW, If you get stuck during the tutorial, or at any point just want to check out the full, final repo of the app we\'re building, here it is: https://github.com/vincanger/twitter-intern\\n\\n\x3c!-- truncate --\x3e\\n\\n## Before We Begin\\n\\n[Wasp = }](https://wasp-lang.dev) is the only open-source, completely serverful fullstack React/Node framework with a built in compiler that lets you build your app in a day and deploy with a single CLI command.\\n\\nWe\u2019re working hard to help you build performant web apps as easily as possibly \u2014 including making these tutorials, which are released weekly!\\n\\nWe would be super grateful if you could help us out by starring our repo on GitHub: [https://www.github.com/wasp-lang/wasp](https://www.github.com/wasp-lang/wasp) \ud83d\ude4f\\n\\n![https://media2.giphy.com/media/d0Pkp9OMIBdC0/giphy.gif?cid=7941fdc6b39mgj7h8orvi0f4bjebceyx4gj0ih1xb6s05ujc&ep=v1_gifs_search&rid=giphy.gif&ct=g](https://media2.giphy.com/media/d0Pkp9OMIBdC0/giphy.gif?cid=7941fdc6b39mgj7h8orvi0f4bjebceyx4gj0ih1xb6s05ujc&ep=v1_gifs_search&rid=giphy.gif&ct=g)\\n\\n\u2026e*ven Ron would star [Wasp on GitHub](https://www.github.com/wasp-lang/wasp)* \ud83e\udd29\\n\\n## Background\\n\\nTwitter is a great marketing tool. It\u2019s also a great way to explore ideas and refine your own. But it can be time-consuming and difficult to maintain a tweeting habit.\\n\\n![https://media0.giphy.com/media/WSrR5xkvljaFMe7UPo/giphy.gif?cid=7941fdc6g9o3drj567dbwyuo1c66x76eq8awc2r1oop8oypl&ep=v1_gifs_search&rid=giphy.gif&ct=g](https://media0.giphy.com/media/WSrR5xkvljaFMe7UPo/giphy.gif?cid=7941fdc6g9o3drj567dbwyuo1c66x76eq8awc2r1oop8oypl&ep=v1_gifs_search&rid=giphy.gif&ct=g)\\n\\nThat\u2019s why I decided to build my own personal twitter agent with [LangChain](https://js.langchain.com) on the basis of these assumptions:\\n\\n\ud83e\udde0\xa0LLMs (like ChatGPT) aren\u2019t the best writers, but they ARE great at brainstorming new ideas.\\n\\n\ud83d\udcca\xa0Certain twitter users drive the majority of discourse within certain niches, i.e. trend-setters influence what\u2019s being discussed at the moment.\\n\\n\ud83d\udca1\xa0the Agent needs context in order to generate ideas relevant to YOU and your opinions, so it should have access to your notes, ideas, tweets, etc.\\n\\nSo instead of trying to build a fully autonomous agent that does the tweeting for you, I thought it would be better to build an agent that does the BRAINSTORMING for you, based on your favorite trend-setting twitter users as well as your own ideas.\\n\\nImagine it like an intern that does the grunt work, while you do the curating!\\n\\n![https://media.giphy.com/media/26DNdV3b6dqn1jzR6/giphy.gif](https://media.giphy.com/media/26DNdV3b6dqn1jzR6/giphy.gif)\\n\\nIn order to accomplish this, we need to take advantage of a few hot AI tools:\\n\\n- Embeddings and Vector Databases\\n- LLMs (Large Language Models), such as ChatGPT\\n- LangChain and sequential \u201cchains\u201d of LLM calls\\n\\nEmbeddings and Vector Databases give us a powerful way to perform similarity searches on our own notes and ideas. \\n\\nIf you\u2019re not familiar with [similarity search](https://www.pinecone.io/learn/what-is-similarity-search/), the simplest way to describe what similarity search is by comparing it to a normal google search. In a normal search, the phrase \u201ca mouse eats cheese\u201d will return results with a combination of **those** **words** **only**. But a vector-based similarity search, on the other hand, would return those words, as well as results with related words such as \u201cdog\u201d, \u201ccat\u201d, \u201cbone\u201d, and \u201cfish\u201d.\\n\\nYou can see why that\u2019s so powerful, because if we have non-exact but related notes, our similarity search will still return them!\\n\\n![https://media2.giphy.com/media/xUySTD7evBn33BMq3K/giphy.gif?cid=7941fdc6273if8qfk83gbnv8uabc4occ0tnyzk0g0gfh0qg5&ep=v1_gifs_search&rid=giphy.gif&ct=g](https://media2.giphy.com/media/xUySTD7evBn33BMq3K/giphy.gif?cid=7941fdc6273if8qfk83gbnv8uabc4occ0tnyzk0g0gfh0qg5&ep=v1_gifs_search&rid=giphy.gif&ct=g)\\n\\nFor example, if our favorite trend-setting twitter user makes a post about the benefits of typescript, but we only have a note on \u201cour favorite React hooks\u201d, our similarity search would still likely return such a result. And that\u2019s huge!\\n\\nOnce we get those notes, we can pass them to the ChatGPT completion API along with a prompt to generate more ideas. The result from this prompt will then be sent to another prompt with instructions to generate a draft tweet. We save these sweet results to our Postgres relational database.\\n\\nThis \u201cchain\u201d of prompting is essentially where the LangChain package gets its name \ud83d\ude42\\n\\n![The flow of information through the app](../static/img/build-your-own-twitter-agent/Untitled.png)\\n\\nThis approach will give us a wealth of new ideas and tweet drafts related to our favorite trend-setting twitter users\u2019 tweets. We can look through these, edit and save our favorite ideas to our \u201cnotes\u201d vector store, or maybe send off some tweets.\\n\\nI\u2019ve personally been using this app for a while now, and not only has it generated some great ideas, but it also helps to inspire new ones (even if some of the ideas it generates are \u201cmeh\u201d), which is why I included an \u201cAdd Note\u201d feature front and center to the nav bar\\n\\n![twitter-agent-add-note.png](../static/img/build-your-own-twitter-agent/twitter-agent-add-note.png)\\n\\nOk. Enough background. Let\u2019s start building your own personal twitter intern! \ud83e\udd16\\n\\nBTW, if you get stuck at all while following the tutorial, you can always reference this tutorial\u2019s repo, which has the finished app: [Twitter Intern GitHub Repo](https://github.com/vincanger/twitter-intern)\\n\\n## Configuration\\n### Set up your Wasp project\\n\\nWe\u2019re going to make this a full-stack React/NodeJS web app so we need to get that set up first. But don\u2019t worry, it won\u2019t take long AT ALL, because we will be using Wasp as the framework. \\n\\nWasp does all the heavy lifting for us. You\u2019ll see what I mean in a second.\\n\\n```bash\\n# First, install Wasp by running this in your terminal:\\n\\ncurl -sSL https://get.wasp-lang.dev/installer.sh | sh\\n\\n# next, create a new project:\\n\\nwasp new twitter-agent\\n\\n# cd into the new directory and start the project:\\n\\ncd twitter-agent && wasp start\\n```\\n\\nGreat! When running `wasp start`, Wasp will install all the necessary npm packages, start our server on port 3001, and our React client on port 3000. Head to [localhost:3000](http://localhost:3000) in your browser to check it out.\\n\\n![Untitled](../static/img/build-your-own-twitter-agent/Untitled%201.png)\\n\\n:::tip Tip \u2139\ufe0f\\nyou can install the [Wasp vscode extension](https://marketplace.visualstudio.com/items?itemName=wasp-lang.wasp) for the best developer experience.\\n:::\\n\\n\\nYou\u2019ll notice Wasp sets up your full-stack app with a file structure like so:\\n\\n```bash\\n.\\n\u251c\u2500\u2500 main.wasp             # The wasp config file.\\n\u2514\u2500\u2500 src\\n \xa0\xa0 \u251c\u2500\u2500 client            # Your React client code (JS/CSS/HTML) goes here.\\n \xa0\xa0 \u251c\u2500\u2500 server            # Your server code (Node JS) goes here.\\n \xa0\xa0 \u2514\u2500\u2500 shared            # Your shared (runtime independent) code goes here.\\n```\\n\\nLet\u2019s start adding some server-side code.\\n\\n### Server-Side & Database Entities\\n\\nStart by adding a `.env.server` file in the root directory of your project:\\n\\n```bash\\n# https://platform.openai.com/account/api-keys\\nOPENAI_API_KEY=\\n\\n# sign up for a free tier account at https://www.pinecone.io/\\nPINECONE_API_KEY=\\n# will be a location, e.g \'us-west4-gcp-free\'\\nPINECONE_ENV=   \\n\\n# We will fill these in later during the Twitter Scraping section\\n# Twitter details -- only needed once for Rettiwt.account.login() to get the tokens \\nTWITTER_EMAIL=\\nTWITTER_HANDLE=\\nTWITTER_PASSWORD=\\n\\n# TOKENS -- fill these in after running the getTwitterTokens script in the Twitter Scraping section\\nKDT=\\nTWID=\\nCT0=\\nAUTH_TOKEN=\\n```\\n\\nWe need a way for us to store all our great ideas. So let\u2019s first head to [Pinecone.io](http://Pinecone.io) and set up a free trial account. \\n\\n \\n\\n![Untitled](../static/img/build-your-own-twitter-agent/Untitled%202.png)\\n\\nIn the Pinecone dashboard, go to API keys and create a new one. Copy and paste your `Environment` and `API Key` into `.env.server`\\n\\nDo the same for OpenAI, by creating an account and key at [https://platform.openai.com/account/api-keys](https://platform.openai.com/account/api-keys)\\n\\nNow let\u2019s replace the contents of the `main.wasp` config file, which is like the \u201cskeleton\u201d of your app, with the code below. This will configure most of the fullstack app for you \ud83e\udd2f\\n\\n```tsx\\napp twitterAgent {\\n  wasp: {\\n    version: \\"^0.10.6\\"\\n  },\\n  title: \\"twitter-agent\\",\\n\\thead: [\\n    \\"<script async src=\'https://platform.twitter.com/widgets.js\' charset=\'utf-8\'><\/script>\\"\\n  ],\\n  db: { \\n    system: PostgreSQL,\\n  },\\n  auth: {\\n    userEntity: User,\\n    onAuthFailedRedirectTo: \\"/login\\",\\n    methods: {\\n      usernameAndPassword: {},\\n    }\\n  },\\n  dependencies: [\\n    (\\"openai\\", \\"3.2.1\\"),\\n    (\\"rettiwt-api\\", \\"1.1.8\\"),\\n    (\\"langchain\\", \\"0.0.91\\"),\\n    (\\"@pinecone-database/pinecone\\", \\"0.1.6\\"),\\n    (\\"@headlessui/react\\", \\"1.7.15\\"),\\n    (\\"react-icons\\", \\"4.8.0\\"),\\n\\t\\t(\\"react-twitter-embed\\", \\"4.0.4\\")\\n  ],\\n}\\n\\n// ### Database Models\\n\\nentity Tweet {=psl\\n\\tid              Int           @id @default(autoincrement())\\n  tweetId         String        \\n  authorUsername  String\\n  content         String\\n  tweetedAt       DateTime      @default(now())\\n  user            User          @relation(fields: [userId], references: [id])\\n  userId          Int\\n  drafts          TweetDraft[]\\n  ideas           GeneratedIdea[]\\npsl=}\\n\\nentity TweetDraft {=psl\\n  id              Int         @id @default(autoincrement())\\n  content         String\\n  notes           String\\n  originalTweet   Tweet       @relation(fields: [originalTweetId], references: [id])\\n  originalTweetId Int\\n  createdAt       DateTime    @default(now())\\n  user            User        @relation(fields: [userId], references: [id])\\n  userId          Int\\npsl=}\\n\\nentity GeneratedIdea {=psl\\n  id              Int         @id @default(autoincrement())\\n  content         String\\n  createdAt       DateTime    @default(now())\\n  updatedAt       DateTime    @default(now())\\n  user            User        @relation(fields: [userId], references: [id])\\n  userId          Int\\n  originalTweet   Tweet?      @relation(fields: [originalTweetId], references: [id])\\n  originalTweetId Int?\\n  isEmbedded      Boolean     @default(false)\\npsl=}\\n\\nentity User {=psl\\n  id              Int         @id @default(autoincrement())\\n  username        String      @unique\\n  password        String\\n  createdAt       DateTime    @default(now())\\n  favUsers        String[]\\n  originalTweets  Tweet[]\\n  tweetDrafts     TweetDraft[]\\n  generatedIdeas  GeneratedIdea[]\\npsl=}\\n\\n// <<< Client Pages & Routes\\n\\nroute RootRoute { path: \\"/\\", to: MainPage }\\npage MainPage {\\n  authRequired: true,\\n  component: import Main from \\"@client/MainPage\\"\\n}\\n\\n//...\\n```\\n:::note \\nYou might have noticed this `{=psl psl=}` syntax in the entities above. This denotes that anything in between these `psl` brackets is actually a different language, in this case, [Prisma Schema Language](https://www.prisma.io/docs/concepts/components/prisma-schema). Wasp uses Prisma under the hood, so if you\'ve used Prisma before, it should be straightforward.\\n:::\\n\\nAs you can see, our `main.wasp` config file has our:\\n- dependencies, \\n- authentication method, \\n- database type, and \\n- database models (\u201dentities\u201d)\\n\\nWith this, our app structure is mostly defined and Wasp will take care of a ton of configuration for us.\\n\\n### Database Setup\\n\\nBut we still need to get a postgres database running. Usually this can be pretty annoying, but with Wasp, just have [Docker Deskop](https://www.docker.com/products/docker-desktop/) installed and running, then open up **another separate terminal tab/window** and then run:\\n\\n```bash\\nwasp start db\\n```\\n\\nThis will start and connect your app to a Postgres database for you. No need to do anything else! \ud83e\udd2f\xa0Just leave this terminal tab, along with docker desktop, open and running in the background.\\n\\nIn a different terminal tab, run: \\n\\n```bash\\nwasp db migrate-dev\\n```\\n\\nand make sure to give your database migration a name.\\n\\nIf you stopped the wasp dev server to run this command, go ahead and start it again with `wasp start`.\\n\\nAt this point, our app will be navigating us to [localhost:3000/login](http://localhost:3000/login) but because we haven\u2019t implemented a login screen/flow yet, we will be seeing a blank screen. Don\u2019t worry, we\u2019ll get to that.\\n\\n## Embedding Ideas & Notes\\n### Server Action\\n\\nFirst though, in the `main.wasp` config file, let\u2019s define a server action for saving notes and ideas. Go ahead and add the code below to the bottom of the file:\\n\\n```tsx\\n// main.wasp\\n\\n//...\\n// <<< Client Pages & Routes\\n\\nroute RootRoute { path: \\"/\\", to: MainPage }\\npage MainPage {\\n  authRequired: true,\\n  component: import Main from \\"@client/MainPage\\"\\n}\\n\\n// !!! Actions\\n\\naction embedIdea {\\n  fn: import { embedIdea } from \\"@server/ideas.js\\",\\n  entities: [GeneratedIdea]\\n}\\n```\\n\\nWith the action declared, let\u2019s create it. Make a new file, `.src/server/ideas.ts` in and add the following code:\\n\\n```tsx\\nimport type { EmbedIdea } from \'@wasp/actions/types\';\\nimport type { GeneratedIdea } from \'@wasp/entities\';\\nimport HttpError from \'@wasp/core/HttpError.js\';\\nimport { PineconeStore } from \'langchain/vectorstores/pinecone\';\\nimport { Document } from \'langchain/document\';\\nimport { OpenAIEmbeddings } from \'langchain/embeddings/openai\';\\nimport { PineconeClient } from \'@pinecone-database/pinecone\';\\n\\nconst pinecone = new PineconeClient();\\nexport const initPinecone = async () => {\\n  await pinecone.init({\\n    environment: process.env.PINECONE_ENV!,\\n    apiKey: process.env.PINECONE_API_KEY!,\\n  });\\n  return pinecone;\\n};\\n\\nexport const embeddings = new OpenAIEmbeddings({\\n  openAIApiKey: process.env.OPENAI_API_KEY,\\n});\\n\\n/**\\n * Embeds a single idea into the vector store\\n */\\nexport const embedIdea: EmbedIdea<{ idea: string }, GeneratedIdea> = async ({ idea }, context) => {\\n  if (!context.user) {\\n    throw new HttpError(401, \'User is not authorized\');\\n  }\\n\\n  console.log(\'idea: \', idea);\\n\\n  try {\\n    let newIdea = await context.entities.GeneratedIdea.create({\\n        data: {\\n          content: idea,\\n          userId: context.user.id,\\n        },\\n      });\\n    \\n\\n    if (!newIdea) {\\n      throw new HttpError(404, \'Idea not found\');\\n    }\\n\\n    const pinecone = await initPinecone();\\n\\t\\t\\n    // we need to create an index to save the vector embeddings to\\n    // an index is similar to a table in relational database world\\n    const availableIndexes = await pinecone.listIndexes();\\n    if (!availableIndexes.includes(\'embeds-test\')) {\\n      console.log(\'creating index\');\\n      await pinecone.createIndex({\\n        createRequest: {\\n          name: \'embeds-test\',\\n          // open ai uses 1536 dimensions for their embeddings\\n          dimension: 1536, \\n        },\\n      });\\n    }\\n\\n    const pineconeIndex = pinecone.Index(\'embeds-test\');\\n\\t\\t\\n    // the LangChain vectorStore wrapper\\n    const vectorStore = new PineconeStore(embeddings, {\\n      pineconeIndex: pineconeIndex,\\n      namespace: context.user.username,\\n    });\\n\\t\\t\\n    // create a document with the idea\'s content to be embedded\\n    const ideaDoc = new Document({\\n      metadata: { type: \'note\' },\\n      pageContent: newIdea.content,\\n    });\\n\\t\\t\\n    // add the document to the vectore store along with its id\\n    await vectorStore.addDocuments([ideaDoc], [newIdea.id.toString()]);\\n\\n    newIdea = await context.entities.GeneratedIdea.update({\\n      where: {\\n        id: newIdea.id,\\n      },\\n      data: {\\n        isEmbedded: true,\\n      },\\n    });\\n    console.log(\'idea embedded successfully!\', newIdea);\\n    return newIdea;\\n  } catch (error: any) {\\n    throw new Error(error);\\n  }\\n};\\n```\\n\\n:::info\\nWe\u2019ve defined the action function in our `main.wasp` file as coming from \u2018@server/ideas.js\u2019 but we\u2019re creating an `ideas.ts` file. What\'s up with that?!\\n\\nWell, Wasp internally uses\xa0`esnext`\xa0module resolution, which always requires specifying the extension as\xa0`.js`\xa0(i.e., the extension used in the emitted JS file). This applies to all\xa0`@server`\xa0imports (and files on the server in general). It does not apply to client files.\\n:::\\n\\nGreat! Now we have a server action for adding notes and ideas to our vector database. And we didn\u2019t even have to configure a server ourselves (thanks, Wasp \ud83d\ude42).\\n\\nLet\'s take a step back and walk through the code we just wrote though:\\n1. We create a new Pinecone client and initialize it with our API key and environment.\\n2. We create a new OpenAIEmbeddings client and initialize it with our OpenAI API key.\\n3. We create a new index in our Pinecone database to store our vector embeddings.\\n4. We create a new PineconeStore, which is a LangChain wrapper around our Pinecone client and our OpenAIEmbeddings client.\\n5. We create a new Document with the idea\u2019s content to be embedded.\\n6. We add the document to the vector store along with its id.\\n7. We also update the idea in our Postgres database to mark it as embedded.\\n\\nNow we want to create the client-side functionality for adding ideas, but you\u2019ll remember we defined an `auth` object in our wasp config file. So we\u2019ll need to add the ability to log in before we do anything on the frontend. \\n\\n### Authentication\\n\\nLet\u2019s add that quickly by adding a new a Route and Page definition to our `main.wasp` file\\n\\n```tsx\\n//...\\n\\nroute LoginPageRoute { path: \\"/login\\", to: LoginPage }\\npage LoginPage {\\n  component: import Login from \\"@client/LoginPage\\"\\n}\\n```\\n\\n\u2026and create the file `src/client/LoginPage.tsx` with the following content:\\n\\n```tsx\\nimport { LoginForm } from \'@wasp/auth/forms/Login\';\\nimport { SignupForm } from \'@wasp/auth/forms/Signup\';\\nimport { useState } from \'react\';\\n\\nexport default () => {\\n  const [showSignupForm, setShowSignupForm] = useState(false);\\n\\n  const handleShowSignupForm = () => {\\n    setShowSignupForm((x) => !x);\\n  };\\n\\n  return (\\n    <>\\n      {showSignupForm ? <SignupForm /> : <LoginForm />}\\n      <div onClick={handleShowSignupForm} className=\'underline cursor-pointer hover:opacity-80\'>\\n        {showSignupForm ? \'Already Registered? Login!\' : \'No Account? Sign up!\'}\\n      </div>\\n    </>\\n  );\\n};\\n```\\n\\n:::info\\nIn the `auth` object on the `main.wasp` file, we used the `usernameAndPassword` method which is the simplest form of auth Wasp offers. If you\u2019re interested, [Wasp](https://wasp-lang.dev/docs) does provide abstractions for Google, Github, and Email Verified Authentication, but we will stick with the simplest auth for this tutorial.\\n\\n:::\\n\\nWith authentication all set up, if we try to go to [localhost:3000](http://localhost:3000) we will be automatically directed to the login/register form.\\n\\nYou\u2019ll see that Wasp creates Login and Signup forms for us because of the `auth` object we defined in the `main.wasp` file. Sweet! \ud83c\udf89\\n\\nBut even though we\u2019ve added some style classes, we haven\u2019t set up any css styling so it will probably be pretty ugly right about now. \\n\\n\ud83e\udd22\xa0Barf.\\n\\n![Untitled](../static/img/build-your-own-twitter-agent/Untitled%203.png)\\n\\n### Adding Tailwind CSS\\n\\nLuckily, Wasp comes with tailwind css support, so all we have to do to get that working is add the following files in the root directory of the project:\\n\\n```bash\\n.\\n\u251c\u2500\u2500 main.wasp            \\n\u251c\u2500\u2500 src\\n\u2502   \u251c\u2500\u2500 client            \\n\u2502   \u251c\u2500\u2500 server           \\n\u2502   \u2514\u2500\u2500 shared            \\n\u251c\u2500\u2500 postcss.config.cjs       # add this file here\\n\u251c\u2500\u2500 tailwind.config.cjs      # and this here too\\n\u2514\u2500\u2500 .wasproot\\n```\\n\\n`postcss.config.cjs`\\n\\n```jsx\\nmodule.exports = {\\n  plugins: {\\n    tailwindcss: {},\\n    autoprefixer: {},\\n  },\\n};\\n```\\n\\n`tailwind.config.cjs`\\n\\n```jsx\\n/** @type {import(\'tailwindcss\').Config} */\\nmodule.exports = {\\n  content: [\'./src/**/*.{js,jsx,ts,tsx}\'],\\n  theme: {\\n    extend: {},\\n  },\\n  plugins: [],\\n};\\n```\\n\\nFinally, replace the contents of your `src/client/Main.css` file with these lines:\\n\\n```css\\n@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n```\\n\\nNow we\u2019ve got the magic of [tailwind css](https://tailwindcss.com/) on our sides! \ud83c\udfa8\xa0We\u2019ll get to styling later though. Patience, young grasshopper.\\n\\n### Adding Notes Client-side\\n\\nFrom here, let\u2019s create the complimentary client-side components for adding notes to the vector store. Create a new `.src/client/AddNote.tsx` file with the following contents:\\n\\n```tsx\\nimport { useState } from \'react\';\\nimport embedIdea from \'@wasp/actions/embedIdea\';\\n\\nexport default function AddNote() {\\n  const [idea, setIdea] = useState(\'\');\\n  const [isIdeaEmbedding, setIsIdeaEmbedding] = useState(false);\\n\\n  const handleEmbedIdea = async (e: any) => {\\n    try {\\n      setIsIdeaEmbedding(true);\\n      if (!idea) {\\n        throw new Error(\'Idea cannot be empty\');\\n      }\\n      const embedIdeaResponse = await embedIdea({\\n        idea,\\n      });\\n\\n      console.log(\'embedIdeaResponse: \', embedIdeaResponse);\\n    } catch (error: any) {\\n      alert(error.message);\\n    } finally {\\n      setIdea(\'\');\\n      setIsIdeaEmbedding(false);\\n    }\\n  };\\n\\n  return (\\n    <div className=\'flex flex-row gap-2 justify-center items-end w-full\'>\\n      <textarea\\n        autoFocus\\n        onChange={(e) => setIdea(e.target.value)}\\n        value={idea}\\n        placeholder=\'LLMs are great for brainstorming!\'\\n        className=\'w-full p-4 h-22 bg-neutral-100 border rounded-lg w-full\'\\n      />\\n      <button\\n        onClick={handleEmbedIdea}\\n        className=\'flex flex-row justify-center items-center bg-neutral-100 hover:bg-neutral-200 border border-neutral-300 font-bold px-3 py-1 text-sm text-blue-500 whitespace-nowrap rounded-lg\'\\n      >\\n        {isIdeaEmbedding ? \'Loading...\' : \'Save Note\'}\\n      </button>\\n    </div>\\n  );\\n}\\n```\\n\\nHere we\u2019re using the `embedIdea` action we defined earlier to add our idea to the vector store. We\u2019re also using the `useState` hook to keep track of the idea we\u2019re adding, as well as the loading state of the button.\\n\\nSo now we have a way to add our own ideas and notes to our vector store. Pretty sweet!\\n\\n## Generating New Ideas & Tweet Drafts\\n### Using LangChain\'s Sequential Chains\\n\\nNow we need to set up the sequential chain of LLM calls that LangChain is so great at.\\n\\nHere are the steps we will take:\\n\\n1. define a function that uses LangChain to initiate a \u201cchain\u201d of API calls to OpenAI\u2019s ChatGPT completions endpoint.\\n    1. this function takes a tweet that we pulled from one of our favorite twitter users as an argument, searches our vector store for similar notes & ideas, and returns a list of new \u201cbrainstormed\u201d based on the example tweet and our notes.\\n2. define a new action that loops through our favorite users array, pulls their most recent tweets, and sends them to our LangChain function mentioned above\\n\\nSo let\u2019s start again by creating our LangChain function. Make a new `src/server/chain.ts` file:\\n\\n\\n```tsx\\nimport { ChatOpenAI } from \'langchain/chat_models/openai\';\\nimport { LLMChain, SequentialChain } from \'langchain/chains\';\\nimport { PromptTemplate } from \'langchain/prompts\';\\nimport { PineconeStore } from \'langchain/vectorstores/pinecone\';\\nimport { OpenAIEmbeddings } from \'langchain/embeddings/openai\';\\nimport { PineconeClient } from \'@pinecone-database/pinecone\';\\n\\nconst pinecone = new PineconeClient();\\nexport const initPinecone = async () => {\\n  await pinecone.init({\\n    environment: process.env.PINECONE_ENV!,\\n    apiKey: process.env.PINECONE_API_KEY!,\\n  });\\n  return pinecone;\\n};\\n\\nconst embeddings = new OpenAIEmbeddings({\\n  openAIApiKey: process.env.OPENAI_API_KEY,\\n});\\n\\nexport const generateIdeas = async (exampleTweet: string, username: string) => {\\n  try {\\n    // remove quotes and curly braces as not to confuse langchain template parser\\n    exampleTweet = exampleTweet.replace(/\\"/g, \'\');\\n    exampleTweet = exampleTweet.replace(/{/g, \'\');\\n    exampleTweet = exampleTweet.replace(/}/g, \'\');\\n\\n    const pinecone = await initPinecone();\\n\\n    console.log(\'list indexes\', await pinecone.listIndexes());\\n\\n    // find the index we created earlier\\n    const pineconeIndex = pinecone.Index(\'embeds-test\');\\n\\n    const vectorStore = new PineconeStore(embeddings, {\\n      pineconeIndex: pineconeIndex,\\n      namespace: username,\\n    });\\n\\n    //\\n    // sequential tweet chain begin --- >\\n    //\\n    /**\\n     * vector store results for notes similar to the original tweet\\n     */\\n    const searchRes = await vectorStore.similaritySearchWithScore(exampleTweet, 2);\\n    console.log(\'searchRes: \', searchRes);\\n    let notes = searchRes\\n      .filter((res) => res[1] > 0.7) // filter out strings that have less than %70 similarity\\n      .map((res) => res[0].pageContent)\\n      .join(\' \');\\n\\n    console.log(\'\\\\n\\\\n similarity search results of our notes-> \', notes);\\n\\n\\t\\tif (!notes || notes.length <= 2) {\\n      notes = exampleTweet;\\n    }\\n\\n    const tweetLlm = new ChatOpenAI({\\n      openAIApiKey: process.env.OPENAI_API_KEY,\\n      temperature: 0.8, // 0 - 2 with 0 being more deterministic and 2 being most \\"loose\\". Past 1.3 the results tend to be more incoherent.\\n      modelName: \'gpt-3.5-turbo\',\\n    });\\n\\n    const tweetTemplate = `You are an expert idea generator. You will be given a user\'s notes and your goal is to use this information to brainstorm other novel ideas. \\n\\n\\t  Notes: {notes}\\n\\t\\n\\t  Ideas Brainstorm: \\n\\t  -`;\\n\\n    const tweetPromptTemplate = new PromptTemplate({\\n      template: tweetTemplate,\\n      inputVariables: [\'notes\'],\\n    });\\n\\n    const tweetChain = new LLMChain({\\n      llm: tweetLlm,\\n      prompt: tweetPromptTemplate,\\n      outputKey: \'newTweetIdeas\',\\n    });\\n\\n    const interestingTweetTemplate = `You are an expert interesting tweet generator. You will be given some tweet ideas and your goal is to choose one, and write a tweet based on it. Structure the tweet in an informal yet serious tone and do NOT include hashtags in the tweet!\\n \\n\\t  Tweet Ideas: {newTweetIdeas}\\n\\t  \\n\\t  Interesting Tweet:`;\\n\\n    const interestingTweetLlm = new ChatOpenAI({\\n      openAIApiKey: process.env.OPENAI_API_KEY,\\n      temperature: 1.1,\\n      modelName: \'gpt-3.5-turbo\',\\n    });\\n\\n    const interestingTweetPrompt = new PromptTemplate({\\n      template: interestingTweetTemplate,\\n      inputVariables: [\'newTweetIdeas\'],\\n    });\\n\\n    const interestingTweetChain = new LLMChain({\\n      llm: interestingTweetLlm,\\n      prompt: interestingTweetPrompt,\\n      outputKey: \'interestingTweet\',\\n    });\\n\\n    const overallChain = new SequentialChain({\\n      chains: [tweetChain, interestingTweetChain],\\n      inputVariables: [\'notes\'],\\n      outputVariables: [\'newTweetIdeas\', \'interestingTweet\'],\\n      verbose: false,\\n    });\\n\\n    type ChainDraftResponse = {\\n      newTweetIdeas: string;\\n      interestingTweet: string;\\n      notes: string;\\n    };\\n\\n    const res1 = (await overallChain.call({\\n      notes,\\n    })) as ChainDraftResponse;\\n\\n    return {\\n      ...res1,\\n      notes,\\n    };\\n  } catch (error: any) {\\n    throw new Error(error);\\n  }\\n};\\n```\\n\\nGreat! Let\'s run through the above code real quick:\\n1. Initialize the Pinecone client\\n2. Find our pinecone index (i.e. table) that we created earlier and initialize a new PineconeStore with LangChain\\n3. Search our vector store for notes similar to the example tweet, filtering out any results that have less than %70 similarity\\n4. Create a new ChatGPT completion chain that takes our notes as input and generates new tweet ideas\\n5. Create a new ChatGPT completion chain that takes the new tweet ideas as input and generates a new tweet draft\\n6. Create a new SequentialChain and combine the above two chains together so that we can pass it our notes as input and it returns the new tweet ideas and the new tweet draft as output\\n\\n\\n:::tip VECTOR COSINE SIMILARITY SCORES\\nA good similarity threshold for cosine similarity search on text strings depends on the specific application and the desired level of strictness in matching. Cosine similarity scores range between 0 and 1, with 0 meaning no similarity and 1 meaning completely identical text strings.\\n- 0.8-0.9 = strict\\n- 0.6-0.8 = moderate\\n- 0.5 = relaxed.\\n\\nIn our case, we went for a moderate similarity threshold of 0.7, which means that we will only return notes that are at least 70% similar to the example tweet.\\n:::\\n\\nWith this function, we will get our `newTweetIdeas` and our `interestingTweet` draft back as results that we can use within our server-side action.\\n\\n### Scraping Twitter\\n\\nBefore we can pass an `exampleTweet` as an argument to our newly created Sequential Chain, we need to fetch it first!\\n\\nTo do this, we\'re going to use the `Rettiwt-Api` (which is just Twitter written backwards). Because it\'s an unofficial API there are a few caveats:\\n\\n1. We have to use the rettiwt client to login to our twitter account once. We will output the tokens it returns via a script and save those in our `.env.server` file for later.\\n    \\n2. It\'s best to use an alternative account for this process. If you don\'t have an alternative account, go ahead and register a new one now.\\n    \\n\\n:::warning \u26a0\ufe0f \\nThe use of an unofficial Twitter client, Rettiwt, is for illustrative purposes only. It\'s crucial that you familiarize yourself with Twitter\'s policies and rules regarding scraping before implementing these methods. Any abuse or misuse of these scripts and techniques may lead to actions taken against your Twitter account. We hold no responsibility for any consequences arising from your personal use of this tutorial and/or the related scripts. It is intended purely for learning and educational purposes.\\n:::\\n\\nLet\'s go ahead and create a new folder in `src/server` called `scripts` with a file inside called `tokens.ts`. This will be our script that we will run only once, just so that we get the necessary tokens to pass to our Rettiwt client.\\n\\nWe want to avoid running this script many times otherwise our account could get rate-limited. This shouldn\'t be an issue though, because once we return the tokens, they are valid for up to a year.\\n\\nSo inside `src/server/scripts/tokens.ts` add the following code:\\n\\n```typescript\\nimport { Rettiwt } from \'rettiwt-api\'; \\n\\n/**\\n * This is a script we can now run from the cli with `wasp db seed`\\n * IMPORTANT! We only want to run this script once, after which we save the tokens\\n * in the .env.server file. They should be good for up to a year.\\n */\\nexport const getTwitterTokens = async () => {\\n  const tokens = await Rettiwt().account.login(\\n    process.env.TWITTER_EMAIL!,\\n    process.env.TWITTER_HANDLE!,\\n    process.env.TWITTER_PASSWORD!\\n  );\\n\\n  console.log(\'tokens: \', tokens)\\n};\\n```\\n\\nMake sure to add your twitter login details to our `.env.server` file, if you haven\'t already!\\n\\nGreat. To be able to run this script via a simple Wasp CLI command, add it via the `seeds` array within the `db` object at the top of your `main.wasp` file:\\n\\n```typescript\\napp twitterAgent {\\n  wasp: {\\n    version: \\"^0.10.6\\"\\n  },\\n  //...\\n  db: { \\n    system: PostgreSQL,\\n    seeds: [ // <---------- add this\\n      import { getTwitterTokens } from \\"@server/scripts/tokens.js\\",\\n    ]\\n  },\\n  //...\\n```\\n\\nNice! Now for the fun part :)\\n\\nin your terminal, at the root of your project, run `wasp db seed`, and you should see the tokens output to the terminal similar to this:\\n\\n```plaintext\\n[Db]      Running seed: getTwitterTokens\\n[Db]      tokens:  { // your tokens... }\\n```\\n\\nCopy and paste those tokens into your `.env.server` file:\\n\\n```plaintext\\n\\n# TOKENS -- fill these in after running the getTwitterTokens script in the Twitter Scraping section\\nKDT=\'...\'\\nTWID=\'...\'\\nCT0=\'...\'\\nAUTH_TOKEN=\'...\'\\n```\\n\\nNow with that, we should be able to access our favorite trend-setting users\' recent tweets and use them to help us brainstorm new ideas!\\n\\n\\n### Server Action\\n\\nOk, so we\'ve got the tokens we need to get our trend-setting example tweets, and we\'ve got a function that runs our similarity search and sequential chain of LLM calls.\\n\\nNow let\u2019s define an action in our `main.wasp` file that pulls it all together:\\n\\n```tsx\\n// actions...\\n\\naction generateNewIdeas {\\n  fn: import { generateNewIdeas } from \\"@server/ideas.js\\",\\n  entities: [GeneratedIdea, Tweet, TweetDraft, User]\\n}\\n```\\n\\n\u2026and then create that action within `src/server/ideas.ts`\\n\\n```tsx\\n\\nimport type { \\n\\tEmbedIdea,\\n\\tGenerateNewIdeas // < ---- add this type here -----\\n } from \'@wasp/actions/types\';\\n// ... other imports ...\\nimport { generateIdeas } from \'./chain.js\'; // < ---- this too -----\\nimport { Rettiwt } from \'rettiwt-api\'; // < ---- and this here -----\\n\\nconst twitter = Rettiwt({ // < ---- and this -----\\n  kdt: process.env.KDT!,\\n  twid: process.env.TWID!,\\n  ct0:  process.env.CT0!,\\n  auth_token: process.env.AUTH_TOKEN!,\\n}); \\n\\n//... other stuff ...\\n\\nexport const generateNewIdeas: GenerateNewIdeas<unknown, void> = async (_args, context) => {\\n\\ttry {\\n    // get the logged in user that Wasp passes to the action via the context\\n    const user = context.user\\n\\n    if (!user) {\\n      throw new HttpError(401, \'User is not authorized\');\\n    }\\n\\n      for (let h = 0; h < user.favUsers.length; h++) {\\n        const favUser = user.favUsers[h];\\n        const oneDayFromNow = new Date(Date.now() + 24 * 60 * 60 * 1000);\\n        // convert oneDayFromNow to format YYYY-MM-DD\\n        const endDate = oneDayFromNow.toISOString().split(\'T\')[0];\\n\\n        // find the most recent tweet from the favUser\\n        const mostRecentTweet = await context.entities.Tweet.findFirst({\\n          where: {\\n            authorUsername: favUser,\\n          },\\n          orderBy: {\\n            tweetedAt: \'desc\',\\n          },\\n        });\\n\\n        console.log(\'mostRecentTweet: \', mostRecentTweet)\\n\\n        const favUserTweets = await twitter.tweets.getTweets({\\n          fromUsers: [favUser],\\n          sinceId: mostRecentTweet?.tweetId || undefined, // get tweets since the most recent tweet if it exists\\n          endDate: endDate, // endDate in format YYYY-MM-DD\\n        });\\n\\n        const favUserTweetTexts = favUserTweets.list\\n\\n        for (let i = 0; i < favUserTweetTexts.length; i++) {\\n          const tweet = favUserTweetTexts[i];\\n\\n          const existingTweet = await context.entities.User.findFirst({\\n            where: {\\n              id: user.id,\\n            },\\n            select: {\\n              originalTweets: {\\n                where: {\\n                  tweetId: tweet.id,\\n                },\\n              },\\n            },\\n          });\\n\\n          /** \\n           * If the tweet already exists in the database, skip generating drafts and ideas for it.\\n           */\\n          if (existingTweet) {\\n            console.log(\'tweet already exists in db, skipping generating drafts...\');\\n            continue;\\n          }\\n          \\n          /**\\n           * this is where the magic happens\\n           */\\n          const draft = await generateIdeas(tweet.fullText, user.username);\\n          console.log(\'draft: \', draft);\\n\\n          const originalTweet = await context.entities.Tweet.create({\\n            data: {\\n              tweetId: tweet.id,\\n              content: tweet.fullText,\\n              authorUsername: favUser,\\n              tweetedAt: new Date(tweet.createdAt),\\n              userId: user.id\\n            },\\n          });\\n\\n          let newTweetIdeas = draft.newTweetIdeas.split(\'\\\\n\');\\n          newTweetIdeas = newTweetIdeas\\n            .filter((idea) => idea.trim().length > 0)\\n            .map((idea) => {\\n              // remove all dashes that are not directly followed by a letter\\n              idea = idea.replace(/-(?![a-zA-Z])/g, \'\');\\n              idea = idea.replace(/\\"/g, \'\');\\n              idea = idea.replace(/{/g, \'\');\\n              idea = idea.replace(/}/g, \'\');\\n              // remove hashtags and the words that follow them\\n              idea = idea.replace(/#[a-zA-Z0-9]+/g, \'\');\\n              idea = idea.replace(/^\\\\s*[\\\\r\\\\n]/gm, \'\'); // remove new line breaks\\n              idea = idea.trim();\\n              // check if last character contains punctuation and if not add a period\\n              if (idea.length > 1 && !idea[idea.length - 1].match(/[.,\\\\/#!$%\\\\^&\\\\*;:{}=\\\\-_`~()]/g)) {\\n                idea += \'.\';\\n              }\\n              return idea;\\n            });\\n          for (let j = 0; j < newTweetIdeas.length; j++) {\\n            const newTweetIdea = newTweetIdeas[j];\\n            const newIdea = await context.entities.GeneratedIdea.create({\\n              data: {\\n                content: newTweetIdea,\\n                originalTweetId: originalTweet.id,\\n                userId: user.id\\n              },\\n            });\\n            console.log(\'newIdea saved to DB: \', newIdea);\\n          }\\n\\n          const interestingTweetDraft = await context.entities.TweetDraft.create({\\n            data: {\\n              content: draft.interestingTweet,\\n              originalTweetId: originalTweet.id,\\n              notes: draft.notes,\\n              userId: user.id\\n            },\\n          });\\n\\n          console.log(\'interestingTweetDraft saved to DB: \', interestingTweetDraft);\\n\\n          // create a delay to avoid rate limiting\\n          await new Promise((resolve) => setTimeout(resolve, 1000));\\n\\n        }\\n        await new Promise((resolve) => setTimeout(resolve, 1000));\\n      }\\n\\n  } catch (error: any) {\\n    console.log(\'error\', error);\\n    throw new HttpError(500, error);\\n  }\\n}\\n```\\n\\nOk! Nice work. There\u2019s a lot going on above, so let\u2019s just recap:\\n\\n- We loop through the array of our favorite users, as defined on our user entity in `main.wasp`,\\n- Pull that user\u2019s most recent tweets\\n- Send that tweet to our `generateIdeas` function, which\\n    - searches our vector store for similar notes\\n    - asks GPT to generate similar, new ideas\\n    - sends those ideas in another prompt GPT to create a new, interesting tweet\\n    - returns the new ideas and interesting tweet\\n- Create new `GeneratedIdeas` and a `TweetDraft` and saves them to our Postgres DB\\n\\nPhew! We\u2019re doing it \ud83d\udcaa\xa0\\n\\n## Fetching & Displaying Ideas \\n### Defining a Server-side Query\\n\\nSince we now have our chain of GPT prompts defined via LangChain and our server-side action, let\u2019s go ahead and start implementing some front-end logic to fetch that data and display it to our users\u2026 which is basically only us at this point \ud83e\udec2.\\n\\nJust as we added a server-side action to `generateNewIdeas` we will now define a query to fetch those ideas.\\n\\nAdd the following query to your `main.wasp` file:\\n\\n```tsx\\nquery getTweetDraftsWithIdeas {\\n  fn: import { getTweetDraftsWithIdeas } from \\"@server/ideas.js\\",\\n  entities: [TweetDraft]\\n}\\n```\\n\\nIn your `src/server/ideas.ts` file, below your `generateNewIdeas` action, add the query we just defined in our wasp file:\\n\\n```tsx\\n//... other imports ...\\nimport type { GetTweetDraftsWithIdeas } from \'@wasp/queries/types\'; // <--- add this ---\\n\\n// ... other functions ...\\n\\ntype TweetDraftsWithIdeas = {\\n  id: number;\\n  content: string;\\n  notes: string;\\n  createdAt: Date;\\n  originalTweet: {\\n    id: number;\\n    content: string;\\n    tweetId: string;\\n    tweetedAt: Date;\\n    ideas: GeneratedIdea[];\\n    authorUsername: string;\\n  };\\n}[];\\n\\nexport const getTweetDraftsWithIdeas: GetTweetDraftsWithIdeas<unknown, TweetDraftsWithIdeas> = async (_args, context) => {\\n  if (!context.user) {\\n    throw new HttpError(401, \'User is not authorized\');\\n  }\\n\\n  const drafts = await context.entities.TweetDraft.findMany({\\n    orderBy: {\\n      originalTweet: {\\n        tweetedAt: \'desc\',\\n      }\\n    },\\n    where: {\\n      userId: context.user.id,\\n      createdAt: {\\n        gte: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // Get drafts created within the last 2 days\\n      },\\n    },\\n    select: {\\n      id: true,\\n      content: true,\\n      notes: true,\\n      createdAt: true,\\n      originalTweet: {\\n        select: {\\n          id: true,\\n          tweetId: true,\\n          content: true,\\n          ideas: true,\\n          tweetedAt: true,\\n\\t\\t\\t\\t\\tauthorUsername: true,\\n        },\\n      },\\n    },\\n  });\\n\\n  return drafts;\\n};\\n```\\n\\nWith this function we will be returning the tweet drafts we generate, along with our notes, the original tweet that inspired it, and the newly generated ideas. \\n\\nSweet!\\n\\nOk, but what good is a function that fetches the data if we\u2019ve got nowhere to display it!? \\n\\n### Displaying Ideas Client-side\\n\\nLet\u2019s go now to our `src/client/MainPage.tsx` file (make sure it\u2019s got the `.tsx` extension and not `.jsx`) and replace the contents with these below:\\n\\n```tsx\\nimport waspLogo from \'./waspLogo.png\'\\nimport \'./Main.css\'\\n\\nconst MainPage = () => {\\n  return (\\n    <div className=\'min-h-screen bg-neutral-300/70 text-center\'>\\n      <div className=\'flex flex-col justify-center items-center mx-auto pt-12\'>\\n        <img src={waspLogo} className=\'w-5\' />\\n      </div>\\n    </div>\\n  )\\n}\\nexport default MainPage\\n```\\n\\nAt this point, you. might need to restart the wasp dev server running in your terminal to get the tailwind configuration to take effect (ctrl + c, then `wasp start` again).\\n\\nYou\u2019ll now be prompted with the login / register screen. Go ahead and click on `register` and you will be automatically logged in and redirected to the main page, which at this point only has this:\\n\\n![Untitled](../static/img/build-your-own-twitter-agent/Untitled%204.png)\\n\\nLet\u2019s go back to our `MainPage.tsx` file and add the magic!\\n\\n![https://media3.giphy.com/media/ekv45izCuyXkXoHRaL/giphy.gif?cid=7941fdc6c3dszwj4xaoxg2kyj6xxdubjxn69m4qruhomhkut&ep=v1_gifs_search&rid=giphy.gif&ct=g](https://media3.giphy.com/media/ekv45izCuyXkXoHRaL/giphy.gif?cid=7941fdc6c3dszwj4xaoxg2kyj6xxdubjxn69m4qruhomhkut&ep=v1_gifs_search&rid=giphy.gif&ct=g)\\n\\nFirst, let\u2019s create a buttons component so we don\u2019t have to constantly style a new button. Create a new `src/client/Button.tsx` file:\\n\\n```tsx\\nimport { ButtonHTMLAttributes } from \'react\';\\n\\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\\n  isLoading?: boolean;\\n}\\n\\nexport default function Button({ isLoading, children, ...otherProps }: ButtonProps) {\\n  return (\\n    <button\\n      {...otherProps}\\n      className={`flex flex-row justify-center items-center bg-neutral-100 hover:bg-neutral-200 border border-neutral-300 text-blue-500 font-bold px-3 py-1 text-sm rounded-lg ${isLoading ? \' pointer-events-none opacity-70\' : \'cursor-pointer\'}`}\\n    >\\n      {isLoading? \'Loading...\' : children}\\n    </button>\\n  );\\n}\\n```\\n\\nNow let\u2019s add it to your `AddNote.tsx` component, replacing the original button with this one. The whole file should look like this:\\n\\n```tsx\\nimport { useState } from \'react\';\\nimport embedIdea from \'@wasp/actions/embedIdea\';\\nimport Button from \'./Button\';\\n\\nexport default function AddNote() {\\n  const [idea, setIdea] = useState(\'\');\\n  const [isIdeaEmbedding, setIsIdeaEmbedding] = useState(false);\\n\\n  const handleEmbedIdea = async (e: any) => {\\n    try {\\n      setIsIdeaEmbedding(true);\\n      if (!idea) {\\n        throw new Error(\'Idea cannot be empty\');\\n      }\\n      const embedIdeaResponse = await embedIdea({\\n        idea,\\n      });\\n\\n      console.log(\'embedIdeaResponse: \', embedIdeaResponse);\\n    } catch (error: any) {\\n      alert(error.message);\\n    } finally {\\n      setIdea(\'\');\\n      setIsIdeaEmbedding(false);\\n    }\\n  };\\n\\n  return (\\n    <div className=\'flex flex-row gap-2 justify-center items-end w-full\'>\\n      <textarea\\n        autoFocus\\n        onChange={(e) => setIdea(e.target.value)}\\n        value={idea}\\n        placeholder=\'LLMs are great for brainstorming!\'\\n        className=\'w-full p-4 h-22 bg-neutral-100 border rounded-lg w-full\'\\n      />\\n      <Button isLoading={isIdeaEmbedding} onClick={handleEmbedIdea}>\\n        Save Note\\n      </Button>\\n    </div>\\n  );\\n}\\n```\\n\\nNoice. \\n\\nNext, we want our page to perform the following actions:\\n\\n1. create a button that runs our `generateNewIdeas` action when clicked\\n2. define the query that fetches and caches the tweet drafts and ideas \\n3. loop through the results and display them on the page\\n\\nThat\u2019s exactly what the below code will do. Go ahead and replace the `MainPage` with it and take a minute to review what\u2019s going on:\\n\\n```tsx\\nimport waspLogo from \'./waspLogo.png\';\\nimport \'./Main.css\';\\nimport { useState } from \'react\';\\nimport generateNewIdeas from \'@wasp/actions/generateNewIdeas\';\\nimport { useQuery } from \'@wasp/queries\';\\nimport getTweetDraftsWithIdeas from \'@wasp/queries/getTweetDraftsWithIdeas\';\\nimport AddNote from \'./AddNote\';\\nimport Button from \'./Button\';\\n\\nconst MainPage = () => {\\n  const [isGenerating, setIsGenerating] = useState(false);\\n\\n  const {\\n    data: tweetDrafts,\\n    isLoading: isTweetDraftsLoading,\\n    error: tweetDraftsError,\\n  } = useQuery(getTweetDraftsWithIdeas);\\n\\n  const handleNewIdeas = async (e: any) => {\\n    try {\\n      setIsGenerating(true);\\n      await generateNewIdeas();\\n    } catch (error: any) {\\n      alert(error.message);\\n    } finally {\\n      setIsGenerating(false);\\n    }\\n  };\\n\\n  if (isTweetDraftsLoading) {\\n    return \'Loading...\';\\n  }\\n\\n  if (tweetDraftsError) {\\n    return \'Error: \' + tweetDraftsError.message;\\n  }\\n\\n  return (\\n    <div className=\'min-h-screen bg-neutral-300/70 text-center\'>\\n      <div className=\'flex flex-col gap-6 justify-center items-center mx-auto pt-12\'>\\n        <img src={waspLogo} className=\'w-5\' />\\n        <div className=\'flex flex-col gap-4 justify-center items-center w-2/4\'>\\n          <AddNote />\\n          <hr className=\'border border-t-1 border-neutral-100/70 w-full\' />\\n          <div className=\'flex flex-row justify-center w-1/4\'>\\n            <Button onClick={handleNewIdeas} isLoading={isGenerating}>\\n              Generate New Ideas\\n            </Button>\\n          </div>\\n          <div className=\'flex flex-col gap-4 justify-center items-center w-full\'>\\n            {tweetDrafts.map((tweetDraft) => (\\n              <>\\n                <h2 className=\'text-2xl font-bold\'>Generated Ideas</h2>\\n                <div key={tweetDraft.id} className=\'flex flex-col gap-2 justify-center items-center w-full\'>\\n                  <h2>Tweet Draft</h2>\\n                  <div className=\'flex flex-row gap-2 justify-center items-center w-full\'>\\n                    <div className=\'w-full p-4 h-22 bg-blue-100 border rounded-lg w-full\'>{tweetDraft.content}</div>\\n                  </div>\\n\\n                  {!!tweetDraft.notes && tweetDraft.notes !== tweetDraft.originalTweet.content && (\\n                    <>\\n                      <h2>Your Similar Notes</h2>\\n                      {tweetDraft.notes}\\n                    </>\\n                  )}\\n                  <div className=\'flex flex-col gap-2 justify-center items-center w-full\'>\\n                    <h2>Ideas</h2>\\n                    {tweetDraft.originalTweet.ideas.map((idea) => (\\n                      <div key={idea.id} className=\'flex flex-row gap-2 justify-center items-center w-full\'>\\n                        <div className=\'flex flex-row gap-2 justify-center items-center w-full\'>\\n                          <div className=\'w-full p-4 h-22 bg-neutral-100 border rounded-lg w-full\'>{idea.content}</div>\\n                        </div>\\n                      </div>\\n                    ))}\\n                  </div>\\n                </div>\\n              </>\\n            ))}\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\nexport default MainPage;\\n```\\n\\nThis is what you should see on the homepage now! \ud83c\udf89\\n\\n![Untitled](../static/img/build-your-own-twitter-agent/Untitled%205.png)\\n\\nBut, if you clicked \u2018generate new ideas\u2019 and nothing happened, well that\u2019s because we haven\u2019t defined any favorite trend-setting twitter users to scrape tweets from. And there\u2019s no way to do that from the UI at the moment, so let\u2019s open up the database manager and add some manually.\\n\\nIn a new terminal tab, in the root of your project, run:\\n\\n```bash\\nwasp db studio\\n```\\n\\nThen, in a new browswer tab, at [localhost:5555](http://localhost:5555) you should see your database. \\n\\nGo to `user`, and you should be the only user in there. Add the usernames of a couple of your favorite trend-setting twitter users. \\n\\n![Untitled](../static/img/build-your-own-twitter-agent/Untitled%206.png)\\n\\nMake sure the accounts have tweeted recently or your function won\u2019t be able to scrape or generate anything! \\n\\n:::tip Hey \u270b\\nWhile you\u2019re at it, if you\u2019re liking this tutorial, give me a [follow @hot_town](https://twitter.com/hot_town) for more future content like this\\n:::\\n\\nAfter adding the twitter usernames, make sure you click `save 1 change`. \\n\\nGo back to your client and click the `Generate New Ideas` button again. This might take a while depending on how many tweets it\u2019s generating ideas for, so be patient \u2014 and watch the console output in your terminal if you\u2019re curious ;)\\n\\n![Untitled](../static/img/build-your-own-twitter-agent/Untitled%207.png)\\n\\nAwesome! Now we should be getting back some generated ideas from our twitter \u201cintern\u201d which will help us brainstorm further notes and generate our own BANGER TWEETS.\\n\\nBut it would be cool to also display the tweet these ideas are referencing from the beginning. That way we\u2019d have a bit more context on where the ideas came from.\\n\\nLet\u2019s do that then! In your `MainPage` file, at the very top, add the following import:\\n\\n```tsx\\nimport { TwitterTweetEmbed } from \'react-twitter-embed\';\\n```\\n\\nThis allows us to embed tweets with that nice twitter styling.\\n\\nWe already added this dependency to our `main.wasp` file at the beginning of the tutorial, so we can just import and start embedding tweets.\\n\\nLet\u2019s try it out now in our `MainPage` by adding the following snippet above our `<h2>Tweet Draft</h2>` element:\\n\\n```tsx\\n//...\\n\\n<h2>Original Tweet</h2>\\n<div className=\'flex flex-row gap-2 justify-center items-center w-full\'>\\n  <TwitterTweetEmbed tweetId={tweetDraft.originalTweet.tweetId} />\\n</div>\\n\\n<h2>Tweet Draft</h2>\\n//...\\n```\\n\\nGreat. Now we should be sitting pretty \ud83d\ude3b\\n\\n![Untitled](../static/img/build-your-own-twitter-agent/Untitled%208.png)\\n\\nYou might remember from the beginning of the tutorial when we defined the LLM calls, that if your vector store notes don\u2019t turn back a cosine similarity of at least 0.7, your agent will generate its own ideas entirely without using your notes as a guide. \\n\\nAnd since we have NO notes in our vector store at the moment, that\u2019s exactly what it is doing. Which is fine, because we can let it brainstorm for us, and we can select our favorite notes and edit and add them as we see fit.\\n\\nSo you can go ahead and start adding notes whenever you feel like it \ud83d\udcdd.\\n\\nBut, we\u2019ve added our favorite twitter users to the database manually. It would be preferable to do it via an account settings page, right? Let\u2019s make one then.\\n\\n### Creating an Account Settings Page\\n\\nFirst, add the route and page to your `main.wasp` config file, under the other routes:\\n\\n```tsx\\n//...\\n\\nroute AccountRoute { path: \\"/account\\", to: AccountPage }\\npage AccountPage {\\n  authRequired: true,\\n  component: import Account from \\"@client/AccountPage\\"\\n}\\n```\\n\\nNext, let\u2019s create a new page, `src/client/AccountPage.tsx`:\\n\\n```tsx\\nimport Button from \'./Button\';\\nimport { ChangeEvent, useEffect, useState } from \'react\';\\nimport logout from \'@wasp/auth/logout\';\\nimport type { User } from \'@wasp/entities\';\\n\\nconst AccountPage = ({ user }: { user: User }) => {\\n  return (\\n\\t\\t<div className=\'flex flex-col justify-center items-center mt-12 w-full\'>\\n      <div className=\'flex flex-col items-center justify-center gap-4 border border-neutral-700 bg-neutral-100/40 rounded-xl p-1 sm:p-4 w-full\'>\\n        <div className=\'flex flex-row justify-end w-full px-4 pt-2\'>\\n          <Button onClick={logout}>Logout</Button>\\n        </div>\\n        {JSON.stringify(user, null, 2)}\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default AccountPage;\\n```\\n\\nWhen you navigate to [localhost:3000/account](localhost:3000/account), you\u2019ll notice two things, one of them being a logout button. You can see in our `SettingsPage` above that we imported a Wasp-provided `logout` function. We get this \u201cfor free\u201d since we defined our `auth` strategy in the `main.wasp` file \u2014 a big time-saver!\\n\\n![Untitled](../static/img/build-your-own-twitter-agent/Untitled%209.png)\\n\\nBecause we also defined the `AccountPage` route with the `authRequired: true` property, Wasp will automatically pass the logged in user as a prop argument to our page. We can use the user object to display and update our `favUsers`, just as we can see in the image above.\\n\\nTo do that, let\u2019s define a new `updateAccount` action in our `main.wasp` file:\\n\\n```tsx\\naction updateAccount {\\n  fn: import { updateAccount } from \\"@server/account.js\\",\\n  entities: [User]\\n}\\n```\\n\\nNext, let\u2019s create the `updateAccount` action in a new file, `src/server/account.ts`:\\n\\n```tsx\\nimport type { UpdateAccount } from \\"@wasp/actions/types\\";\\nimport HttpError from \\"@wasp/core/HttpError.js\\";\\n\\nexport const updateAccount: UpdateAccount<{ favUsers: string[] }, void> = async ({ favUsers }, context) => {\\n  if (!context.user) {\\n    throw new HttpError(401, \\"User is not authorized\\");\\n  }\\n\\n  try {\\n    await context.entities.User.update({\\n      where: { id: context.user.id },\\n      data: { favUsers },\\n    });\\n    \\n  } catch (error: any) {\\n    throw new HttpError(500, error.message);\\n  }\\n}\\n```\\n\\nRight. Now it\u2019s time to put it all together in our `Account` page. We\u2019re going to create a form for adding new twitter users to scrape tweets from, so at the bottom of your  `src/client/AccountPage.tsx`, below your other code, add the following component:\\n\\n```tsx\\nfunction InputFields({ user }: { user: User }) {\\n  const [isLoading, setIsLoading] = useState(false);\\n  const [fields, setFields] = useState([\'\']);\\n\\n  useEffect(() => {\\n    if (user?.favUsers.length > 0) {\\n      setFields(user.favUsers);\\n    }\\n  }, [user?.favUsers]);\\n\\n  const handleAdd = () => {\\n    setFields([...fields, \'\']);\\n  };\\n\\n  const handleRemove = () => {\\n    const newFields = [...fields];\\n    newFields.splice(fields.length - 1, 1);\\n    setFields(newFields);\\n  };\\n\\n  const handleChange = (e: ChangeEvent<HTMLInputElement>, index: number) => {\\n    const newFields = [...fields];\\n    newFields[index] = e.target.value;\\n    setFields(newFields);\\n  };\\n\\n  const handleSubmit = async () => {\\n    //...\\n  };\\n\\n  return (\\n    <div className=\'w-full p-4\'>\\n      <div className=\'flex flex-row justify-start items-start\'>\\n        <h2 className=\'ml-1 font-bold\'>Trend-Setting Twitter Accounts</h2>\\n      </div>\\n      {fields.map((field, index) => (\\n        <div key={index} className=\'my-2\'>\\n          <input\\n            type=\'text\'\\n            placeholder=\'Twitter Username\'\\n            className=\'w-full bg-white border border-gray-300 rounded-lg py-2 px-4 text-gray-700 focus:border-blue-400 focus:outline-none\'\\n            value={field}\\n            onChange={(e) => handleChange(e, index)}\\n          />\\n        </div>\\n      ))}\\n      <div className=\'my-2 flex flex-row justify-end gap-1\'>\\n        {fields.length > 1 && <Button onClick={handleRemove}>-</Button>}\\n        {fields.length < 10 && (\\n          <Button onClick={handleAdd} className=\'bg-blue-500 text-white px-4 py-2 rounded\'>\\n            +\\n          </Button>\\n        )}\\n      </div>\\n      <Button onClick={handleSubmit} isLoading={isLoading}>\\n        <span>Save</span>\\n      </Button>\\n    </div>\\n  );\\n}\\n```\\n\\nThis component takes care of adding the logged in user\u2019s `favUsers` array to state, and displaying that in information in a set of input components.\\n\\nThe only thing missing from it is to add our `updateAccount` action we just defined earlier. So at the top of the file, let\u2019s import it and add the logic to our `InputFields` submit handler\\n\\n```tsx\\nimport updateAccount from \'@wasp/actions/updateAccount\'; // <--- add this import\\n\\n//...\\n\\nconst handleSubmit = async () => { // < --- add this function\\n    try {\\n      setIsLoading(true);\\n      await updateAccount({ favUsers: fields });\\n    } catch (err: any) {\\n      alert(err.message);\\n    } finally {\\n      setIsLoading(false);\\n    }\\n  };\\n```\\n\\nAlso, in your `AccountPage` make sure to replace the line `{JSON.stringify(user, null, 2)}` with the newly created component `<InputFields user={user} />`. \\n\\nHere is what the entire `AccountPage.tsx` file should now look like in case you get stuck:\\n\\n```tsx\\nimport Button from \'./Button\';\\nimport { ChangeEvent, useEffect, useState } from \'react\';\\nimport logout from \'@wasp/auth/logout\';\\nimport type { User } from \'@wasp/entities\';\\nimport updateAccount from \'@wasp/actions/updateAccount\'\\n\\nconst AccountPage = ({ user }: { user: User }) => {\\n  return (\\n    <div className=\'flex flex-col justify-center items-center mt-12 w-full\'>\\n      <div className=\'flex flex-col items-center justify-center gap-4 border border-neutral-700 bg-neutral-100/40 rounded-xl p-1 sm:p-4 w-full\'>\\n        <div className=\'flex flex-row justify-end w-full px-4 pt-2\'>\\n          <Button onClick={logout}>Logout</Button>\\n        </div>\\n        <InputFields user={user} />\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default AccountPage;\\n\\nfunction InputFields({ user }: { user: User }) {\\n  const [isLoading, setIsLoading] = useState(false);\\n  const [fields, setFields] = useState([\'\']);\\n\\n  useEffect(() => {\\n    if (user?.favUsers.length > 0) {\\n      setFields(user.favUsers);\\n    }\\n  }, [user?.favUsers]);\\n\\n  const handleAdd = () => {\\n    setFields([...fields, \'\']);\\n  };\\n\\n  const handleRemove = () => {\\n    const newFields = [...fields];\\n    newFields.splice(fields.length - 1, 1);\\n    setFields(newFields);\\n  };\\n\\n  const handleChange = (e: ChangeEvent<HTMLInputElement>, index: number) => {\\n    const newFields = [...fields];\\n    newFields[index] = e.target.value;\\n    setFields(newFields);\\n  };\\n\\n  const handleSubmit = async () => {\\n    try {\\n      setIsLoading(true);\\n      await updateAccount({ favUsers: fields });\\n    } catch (err: any) {\\n      alert(err.message);\\n    } finally {\\n      setIsLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <div className=\'w-full p-4\'>\\n      <div className=\'flex flex-row justify-start items-start\'>\\n        <h2 className=\'ml-1 font-bold\'>Trend-Setting Twitter Accounts</h2>\\n      </div>\\n      {fields.map((field, index) => (\\n        <div key={index} className=\'my-2\'>\\n          <input\\n            type=\'text\'\\n            placeholder=\'Twitter Username\'\\n            className=\'w-full bg-white border border-gray-300 rounded-lg py-2 px-4 text-gray-700 focus:border-blue-400 focus:outline-none\'\\n            value={field}\\n            onChange={(e) => handleChange(e, index)}\\n          />\\n        </div>\\n      ))}\\n      <div className=\'my-2 flex flex-row justify-end gap-1\'>\\n        {fields.length > 1 && <Button onClick={handleRemove}>-</Button>}\\n        {fields.length < 10 && (\\n          <Button onClick={handleAdd} className=\'bg-blue-500 text-white px-4 py-2 rounded\'>\\n            +\\n          </Button>\\n        )}\\n      </div>\\n      <Button onClick={handleSubmit} isLoading={isLoading}>\\n        <span>Save</span>\\n      </Button>\\n    </div>\\n  );\\n}\\n```\\n\\nAnd here\u2019s what your `AccountPage` should look like when navigating to [localhost:3000/account](http://localhost:3000/account) (note: the styling may be a bit ugly, but we\u2019ll take care of that later):\\n\\n![Untitled](../static/img/build-your-own-twitter-agent/Untitled%2010.png)\\n\\nFantastic. So we\u2019ve got the majority of the app logic finished \u2014 our own personal twitter \u201cintern\u201d to help us all become thought leaders and thread bois \ud83e\udd23.\\n\\n### Adding a Cron Job\\n\\nBut wouldn\u2019t it be cool if we could automate the `Generate New Ideas` process? Each time you click the button, it takes quite a while for tweets to be scraped, and ideas to be generated, especially if we are generating ideas for a lot of new tweets.\\n\\nSo it would be nicer if we had a cron job (recurring task), that ran automatically in the background at a set interval.\\n\\nWith Wasp, that\u2019s also super easy to set up. To do so, let\u2019s go to our `main.wasp` file and add our job at the very bottom:\\n\\n```tsx\\n//...\\n\\njob newIdeasJob {\\n  executor: PgBoss,\\n  perform: {\\n    fn: import generateNewIdeasWorker from \\"@server/worker/generateNewIdeasWorker.js\\"\\n  },\\n  entities: [User, GeneratedIdea, Tweet, TweetDraft],\\n  schedule: {\\n    // run cron job every 30 minutes\\n    cron: \\"*/30 * * * *\\",\\n    executorOptions: {\\n      pgBoss: {=json { \\"retryLimit\\": 2 } json=},\\n    }\\n  }\\n}\\n```\\n\\nLet\u2019s run through the code above:\\n\\n- Jobs use [pg-boss](https://github.com/timgit/pg-boss), a postgres extension, to queue and run tasks under the hood.\\n- with `perform` we\u2019re telling the job what function we want it to call: `generateNewIdeasWorker`\\n- just like actions and queries, we have to tell the job which entities we want to give it access to. In this case, we will need access to all of our entities.\\n- the schedule allows us to pass some options to pg-boss so that we can make it a recurring task. In this case, I set it to run every 30 minutes, but you can set it to any interval you\u2019d like (tip: change the comment and let github co-pilot write the cron for you). We also tell pg-boss to retry a failed job two times.\\n\\nPerfect. So now, our app will automatically scrape our favorite users\u2019 tweets and generate new ideas for us every 30 minutes. This way, if we revisit the app after a few days, all the content will already be there and we won\u2019t have to wait a long time for it to generate it for us. We also make sure we never miss out on generating ideas for older tweets.\\n\\nBut for that to happen, we have to define the function our job will call. To do this, create a new directory `worker` within the `server` folder, and within it a new file: `src/server/worker/generateNewIdeasWorker`\\n\\n```tsx\\nimport { generateNewIdeas } from \'../ideas.js\';\\n\\nexport default async function generateNewIdeasWorker(_args: unknown, context: any) {\\n  try {\\n    console.log(\'Running recurring task: generateNewIdeasWorker\')\\n    const allUsers = await context.entities.User.findMany({});\\n\\n    for (const user of allUsers) {\\n      context.user = user;\\n      console.log(\'Generating new ideas for user: \', user.username);\\n      await generateNewIdeas(undefined as never, context);\\n      console.log(\'Done generating new ideas for user: \', user.username)\\n    }\\n\\n  } catch (error: any) {\\n    console.log(\'Recurring task error: \', error);\\n  }\\n}\\n```\\n\\nIn this file, all we\u2019re doing is looping through all the users in our database, and passing them via the context object to our `generateNewIdeas` action. The nice thing about jobs is that Wasp automatically passes the `context` object to these functions, which we can then pass along to our action.\\n\\nSo now, at the interval that you set (e.g. 30 minutes), you should notice the logs being printed to the console whenever your job starts automatically running.\\n\\n```bash\\n[Server]  Generating new ideas for user:  vinny\\n```\\n\\nAlright, things are looking pretty good now, but let\u2019s not forget to add a page to view all the notes we added and embedded to our vector store!\\n\\n### Adding a Notes Page\\n\\nGo ahead and add the following route to your `main.wasp` file:\\n\\n```tsx\\nroute NotesPage { path: \\"/notes\\", to: NotesPage }\\npage NotesPage {\\n  authRequired: true,\\n  component: import Notes from \\"@client/NotesPage\\"\\n}\\n```\\n\\nCreate the complementary page, `src/client/NotesPage.tsx` and add the following boilerplate just to get started (we\u2019ll add the rest later):\\n\\n```tsx\\nconst NotesPage = () => {\\n\\n  return (\\n    <>Notes</>\\n  );\\n};\\n\\nexport default NotesPage;\\n```\\n\\nIt would be nice if we had a simple Nav Bar to navigate back and forth between our two pages. It would also be cool if we had our `<AddNote />` input component on all pages, that way it\u2019s easy for us to add an idea whenever inspiration strikes.\\n\\nRather than copying the NavBar and AddNote code to both pages, let\u2019s create a wrapper, or \u201croot\u201d, component for our entire app so that all of our pages have the same Nav Bar and layout. \\n\\nTo do that, in our `main.wasp` file, let\u2019s define our root component by adding a `client` property to our `app` configuration at the very top of the file. This is how the entire `app` object should look like now:\\n\\n```tsx lines={6-8}\\napp twitterAgent {\\n  wasp: {\\n    version: \\"^0.10.6\\"\\n  },\\n  title: \\"twitter-agent\\",\\n  client: { \\n    rootComponent: import App from \\"@client/App\\",\\n  },\\n  db: { \\n    system: PostgreSQL,\\n  },\\n  auth: {\\n    userEntity: User,\\n    onAuthFailedRedirectTo: \\"/login\\",\\n    methods: {\\n      usernameAndPassword: {},\\n    }\\n  },\\n  dependencies: [\\n    (\\"openai\\", \\"3.2.1\\"),\\n    (\\"rettiwt-api\\", \\"1.1.8\\"),\\n    (\\"langchain\\", \\"0.0.91\\"),\\n    (\\"@pinecone-database/pinecone\\", \\"0.1.6\\"),\\n    (\\"@headlessui/react\\", \\"1.7.15\\"),\\n    (\\"react-icons\\", \\"4.8.0\\"),\\n    (\\"react-twitter-embed\\", \\"4.0.4\\")\\n  ],\\n}\\n\\n// entities, operations, routes, and other stuff...\\n```\\n\\nNext, create a new file `src/client/App.tsx` with the following content:\\n\\n```tsx\\nimport \'./Main.css\';\\nimport AddNote from \'./AddNote\';\\nimport { ReactNode } from \'react\';\\nimport useAuth from \'@wasp/auth/useAuth\';\\n\\nconst App = ({ children }: { children: ReactNode }) => {\\n\\n  const { data: user } = useAuth();\\n\\n  return (\\n    <div className=\'min-h-screen bg-neutral-300/70 text-center\'>\\n      <div className=\'flex flex-col gap-6 justify-center items-center mx-auto pt-12\'>\\n        <div className=\'flex flex-row justify-between items-center w-1/2 mb-6 text-neutral-600 px-2\'>\\n          <div className=\'flex justify-start w-1/3\'>\\n            <a href=\'/\' className=\'hover:underline cursor-pointer\'>\\n              \ud83e\udd16 Generated Ideas\\n            </a>\\n          </div>\\n          <div className=\'flex justify-center w-1/3\'>\\n            <a href=\'/notes\' className=\'hover:underline cursor-pointer\'>\\n              \ud83d\udcdd My Notes\\n            </a>\\n          </div>\\n          <div className=\'flex justify-end w-1/3\'>\\n            <a href=\'/account\' className=\'hover:underline cursor-pointer\'>\\n              \ud83d\udc64 Account\\n            </a>\\n          </div>\\n        </div>\\n\\n        <div className=\'flex flex-col gap-4 justify-center items-center w-2/4\'>\\n          {!!user && <AddNote />}\\n          <hr className=\'border border-t-1 border-neutral-100/70 w-full\' />\\n          {children}\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n```\\n\\nWith this defined, Wasp will know to pass all other routes as `children` through our `App` component. That way, we will always show the Nav Bar and `AddNote` component on the top of every page.\\n\\nWe also take advantage of Wasp\u2019s handy `useAuth` hook to check if a user is logged in, and if so we show the `AddNote` component.\\n\\nNow, we can delete the duplicate code on our `MainPage`. This is what it should look like now:\\n\\n```tsx\\nimport { useState } from \'react\';\\nimport generateNewIdeas from \'@wasp/actions/generateNewIdeas\';\\nimport { useQuery } from \'@wasp/queries\';\\nimport getTweetDraftsWithIdeas from \'@wasp/queries/getTweetDraftsWithIdeas\';\\nimport Button from \'./Button\';\\nimport { TwitterTweetEmbed } from \'react-twitter-embed\';\\n\\nconst MainPage = () => {\\n  const [isGenerating, setIsGenerating] = useState(false);\\n\\n  const {\\n    data: tweetDrafts,\\n    isLoading: isTweetDraftsLoading,\\n    error: tweetDraftsError,\\n  } = useQuery(getTweetDraftsWithIdeas);\\n\\n  const handleNewIdeas = async (e: any) => {\\n    try {\\n      setIsGenerating(true);\\n      await generateNewIdeas();\\n    } catch (error: any) {\\n      alert(error.message);\\n    } finally {\\n      setIsGenerating(false);\\n    }\\n  };\\n\\n  if (isTweetDraftsLoading) {\\n    return \'Loading...\';\\n  }\\n\\n  if (tweetDraftsError) {\\n    return \'Error: \' + tweetDraftsError.message;\\n  }\\n\\n  return (\\n    <>\\n      <div className=\'flex flex-row justify-center w-full\'>\\n        <Button onClick={handleNewIdeas} isLoading={isGenerating}>\\n          Generate New Ideas\\n        </Button>\\n      </div>\\n      <div className=\'flex flex-col gap-4 justify-center items-center w-full\'>\\n        {tweetDrafts.map((tweetDraft) => (\\n          <>\\n            <h2 className=\'text-2xl font-bold\'>Generated Ideas</h2>\\n            <div key={tweetDraft.id} className=\'flex flex-col gap-2 justify-center items-center w-full\'>\\n              <h2>Original Tweet</h2>\\n              <div className=\'flex flex-row gap-2 justify-center items-center w-full\'>\\n                <TwitterTweetEmbed tweetId={tweetDraft.originalTweet.tweetId} />\\n              </div>\\n              <h2>Tweet Draft</h2>\\n              <div className=\'flex flex-row gap-2 justify-center items-center w-full\'>\\n                <div className=\'w-full p-4 h-22 bg-blue-100 border rounded-lg w-full\'>{tweetDraft.content}</div>\\n              </div>\\n\\n              {!!tweetDraft.notes && tweetDraft.notes !== tweetDraft.originalTweet.content && (\\n                <>\\n                  <h2>Your Similar Notes</h2>\\n                  {tweetDraft.notes}\\n                </>\\n              )}\\n              <div className=\'flex flex-col gap-2 justify-center items-center w-full\'>\\n                <h2>Ideas</h2>\\n                {tweetDraft.originalTweet.ideas.map((idea) => (\\n                  <div key={idea.id} className=\'flex flex-row gap-2 justify-center items-center w-full\'>\\n                    <div className=\'flex flex-row gap-2 justify-center items-center w-full\'>\\n                      <div className=\'w-full p-4 h-22 bg-neutral-100 border rounded-lg w-full\'>{idea.content}</div>\\n                    </div>\\n                  </div>\\n                ))}\\n              </div>\\n            </div>\\n          </>\\n        ))}\\n      </div>\\n    </>\\n  );\\n};\\nexport default MainPage;\\n```\\n\\nNext, we need to create a query that allows us to fetch all of our added notes and ideas that have been embedded in our vector store.\\n\\nFor that, we need to define a new `query` in our `main.wasp` file:\\n\\n```tsx\\nquery getEmbeddedNotes {\\n  fn: import { getEmbeddedNotes } from \\"@server/ideas.js\\",\\n  entities: [GeneratedIdea]\\n}\\n```\\n\\nWe then need to create that `query` at the bottom of our `src/actions/ideas.ts` file:\\n\\n```tsx\\n// first import the type at the top of the file\\nimport type { GetEmbeddedNotes, GetTweetDraftsWithIdeas } from \'@wasp/queries/types\';\\n\\n//...\\n\\nexport const getEmbeddedNotes: GetEmbeddedNotes<never, GeneratedIdea[]> = async (_args, context) => {\\n  if (!context.user) {\\n    throw new HttpError(401, \'User is not authorized\');\\n  }\\n\\n  const notes = await context.entities.GeneratedIdea.findMany({\\n    where: {\\n      userId: context.user.id,\\n      isEmbedded: true,\\n    },\\n\\t\\torderBy: {\\n      createdAt: \'desc\',\\n    },\\n  });\\n\\n  return notes;\\n}\\n```\\n\\nNow let\u2019s go back to our `src/client/NotesPage.tsx` and add our query. Our new file will look like this:\\n\\n```tsx\\nimport { useQuery } from \'@wasp/queries\';\\nimport getEmbeddedNotes from \'@wasp/queries/getEmbeddedNotes\';\\n\\nconst NotesPage = () => {\\n  const { data: notes, isLoading, error } = useQuery(getEmbeddedNotes);\\n\\n  if (isLoading) <div>Loading...</div>;\\n  if (error) <div>Error: {error.message}</div>;\\n\\n  return (\\n    <>\\n      <h2 className=\'text-2xl font-bold\'>My Notes</h2>\\n      {notes && notes.length > 0 ? (\\n        notes.map((note) => (\\n          <div key={note.id} className=\'flex flex-col gap-2 justify-center items-center w-full\'>\\n            <div className=\'flex flex-row gap-2 justify-center items-center w-full\'>\\n              <div className=\'w-full p-4 h-22 bg-blue-100 border rounded-lg w-full\'>{note.content}</div>\\n            </div>\\n          </div>\\n        ))\\n      ) : notes && notes.length === 0 && (\\n        <div className=\'flex flex-col gap-2 justify-center items-center w-full\'>\\n          <div className=\'w-full p-4 h-22 bg-blue-100 border rounded-lg w-full\'>No notes yet</div>\\n        </div>\\n      )}\\n    </>\\n  );\\n};\\n\\nexport default NotesPage;\\n```\\n\\nCool! Now we should be fetching all our embedded notes and ideas, signified by the `isEmbedded` tag in our postgres database. Your Notes page should now look something like this:\\n\\n![Untitled](../static/img/build-your-own-twitter-agent/Untitled%2011.png)\\n\\n## You Did it! Your own Twitter Intern \ud83e\udd16\\n:::info Help me help you\\n\ud83c\udf1f **If you haven\u2019t yet, please** [star us on GitHub](https://www.github.com/wasp-lang/wasp), especially if you found this useful! If you do, it helps support us in creating more content like this. And if you don\u2019t\u2026 well, we will deal with it, I guess.\\n\\n![https://media.giphy.com/media/3oEjHEmvj6yScz914s/giphy.gif](https://media.giphy.com/media/3oEjHEmvj6yScz914s/giphy.gif)\\n:::\\n\\nAnd that\u2019s it! You\u2019ve now got yourself a semi-autonomous twitter brainstorming agent to help inspire new ideas and keep you actively contributing \ud83d\ude80\\n\\nThere\u2019s way more you can do with these tools, but this is a great start.\\n\\nRemember, if you want to see a more advanced version of this app which utilizes the official Twitter API to send tweets, gives you the ability to edit and add generated notes on the fly, has manual similarity search for all your notes, and more, then you can check out the [\ud83d\udca5 Banger Tweet Bot \ud83e\udd16](https://github.com/vincanger/banger-tweet-bot). \\n\\nAnd, once again, here\'s the repo for the finished app we built in this tutorial: [Personal Twitter Intern](https://github.com/vincanger/twitter-intern)"},{"id":"/2023/06/22/wasp-launch-week-three","metadata":{"permalink":"/wasp-docs/blog/2023/06/22/wasp-launch-week-three","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-06-22-wasp-launch-week-three.md","source":"@site/blog/2023-06-22-wasp-launch-week-three.md","title":"Wasp Launch Week #3: Magic","description":"<ImgWithCaption","date":"2023-06-22T00:00:00.000Z","formattedDate":"June 22, 2023","tags":[{"label":"launch-week","permalink":"/wasp-docs/blog/tags/launch-week"},{"label":"update","permalink":"/wasp-docs/blog/tags/update"}],"readingTime":5.45,"hasTruncateMarker":false,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"Wasp Launch Week #3: Magic","authors":["matijasos"],"image":"/img/lw3/lw3-banner.png","tags":["launch-week","update"]},"prevItem":{"title":"Build Your Own Personal Twitter Agent \ud83e\udde0\ud83d\udc26\u26d3 with LangChain","permalink":"/wasp-docs/blog/2023/06/27/build-your-own-twitter-agent-langchain"},"nextItem":{"title":"Wasp Beta - May 2023","permalink":"/wasp-docs/blog/2023/06/07/wasp-beta-update-may-23"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<ImgWithCaption\\n    alt=\\"Launch Week 3 is coming\\"\\n    source=\\"img/lw3/lw3-banner.png\\"\\n/>\\n\\nBy now, it is a tradition. For the every upcoming launch week, we ask ourselves how can we top the last one? How can we make building full-stack web apps easier, more enjoyable and get rid of even more boilerplate?\\n\\nIf this is the first time you\'re joining, check our previous launches:\\n- [Launch Week 1: Beta](/blog/2022/11/26/wasp-beta-launch-week)\\n- [Launch Week 2: Pizzazz](/blog/2023/04/11/wasp-launch-week-two)\\n\\nOur first launch week was about making the promise of Wasp Alpha a reality, so you can build what you envisioned and deploy your app to production. The second launch made the whole experience much more polished, getting closer to the DX you\'d expect from a mature web framework.\\n\\n## Why Magic?\\n\\nFor this launch, with all the basics in place and [you having built thousands of apps with Wasp](/blog/2023/01/31/wasp-beta-launch-review) (thank you!), **we started pushing the boundaries of what web frameworks can do**, utilising Wasp\'s unique DSL/compiler approach. This is still barely scratching the surface, but you\'ll be able to try it out yourself and get a taste of what the future of web development will look like.\\n\\n<ImgWithCaption\\n    alt=\\"Magic - LW3 in a nutshell\\"\\n    source=\\"img/lw3/magic.gif\\"\\n    caption=\\"This launch week in a nutshell.\\"\\n/>\\n\\n\\n## What\'s coming \ud83d\udc1d\\n\\nEvery day next week, starting Monday, June 26, we\'ll highlight a major new feature in Wasp. We\'ll update this post daily as we reveal each feature, so make sure to keep coming back! Follow us on twitter ([@wasplang](https://twitter.com/WaspLang)) to stay in the loop and also [join our Discord](https://discord.gg/rzdnErX) to join the community and get help as you\'re trying Wasp out.\\n\\n\\n## Launch party \ud83d\ude80\ud83c\udf89\\n\\n<ImgWithCaption\\n    alt=\\"launch event 2 - screenshot\\"\\n    source=\\"img/lw3/lw2-event-screenshot.png\\"\\n    caption=\\"A bit of the atmosphere from our last launch party\\"\\n/>\\n\\nWhat would a launch be without a proper event and a party? A boring, heartless event, that\'s what!\\n\\nThat\'s why we\'ll get together to celebrate the launch, our community (you!) and all the hard work that\'s been put into this new, fresh edition of Wasp. You will also get to meet the team and hear first-hand from the makers about the latest features and plans for the future.\\n\\nThe party starts at **9.30 am EDT / 3.30 pm CET** - sign up [here](https://discord.gg/p7TzVUn2?event=1121156549080002680) and make sure to mark yourself as \\"interested\\"!\\n\\n<ImgWithCaption\\n    alt=\\"launch event - how to join\\"\\n    source=\\"img/lw3/lw-event-how-to-join.png\\"\\n/>\\n\\nAs per usual, there will be memes, swag and lots of interesting dev discussions!\\n\\n## Auto CRUD | Monday: The future is now \ud83d\udef8\\n\\n<ImgWithCaption\\n    alt=\\"The future is now\\"\\n    source=\\"img/lw3/future-is-now.gif\\"\\n/>\\n\\nWe\'ll immediately kick things off with a bang! What\'s the one thing that all developers universally agree is something they\'d like to do less of? Writing boilerplate CRUD logic, of course! Yet, it\'s 2023 and the best we managed to do is get an AI write it half-correctly for us and we still have to maintain it.\\n\\nThat\'s what we are coming after - is it possible to avoid writing (or generating) CRUD code in the first place? How far can we take it and what\'s then even left for your to code? Join us on Monday and find out!\\n\\n**When**: Monday, June 26 2023\\n\\n**Read more about it**:\\n- [Twitter thread introing Auto CRUD](https://twitter.com/WaspLang/status/1673376102792806402)\\n- [Docs Guide to Auto CRUD](/docs/guides/crud)\\n\\n## WebSocket Support | Tuesday: Be real, time \ud83d\udd0c\u23f1\\n\\n<ImgWithCaption\\n    alt=\\"Realtime\\"\\n    source=\\"img/lw3/realtime.jpg\\"\\n/>\\n\\nSometimes, you just want to keep it real. Especially when you are dealing with time. I\'ve been dropping some hints here - have you figured out what is this about? If yes, drop us a line on twitter ([@wasplang](https://twitter.com/WaspLang)) and the first one to get it right will get a special (real and timely) award!\\n\\nAnother situation where you might want to keep things real is when chatting to someone, especially via the text (*wink wink hint hint \ud83e\udde6*).\\n\\n**When**: Tuesday, June 27 2023\\n\\n**Read more about it**:\\n- [Intro Twitter thread](https://twitter.com/WaspLang/status/1673742264873500673)\\n- [Docs Guide](/docs/guides/websockets)\\n\\n## Wednesday: Community Day \ud83e\udd17\\n\\n<ImgWithCaption\\n    alt=\\"Community\\"\\n    source=\\"img/lw3/hug.gif\\"\\n    caption=\\"Just let it all out\\"\\n/>\\n\\nCommunity is at the centre of Wasp, and Wednesday is at the centre of the week, so it\'s only appropriate to marry the two together. We\'ll spotlight the amazing OSS tools Wasp is built on top of and also you - all the cool stuff you have built with Wasp and how you\'re contributing every day to make our community better!\\n\\n**When**: Wednesday, June 28 2023\\n\\n**Read more about it**: [What can you build with Wasp?](/blog/2023/06/28/what-can-you-build-with-wasp)\\n\\n## Wasp LSP 2.0 | Thursday: Take care of your tools \ud83d\udee0\\n\\n<ImgWithCaption\\n    alt=\\"Tools\\"\\n    source=\\"img/lw3/tools.gif\\"\\n/>\\n\\nIt\'s a well known fact that a developer is only as good as the tools they are using. That actually applies to anybody - if Gimli hadn\'t spent time sharpening his axe, he wouldn\'t stand a chance against these orcs, would he?\\n\\nUs at Wasp, we are pretty much the same as Gimli - we take our tools seriously. As we are innovating on the framework features, our goal is to do the same with the tooling you use with Wasp. Get ready to get your hands dirty (with code).\\n\\n**When**: Thursday, June 29 2023\\n\\n**Read more about it**: [A blog post introing Wasp LSP 2.0](https://wasp-lang.dev/blog/2023/06/29/new-wasp-lsp)\\n\\n## GPT Web App Generator | Friday: Waspularity \ud83e\udd16 + Tutorial-o-thon!\\n\\n<ImgWithCaption\\n    alt=\\"Waspularity\\"\\n    source=\\"img/lw3/waspularity.png\\"\\n/>\\n\\nFor the final day of the launch week, we have a really cool surprise for you. I\'ll just say it\'s something like Matrix but the robots are your friends and there\'s no that weird guy with sunglasses to ruin everything. And there might be cake.\\n\\nTo wrap the week up, we\'ll also start another hackathon, but this time in a bit different format. Since the best way to learn something is to teach it to others, we\'ll focus on tutorials this time! May the best tutorial win - more info coming soon.\\n\\n**When**: Friday, June 30 2023\\n\\n**Read more about it**:\\n- [Intro Twitter thread](https://twitter.com/WaspLang/status/1674814873312608257)\\n- [Try GPT Web App Generator!](https://magic-app-generator.wasp-lang.dev/)\\n- [Join our Tutorial Jam #1 and win prizes!](http://localhost:3002/blog/2023/06/30/tutorial-jam)\\n\\n## Recap\\n\\n- **We are kicking off Launch Week #3 on Mon, June 26, at 9.30am EDT / 3.30pm CET** - make sure to [register for the event](https://discord.gg/p7TzVUn2?event=1121156549080002680)!\\n- **Launch Week #3 brings a ton of new exciting features** - we\u2019ll highlight one each day, starting Monday. Follow us on [twitter](https://twitter.com/WaspLang) and [join our Discord](https://discord.gg/rzdnErX) to stay in the loop!\\n- **Following launch week, we\u2019ll announce a tutorial-o-thon** - get your writing gear ready!"},{"id":"/2023/06/07/wasp-beta-update-may-23","metadata":{"permalink":"/wasp-docs/blog/2023/06/07/wasp-beta-update-may-23","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-06-07-wasp-beta-update-may-23.md","source":"@site/blog/2023-06-07-wasp-beta-update-may-23.md","title":"Wasp Beta - May 2023","description":"<ImgWithCaption","date":"2023-06-07T00:00:00.000Z","formattedDate":"June 7, 2023","tags":[{"label":"update","permalink":"/wasp-docs/blog/tags/update"}],"readingTime":5.84,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"Wasp Beta - May 2023","authors":["matijasos"],"image":"/img/update-may-23/banner.png","tags":["update"]},"prevItem":{"title":"Wasp Launch Week #3: Magic","permalink":"/wasp-docs/blog/2023/06/22/wasp-launch-week-three"},"nextItem":{"title":"Hackathon #2: Results & Review","permalink":"/wasp-docs/blog/2023/05/19/hackathon-2-review"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<ImgWithCaption\\n    alt=\\"Wasp Update May 23\\"\\n    source=\\"img/update-may-23/banner.png\\"\\n/>\\n\\n*Want to stay in the loop? \u2192 [Join our newsletter!](/#signup)*\\n\\nHola Waspeteers \ud83d\udc1d,\\n\\nWhat did one plant say to the other? Aloe! Long thyme no see. \ud83c\udf31\\n\\nNow that we\'ve set the tone, let me guide you through what\'s new in Waspworld (that would be a cool theme park, right?):\\n\\n\x3c!--truncate--\x3e\\n\\n## Wasp Hackathon 2.0 is over - congrats to the winners! \ud83d\udc1d \ud83c\udfc6 \ud83d\udc1d\\n\\n<ImgWithCaption\\n    alt=\\"Congrats to the hackathon winners!\\"\\n    source=\\"img/update-may-23/typergotchi.png\\"\\n    caption=\\"Shoutout to the winning team - Typergotchi! They even made a cool illustration with our mascot, Da Boi \ud83d\udc1d \ud83d\ude0e\\"\\n/>\\n\\nWe had more submissions than ever, and the quality and creativity of your apps were really at the next level. We had everything from admin dashboards and GPT-powered story-telling apps to the actual games.\\n\\n<ImgWithCaption\\n    alt=\\"Hackathon testimonial\\"\\n    source=\\"img/update-may-23/testimonial-hackathon.png\\"\\n/>\\n\\nSee all the winners and read a full Hackathon 2.0 review [\ud83d\udc49 here \ud83d\udc48](/blog/2023/05/19/hackathon-2-review).\\n\\n## Wasp Launch Week #3 is in the making - get ready for the Magic \ud83d\udd2e \ud83e\uddd9\\n\\nAs it always happens in the wilderness, after one launch week, there comes another one. And who are we to defy the laws of nature - thus, get ready for Launch Week #3!\\n\\nWe are aiming for the end of June, but we\'ll announce the exact date soon. Make sure to [follow us on Twitter](https://twitter.com/WaspLang) or/and [join our Discord](https://discord.gg/rzdnErX) to stay in the loop.\\n\\n<ImgWithCaption\\n    alt=\\"Beautiful\\"\\n    source=\\"img/update-may-23/beautiful.gif\\"\\n    caption=\\"When you see it \u2728\\"\\n/>\\n\\n### After Pizzazz \ud83c\udf55 ...\\nAs you might remember, the motto/topic of our [last launch](/blog/2023/04/11/wasp-launch-week-two) was *Pizzaz*, which referred to improving the developer experience in Wasp - full-stack auth, one-line deployment, type safety, db tooling, ...\\n\\n### ... Comes Magic! \ud83d\udd2e\\nWhile DX will always be our top priority, we\'re now shifting gears a bit - the keyword we chose to represent our next launch is \u2728 *Magic* \u2728. The reason is that now that we have a majority of the features you\'d expect in a web framework in place, **we can start utilizing Wasp\'s unique compiler-driven approach to offer next-level features no other framework can!**\\n\\n### LW3 Sneak Peek \ud83e\udd2b \ud83d\udc40\\nMore details coming soon, but in the meanwhile, here are some of the features we\'re most excited about:\\n\\n#### \ud83d\udea7 Wasp AI \ud83e\udd16 \u2728\\nThere is no mAgIc without AI! We cannot share many details on this yet, but it is something we\'ve been exploring a lot lately. Our previous experiments have shown that, due to its declarative and human-readable nature, Wasp is naturally a very good fit for LLMs.\\n\\nWe\'ll take this to the next level for our next launch - stay tuned!\\n\\n#### \ud83d\udea7 Auto CRUD\\nAlthough Wasp helps a lot with bootstrapping your app, one repetitive thing that you have to do every time is implement \\"standard\\" CRUD operations for your data models.\\n\\nWe decided to put a stop to it - welcome our new (incoming) feature, Auto CRUD!\\n\\n<ImgWithCaption\\n    alt=\\"Auto CRUD\\"\\n    source=\\"img/update-may-23/auto-crud.png\\"\\n    caption=\\"Syntax proposal for the new Auto CRUD feature\\"\\n/>\\n\\nAll you have to do is specify in your .wasp file which CRUD operations you want, and they will be auto-generated for you to use in your JS/TS code. **The best part is when you update your data model, these will get updated as well! \ud83e\udd2f**\\n\\nThis feature is also a really good showcase of Wasp\'s compiler muscles - the best you could get with a traditional framework approach is scaffolding, which means spitting out code that will quickly get outdated and that you have to maintain.\\n\\n[See a 2-min demo of Wasp Auto CRUD in action](https://www.youtube.com/watch?v=IzBxpqV5USE&ab_channel=Wasp) - by our founding engineer Miho\\n\\n<ImgWithCaption\\n    alt=\\"Showing off compiler muscles\\"\\n    source=\\"img/update-may-23/muscles.gif\\"\\n    caption=\\"Our compiler right now\\"\\n/>\\n\\n#### \ud83d\udea7 Advanced syntax completion for .wasp files (LSP)\\n\\n<ImgWithCaption\\n    alt=\\"Improved LSP\\"\\n    source=\\"img/update-may-23/new-lsp.png\\"\\n/>\\n\\nWe\'re making our [VS Code extension](https://marketplace.visualstudio.com/items?itemName=wasp-lang.wasp) even better! So far it has provided highlighting and auto-completion for top-level declarations (e.g., *route, entity, query*, ...), but now it\'s going even deeper. Every property will display its full type as you are typing it out + you\'ll get a context-aware auto-completion. \\n\\n\\n#### \ud83d\udea7 Support for web sockets \ud83d\udd0c \ud83e\udde6!\\nWasp will soon support Web Sockets! This will allow you to have a persistent, real-time connection between your client and server, which is great for chat apps, games, and more.\\n\\n<ImgWithCaption\\n    alt=\\"Web sockets in Wasp\\"\\n    source=\\"img/update-may-23/web-sockets.png\\"\\n    caption=\\"Defining a new web socket in Wasp config file\\"\\n/>\\n\\nFor now it is a stand-alone feature, but it opens some really interesting possibilities - e.g. combining this with Wasp\'s query/action system and letting you declare a particular query to be \\"live\\". Just an idea for now but something to keep in mind as we test and receive more feedback on this feature.\\n\\n## From the blog \ud83d\udcd6\\n- [How I Built CoverLetterGPT - SaaS app with the PERN stack, GPT, Stripe, & Chakra UI](/blog/2023/04/17/How-I-Built-CoverLetterGPT) - our one and only Vince shares the story behind CoverLetterGPT; how he built it and got thousands of users in just a few weeks\\n- [Hackathon #2: Results & Review](/blog/2023/05/19/hackathon-2-review) - see how our hackathon went and what the contestants think about Wasp!\\n\\n## The community buzz \ud83d\udc1d \ud83d\udcac\\nLast month was super buzzy! We got several awesome reviews, and Wasp also got picked up by a couple of YouTube dev influencers:\\n\\n<ImgWithCaption\\n    alt=\\"Wasp testimonial\\"\\n    source=\\"img/update-may-23/testimonial-jon.png\\"\\n/>\\n\\n- \ud83c\udfac [Build Full-Stack Notes App w/ Wasp! (ReactJS, Prisma, Node)](https://www.youtube.com/watch?v=AA4ckj1P5QY&t=12s&ab_channel=webdecoded) - an amazing 30-min overview of how to build a classic notes app with Wasp\\n- \ud83c\udfac [Live Coding Serverlesspresso with WaspLang!](https://www.youtube.com/watch?v=c3-bbzrdC8E&ab_channel=DevAgrawal) - 4-hour session of live coding a coffee ordering app. Only for the most hardcore folks plus you\'ll need a lot of coffee :D\\n- \u2712\ufe0f [Wasp Configuration Language: Simplify Full Stack App Creation](https://blog.oleggulevskyy.dev/wasp-configuration-language-simplify-full-stack-app-creation) - a lightweight overview of Wasp and why the author prefers it to Next/T3\\n- \u2712\ufe0f [Wasp(athon) impressions & some proposals](https://medium.com/@umbrien/wasp-athon-impressions-some-proposals-8f3726890009) - from one of our hackathon contestants - first impressions and spot-on ideas for the next features\\n\\n## Wasp GitHub Star Growth - 2,825 \u2b50\\nGetting close to the big 3,000! Huge thanks to all our contributors and stargazers - you are amazing!\\n\\n<ImgWithCaption\\n    alt=\\"GitHub stars - almost 3,000!\\"\\n    source=\\"img/update-may-23/github-stars.png\\"\\n    caption=\\"Almost 3,000 stars! \ud83d\udc1d \ud83d\ude80\\"\\n/>\\n\\nAnd if you haven\'t yet, please [star us on Github](https://wasp-lang.dev/docs)! Yes, we are shameless star beggars, but if you believe in the project and want to support it that\'s one of the best ways to do it (next to actually building something with Wasp - [go do that too](https://wasp-lang.dev/docs)! :D)\\n\\n## That\'s a wrap! \ud83c\udf2f\\n\\n<ImgWithCaption\\n    alt=\\"A dramatic goodbye gif\\"\\n    source=\\"img/update-may-23/goodbye-dramatic.gif\\"\\n    caption=\\"A dramatic goodbye - don\'t ever let go\\"\\n/>\\n\\nThat\'s it for this month and thanks for reading! Since you\'ve come this far, you deserve one final treat - a Wasp-themed joke generated by ChatGPT:\\n\\n<ImgWithCaption\\n    alt=\\"GPT Wasp joke\\"\\n    source=\\"img/update-may-23/gpt-wasp-joke.png\\"\\n    caption=\\"Good one, dad.\\"\\n/>\\n\\nFly high, and we\'ll see you soon \ud83d\udc1d \ud83d\udc1d,  \\nMatija, Martin and the Wasp team"},{"id":"/2023/05/19/hackathon-2-review","metadata":{"permalink":"/wasp-docs/blog/2023/05/19/hackathon-2-review","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-05-19-hackathon-2-review.md","source":"@site/blog/2023-05-19-hackathon-2-review.md","title":"Hackathon #2: Results & Review","description":"To finalize Wasp\'s Launch Week #2, we held our second Hackathon. Just like the \\"Betathon\\" before it, it was an open hackathon where the only requirement was to build something cool with Wasp!","date":"2023-05-19T00:00:00.000Z","formattedDate":"May 19, 2023","tags":[{"label":"fullstack","permalink":"/wasp-docs/blog/tags/fullstack"},{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"hackathon","permalink":"/wasp-docs/blog/tags/hackathon"},{"label":"startups","permalink":"/wasp-docs/blog/tags/startups"}],"readingTime":5.39,"hasTruncateMarker":true,"authors":[{"name":"Vinny","title":"DevRel @ Wasp","url":"https://vincanger.github.io","email":"vince@wasp-lang.dev","imageURL":"https://vincanger.github.io/assets/vince_smiley.jpg","key":"vinny"}],"frontMatter":{"title":"Hackathon #2: Results & Review","authors":["vinny"],"image":"/img/hackathon2/hackathon-banner-winner.png","tags":["fullstack","webdev","hackathon","startups"]},"prevItem":{"title":"Wasp Beta - May 2023","permalink":"/wasp-docs/blog/2023/06/07/wasp-beta-update-may-23"},"nextItem":{"title":"Wasp Hackathon #2 - Let\'s \\"hack-a-ton\\"!","permalink":"/wasp-docs/blog/2023/04/27/wasp-hackathon-two"}},"content":"import ImgWithCaption from \'./components/ImgWithCaption\'\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nTo finalize [Wasp\'s Launch Week #2](https://wasp-lang.dev/blog/2023/04/11/wasp-launch-week-two), we held our second Hackathon. Just like the \\"Betathon\\" before it, it was an open hackathon where the only requirement was to build something cool with Wasp! \\n\\nIn this post, I\u2019ll give a quick overview of:\\n\\n- the hackathon results \ud83c\udfc6\\n- how the hackathon was organized\\n- how we promoted it\\n- the community response\\n\\n\x3c!--truncate--\x3e\\n\\n## \u2026and the Winners Are:\\n\\nWhat\u2019s a hackathon without the participants!? Let\u2019s get this post off to a proper start by congratulating our winners and showcasing their work. \ud83d\udd0d\\n\\n\\n### \ud83e\udd47 Typergotchi\\n<ImgWithCaption\\n    alt=\\"Typergotchi\\"\\n    source=\\"img/hackathon2/typergotchi.png\\"\\n/>\\n\\nOur unofficial mascot, Da Boi, makes his debut app appearance in this fun, feature-rich typing game!\\n\\n- View the [App](https://typergotchi.up.railway.app/) & [GitHub Repo](https://github.com/Umbrien/typergotchi)\\n- Follow [Umbrien](https://github.com/Umbrien) and [kg04ls](https://github.com/kg04ls)\\n- \ud83c\udf89 Prizes: Wasp-colored Mechanical Keyboard, Wasp swag\\n\\n> \u201c*Wasp makes building fullstack apps fast and fun. We\'ve done lots of hackthons in the past, and we couldn\'t pass up the chance to win a mechanical keyboard :)\u201d* - Umbrien & kg04ls\\n> \\n\\n\\n### \ud83e\udd48 Office Wars\\n<ImgWithCaption\\n    alt=\\"Office Wars\\"\\n    source=\\"img/hackathon2/office-wars.png\\"\\n/>\\n\\nA turn-based, multi-player strategy game where you command your tank across a hexagonal map. A great way to keep your coworkers engaged while you wait for your code to compile!\\n\\n- View the [App](https://office-wars-client.fly.dev/login) & [GitHub Repo](https://github.com/Kajatin/office-wars)\\n- Follow [Roland](https://github.com/Kajatin) & [Lu\xeds](https://github.com/LudeeD)\\n- \ud83c\udf89\xa0Prizes: Some personalized gifts from the Wasp team, and Wasp swag\\n\\n> \u201c*We love how Wasp brings the tools that are already being used by developers under the same umbrella. It\'s very streamlined and **makes building fullstack apps easy to accomplish**... like django but w/ more superpowers\u201d* - Roland & Lu\xeds\\n> \\n\\n\\n### \ud83e\udd49\xa0Tied for Third: Bee Pretty & StorAI\\n<ImgWithCaption\\n    alt=\\"Bee Pretty\\"\\n    source=\\"img/hackathon2/bee-pretty.svg\\"\\n    width=\\"200px\\"\\n/>\\n\\n- View the [Bee Pretty GitHub Repo](https://github.com/mkinkela1/BeePretty )\\n- Follow [mkinkela1](https://github.com/mkinkela1/)\\n\\n<ImgWithCaption\\n    alt=\\"StorAI\\"\\n    source=\\"img/hackathon2/storai.png\\"\\n/>\\n\\n- View [StorAI](https://stor-ai-client.fly.dev/) & its [GitHub Repo](https://github.com/Kikketer/StorAI)\\n- Follow [Kikketer](https://github.com/Kikketer)\\n- \ud83c\udf89\xa0Prizes: Wasp Swag\\n\\n> *After 5 minutes of working with Wasp I thought, this is phenomenal! So much just works out of the box -- **everything was flawless**\\" - mkinkela1*\\n>\\n\\n### \ud83e\udd73\xa0And A Big Round of Applause for the Rest of the Participants!\\n\\nThanks so much to rest of the participants:\\n\\n- Max for submitting [Feedback Hub](https://github.com/maksim36ua/feedback_hub), which we award \\"the most SaaS-y app\\". \\n- Richard for submitting [Promise](https://github.com/Fecony/promise), for winning the \\"best last-minute minimal-effort submission\\" award.\\n- Swarnavo for submitting his [Dashboard Panel](https://github.com/swarnavopramanik) app.\\n\\n\\n## Hackathon How-to\\n\\nFor our first hackathon, the \\"Betathon\\", we announced and started it on the final day of our launch week. Looking back, this probably wasn\'t the best approach because it didn\'t give people much time to prepare. This time around, we announced the hackathon a week in advance, giving people a bit more time to prepare their projects. \\n\\n<ImgWithCaption\\n    alt=\\"Wasp Betathon Homepage\\"\\n    source=\\"img/hackathon2/hackathon-2-homepage.png\\"\\n    caption=\\"Our dedicated hackathon landing page w/ intro video & countdown timer\\"\\n/>\\n\\nAnd just like last time, we kept the Hackathon rules simple: no categories, no constraints, just 10 days to create any fullstack web app using Wasp, alone or in a team of up to 4 people.\\n\\n<ImgWithCaption\\n    alt=\\"Keyboard\\"\\n    source=\\"img/betathon/keyboard.png\\"\\n/>\\n\\nWe may be a bit unoriginal here, but we also decided to offer the same grand prize as the Betathon: a Wasp-colored mechanical keyboard. On top of that, runner-ups also got some project-related prizes, as well as Wasp beanies, shirts, and other swag. Of course, we also spotlight the winner\u2019s on our social media accounts.\\n\\nSomething new we did this time was hold a post-hackathon presentation event on Discord, thanks to a suggestion made by [Max](https://twitter.com/maksim36ua), one of our most dedicated contributers. We gave each team a chance to present their projects and talk a bit about their experience. The turnout was great, with almost all the teams participating, and it helped us to get to know the faces behind the apps. Not only was this a great way to connect more with our community, but it also gave us some insight into where are users are coming from, what they\'re interested in, and what they\'re looking for in Wasp. \\n\\n## Promotion\\n\\nAs of late, we\'ve made an effort to promote exemplary apps built with Wasp, as well as create some of our own. This has been a great way to show off Wasp\'s capabilities, and has resulted in a noticeable increase in interest and traffic. Therefore, for the Hackathon, we let the organic interest in Wasp be the driver for the Hackathon, as we didn\'t do much promotion outside of our own channels, nor did we partner with any other sponsors this time. We simply announced the Hackathon and directed people to our [Hacakthon homepage](https://betathon.wasp-lang.dev) we created.\\n\\nThe hackathon page is nice to have as a central spot for all the rules and relevant info. We also added a fun intro video using AI-generated narration of a possibly well-known actor \ud83d\ude0e. Overall, the effort put into the homepage gives participants the feeling that they\u2019re entering into a serious contest and committing to something of substance, while the light-heartedness of the promotion material lets them know that it\'s more about fun than serious prizes. But even in the abscence of big winnings, the quality of the submissions were suprisingly high. Intrinsic motivation, ftw! \ud83e\udd29\\n\\n<ImgWithCaption\\n    alt=\\"Hackathon Wasp app repo\\"\\n    source=\\"img/betathon/github.png\\"\\n    caption=\\"Wanna host your own Hackathon? Use our template app!\\"\\n/>\\n\\nAgain, just like we did previously, we wrote the Hackathon Homepage with Wasp, and put the [source code up on our GitHub](https://github.com/wasp-lang/wasp/tree/main/examples/hackathon). We thought it might inspire people to build with Wasp, using it as a guide while creating their own projects for the hackathon, plus it could be used by others in the future if they want to host their own hackathon. \ud83d\udcbb\\n\\n### The Response 2.0\\n\\nWe were really pleased to see the response to the Hackathon surpass our expectations, yet again. The number, quality, and creativity of the submissions were even better than the Betathon. We also had a lot of fun interacting with the participants, and we\'re looking forward to doing it again soon.\\n\\nIt\'s reaffirming to see Wasp grow along with our community, as they build more and more cool stuff with it. Events like this give us a morale and confidence boost as it confirms that we\'re building something the community wants. \\n\\n**Thanks so much again to the participants for their hard work and contributions. We\'re grateful and happy to have you along for the ride! \ud83d\udc1d\ud83d\ude80**"},{"id":"/2023/04/27/wasp-hackathon-two","metadata":{"permalink":"/wasp-docs/blog/2023/04/27/wasp-hackathon-two","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-04-27-wasp-hackathon-two.md","source":"@site/blog/2023-04-27-wasp-hackathon-two.md","title":"Wasp Hackathon #2 - Let\'s \\"hack-a-ton\\"!","description":"---","date":"2023-04-27T00:00:00.000Z","formattedDate":"April 27, 2023","tags":[{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"ai","permalink":"/wasp-docs/blog/tags/ai"},{"label":"gpt","permalink":"/wasp-docs/blog/tags/gpt"},{"label":"fullstack","permalink":"/wasp-docs/blog/tags/fullstack"},{"label":"PERN","permalink":"/wasp-docs/blog/tags/pern"},{"label":"stripe","permalink":"/wasp-docs/blog/tags/stripe"},{"label":"chakra","permalink":"/wasp-docs/blog/tags/chakra"},{"label":"saas","permalink":"/wasp-docs/blog/tags/saas"}],"readingTime":1.75,"hasTruncateMarker":true,"authors":[{"name":"Vinny","title":"DevRel @ Wasp","url":"https://vincanger.github.io","email":"vince@wasp-lang.dev","imageURL":"https://vincanger.github.io/assets/vince_smiley.jpg","key":"vinny"}],"frontMatter":{"title":"Wasp Hackathon #2 - Let\'s \\"hack-a-ton\\"!","authors":["vinny"],"image":"/img/hackathon2/hackathon-banner.png","tags":["wasp","ai","gpt","fullstack","PERN","stripe","chakra","saas"]},"prevItem":{"title":"Hackathon #2: Results & Review","permalink":"/wasp-docs/blog/2023/05/19/hackathon-2-review"},"nextItem":{"title":"How I Built CoverLetterGPT - SaaS app with the PERN stack, GPT, Stripe, & Chakra UI","permalink":"/wasp-docs/blog/2023/04/17/How-I-Built-CoverLetterGPT"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<br/>\\n<div style={{ textAlign: \\"center\\", width: \\"100%\\", height: \\"400px\\", display: \\"inline-block\\" }}>\\n<iframe height=\\"100%\\" width =\\"100%\\" src=\\"https://www.youtube.com/embed/ts2mQHLBnc0\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen=\\"true\\"></iframe>\\n</div>\\n\\n\x3c!--truncate--\x3e\\n\\n\\n---\\nSo Launch Week #2 has officially come to an end, and as the tradition goes, the end of the launch week means the beginning of a hackathon! \\n\\nWe\'ve launched a ton of new features for you to build your Hackathon project with, including:\\n- <a href=\\"https://wasp-lang.dev/blog/2023/04/12/auth-ui\\">full-stack auth</a>, \\n- support for sending emails, \\n- the ability to add custom API routes, \\n- full-stack type safety,\\n- <a href=\\"https://wasp-lang.dev/blog/2023/04/11/wasp-launch-week-two#thursday-apr-13---deploy-your-app-to-flyio-with-a-single-cli-command\\">one-line deployment to Fly.io</a>...\\n\\nYou can read all it in this <a href=\\"https://wasp-lang.dev/blog/2023/04/11/wasp-launch-week-two\\"> blog post</a>, or watch a <a href=\\"https://www.youtube.com/shorts/YDqh7dSW8ZQ\\">1-minute video</a> showing how it all works in practice \ud83c\udfac!\\n\\n<ImgWithCaption\\n    width=\\"30%\\"\\n    caption=\\"Launch Week #2 Features -- YouTube Short\\"\\n    alt=\\"Launch Week #2 Features -- YouTube Short\\"\\n    source=\\"/img/hackathon2/lw2-short.png\\"\\n/>\\n\\nEven better, we\'ve got a new starter templates feature that lets you create a new project with a pre-built template, so you can get started even faster! Like this sweet <a href=\\"https://github.com/wasp-lang/SaaS-Templaate-GPT\\">SaaS template</a> with GPT, Stripe, SendGrid, and Tailwind UI already integrated:\\n\\n<ImgWithCaption\\n  source=\\"/img/lw2/wasp-saas-template.png\\"\\n  caption=\\"Wasp SaaS Template w/ GPT, Stripe, and more \ud83c\udf8a\\"\\n/>\\n\\nJust run `wasp new my-project -t saas` and you\'re good to go.\\n\\nThe prizes for the hackathon include <b>an awesome Wasp-themed mechanical keyboard, tons of Wasp swag, and more cool stuff</b> (e.g., virtual hugs from the team)!\\n\\nThe only rule is to use Wasp, and you can build whatever you want (but both you and I know it\'s going to be a GPT-powered app, so make sure to use <a href=\\"https://github.com/wasp-lang/SaaS-Templaate-GPT\\">our template</a>).\\n\\nThe applications are open, and the hackathon starts on April 28th and ends May 7th. You can apply (solo or with a team) here:\\n\\n<div style={{ textAlign: \\"center\\"}}>\\n  <a href=\\"https://hackathon.wasp-lang.dev\\"><span style={{ fontSize: \\"26px\\"}}> \ud83c\udfc6 Join the Wasp Hackathon 2.0! \ud83c\udfc6</span></a>\\n</div>\\n<br/>\\n\\nGood luck and Happy Hacking \ud83d\udc1d\ud83d\ude80!\\n<br/>\\n<hr/>\\n\\n*Want to stay in the loop? \u2192 [Join our newsletter!](https://wasp-lang.dev/#signup)*"},{"id":"/2023/04/17/How-I-Built-CoverLetterGPT","metadata":{"permalink":"/wasp-docs/blog/2023/04/17/How-I-Built-CoverLetterGPT","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-04-17-How-I-Built-CoverLetterGPT.md","source":"@site/blog/2023-04-17-How-I-Built-CoverLetterGPT.md","title":"How I Built CoverLetterGPT - SaaS app with the PERN stack, GPT, Stripe, & Chakra UI","description":"---","date":"2023-04-17T00:00:00.000Z","formattedDate":"April 17, 2023","tags":[{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"ai","permalink":"/wasp-docs/blog/tags/ai"},{"label":"gpt","permalink":"/wasp-docs/blog/tags/gpt"},{"label":"fullstack","permalink":"/wasp-docs/blog/tags/fullstack"},{"label":"PERN","permalink":"/wasp-docs/blog/tags/pern"},{"label":"stripe","permalink":"/wasp-docs/blog/tags/stripe"},{"label":"chakra","permalink":"/wasp-docs/blog/tags/chakra"},{"label":"saas","permalink":"/wasp-docs/blog/tags/saas"}],"readingTime":2.655,"hasTruncateMarker":true,"authors":[{"name":"Vinny","title":"DevRel @ Wasp","url":"https://vincanger.github.io","email":"vince@wasp-lang.dev","imageURL":"https://vincanger.github.io/assets/vince_smiley.jpg","key":"vinny"}],"frontMatter":{"title":"How I Built CoverLetterGPT - SaaS app with the PERN stack, GPT, Stripe, & Chakra UI","authors":["vinny"],"image":"/img/cover-letter-gpt-yt.png","tags":["wasp","ai","gpt","fullstack","PERN","stripe","chakra","saas"]},"prevItem":{"title":"Wasp Hackathon #2 - Let\'s \\"hack-a-ton\\"!","permalink":"/wasp-docs/blog/2023/04/27/wasp-hackathon-two"},"nextItem":{"title":"Wasp steps up its database game with Fully Managed Dev DB & DB Seeding","permalink":"/wasp-docs/blog/2023/04/13/db-start-and-seed"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<br/>\\n<div style={{ textAlign: \\"center\\", width: \\"100%\\", height: \\"400px\\", display: \\"inline-block\\" }}>\\n<iframe height=\\"100%\\" width =\\"100%\\" src=\\"https://www.youtube.com/embed/D1l0iwGUed0\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen=\\"true\\"></iframe>\\n</div>\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\nLike many other software developers, I enjoy trying out new technologies even if it\'s just to get a feel for what they can do. \\n\\nSo when I first learned about the [OpenAI API](https://platform.openai.com/docs/api-reference), I knew I wanted to give it a try. I had already wanted to create a SaaS app that could help manage the process of applying to numerous jobs, and the prospect of adding GPT into the mix made it even more interesting. So with API access and a bit of free time, I decided to give it a shot.\\n\\nI threw together a simple version of the app in about 3-4 days and [CoverLetterGPT](https://coverlettergpt.xyz) was born, a SaaS app that uses GPT-3.5-turbo to generate, revise, and manage cover letters for you based on your skills and the specific job descriptions. \\n\\nEven though I did think it had potential as a SaaS app, I was approaching it mostly as a way to learn how to build one for the first time. And after seeing so many people \\"building in public\\" and sharing their progress, I thought it would be fun to try it out myself.\\n\\n<div style={{ marginBottom: \\"1rem\\" }}>\\n    <a href=\\"https://twitter.com/hot_town/status/1633873684573323265?s=20\\">\\n        <img src={useBaseUrl(\'img/coverlettergpt.png\')} alt=\\"Hey peeps. Check out http://coverlettergpt.xyz. You can try it out now and create your own cover letters for free (no Payment/API key). I\'m working on A LOT more features. Stay Tuned!\\"/>\\n    </a>\\n</div>\\n\\n\\nSo I started sharing my progress on Twitter, Reddit, and Indie Hackers. I made my first post about it on March 9th, and because I was just experimenting and trying my hand at a SaaS app for the first time, I also [open-sourced the app](https://github.com/vincanger/coverlettergpt) to share the code and what I was learning with others. This led to a lot of interest and great feedback, and I ended up getting featured in the [indiehackers newsletter](https://www.indiehackers.com/post/whats-new-don-t-build-things-no-one-wants-833ee752ba?utm_source=indie-hackers-emails&utm_campaign=ih-newsletter&utm_medium=email), which led to even more interest.\\n\\nWithin the first month, I got over 1,000 sign-ups along with my first paying customers. Pretty surprising, to say the least!\\n\\nSo to continue in the spirit of curiosity, learning, and just \\"wingin\' it,\\" I decided to make a code walkthrough video that explains how I built the app, the tools I used to build it, and a little bit about how I marketed the app without spending any money. \\n\\nAs an extra bonus, I also give a quick introduction to the [free SaaS template](https://github.com/wasp-lang/SaaS-Template-GPT) I created for building your own SaaS app, with or without GPT, on the PERN stack (PostgreSQL/Prisma, Express, React, NodeJS).\\n\\nMy hope is that others will learn something from my experience, and that it could inspire them to try out new technologies and build that app idea they\'ve had in mind (and if they do, they should make sure to share it with me on Twitter [@hot_town](https://twitter.com/hot_town) -- I\'d love to see it!)\\n\\n\\n*Want to stay in the loop? \u2192 [Join our newsletter!](https://wasp-lang.dev/#signup)*"},{"id":"/2023/04/13/db-start-and-seed","metadata":{"permalink":"/wasp-docs/blog/2023/04/13/db-start-and-seed","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-04-13-db-start-and-seed.md","source":"@site/blog/2023-04-13-db-start-and-seed.md","title":"Wasp steps up its database game with Fully Managed Dev DB & DB Seeding","description":"As a full-stack framework, Wasp doesn\u2019t care \u201cjust\u201d about frontend and backend, but it also covers the database!","date":"2023-04-13T00:00:00.000Z","formattedDate":"April 13, 2023","tags":[{"label":"database","permalink":"/wasp-docs/blog/tags/database"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"prisma","permalink":"/wasp-docs/blog/tags/prisma"}],"readingTime":5.085,"hasTruncateMarker":true,"authors":[{"name":"Martin Sosic","title":"Co-founder & CTO @ Wasp","url":"https://github.com/martinsos","email":"martin@wasp-lang.dev","imageURL":"https://github.com/martinsos.png","key":"martinsos"}],"frontMatter":{"title":"Wasp steps up its database game with Fully Managed Dev DB & DB Seeding","authors":["martinsos"],"image":"/img/db-start-and-seed/wasp-db-improvements.png","tags":["database","wasp","webdev","prisma"]},"prevItem":{"title":"How I Built CoverLetterGPT - SaaS app with the PERN stack, GPT, Stripe, & Chakra UI","permalink":"/wasp-docs/blog/2023/04/17/How-I-Built-CoverLetterGPT"},"nextItem":{"title":"Wasp Auth UI: The first full-stack auth with self-updating forms!","permalink":"/wasp-docs/blog/2023/04/12/auth-ui"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\';\\nimport DiscordLink from \'./components/DiscordLink\';\\n\\nAs a full-stack framework, Wasp doesn\u2019t care \u201cjust\u201d about frontend and backend, but it also covers the database!\\n\\nIt does this by allowing you to define Prisma data models in a Wasp file, connecting them to the relevant Wasp Operations, warning you if you need to do database migrations, deploying the database for you (if you choose so), \u2026 .\\n\\nSince Wasp knows so much about your database, that puts us in a good position to keep finding ways to improve the developer experience regarding dealing with the database. For Wasp v0.10, we focused on:\\n\\n1. Wasp running the dev database for you with no config needed \u2192 **Fully Managed Dev Database** \ud83d\ude80\\n2. Wasp helping you to initialize the database with some data \u2192 **Db Seeding** \ud83c\udf31\\n\\n<ImgWithCaption\\n    caption=\\"Wasp now has `wasp start db` and `wasp db seed`!\\"\\n    alt=\\"strong wasp database\\"\\n    source=\\"img/db-start-and-seed/wasp-db-improvements.png\\"\\n/>\\n\\n\x3c!--truncate--\x3e\\n\\n## Fully Managed Dev Database \ud83d\ude80\\n\\nYou might have asked yourself:\\n\\n> If Wasp already knows so much about my database, why do I need to bother running it on my own!?\\n> \\n\\nOk, when you start a new Wasp project it is easy because you are using an SQLite database, but once you switch to Postgres, it falls onto you to take care of it: run it, provide its URL to Wasp via env var, handle multiple databases if you have multiple Wasp apps, \u2026 .\\n\\nThis can get tedious quickly, especially if you are visiting your Wasp project that you haven\u2019t worked on for a bit and need to figure out again how to run the db, or you need to check out somebody else\u2019s Wasp project and don\u2019t have it all set up yet. It is something most of us are used to, especially with other frameworks, but still, we can do better at Wasp!\\n\\nThis is where `wasp start db` comes in!\\n\\n<ImgWithCaption\\n    caption=\\"wasp start db in action, running a posgtres dev db for you\\"\\n    alt=\\"wasp start db running in terminal\\"\\n    source=\\"img/db-start-and-seed/wasp-start-db-terminal.png\\"\\n/>\\n\\nNow, all you need to do to run the development database, is run `wasp start db`, and Wasp will run it for you and will know how to connect to it during development.\\n\\nNo env var setting, no remembering how to run the db. The only requirement is that you have `Docker` installed on your machine. Data from your database will be persisted on the disk between the runs, and each Wasp app will have its own database assigned. \\n\\nBtw, you can still use a custom database that you ran on your own if you want, the same way it was done before in Wasp: by setting env var `DATABASE_URL`.\\n\\n## Database seeding \ud83c\udf31\\n\\n**Database seeding**\xa0is a term for populating the database with some initial data.\\n\\nSeeding is most commonly used for two following scenarios:\\n\\n1. To put the development database into a state convenient for testing / playing with it.\\n2. To initialize the dev/staging/prod database with some essential data needed for it to be useful, for example, default currencies in a Currency table.\\n\\nWasp so far had no direct support for seeding, so you had to either come up with your own solution (e.g. script that connects to the db and executes some queries), or massage data manually via Prisma Studio (`wasp db studio`).\\n\\nThere is one big drawback to both of the approaches I mentioned above though: there is no easy way to reuse logic that you have already implemented in your Wasp app, especially Actions (e.g. `createTask`)! This is pretty bad, as it makes your seeding logic brittle.\\n\\nThis is where `wasp db seed` comes in! Now, Wasp allows you to write a JS/TS function, import any server logic (including Actions) into it as you wish, and then seed the database with it.\\n\\n<ImgWithCaption\\n    caption=\\"wasp db seed in action, initializing the db with dev data\\"\\n    alt=\\"wasp db seed running in terminal\\"\\n    source=\\"img/db-start-and-seed/wasp-db-seed-terminal.png\\"\\n/>\\n\\nRegistering seed functions in Wasp is easy:\\n\\n```jsx\\napp MyApp {\\n  // ...\\n  db: {\\n    // ...\\n    seeds: [\\n      import { devSeedSimple } from \\"@server/dbSeeds.js\\",\\n      import { prodSeed } from \\"@server/dbSeeds.js\\"\\n    ]\\n  }\\n}\\n```\\n\\nExample of a seed function from above, `devSeedSimple`:\\n\\n```jsx\\nimport { createTask } from \'./actions.js\'\\n\\nexport const devSeedSimple = async (prismaClient) => {\\n  const user = await createUser(prismaClient, {\\n      username: \\"RiuTheDog\\",\\n      password: \\"bark1234\\"\\n  })\\n\\n  await createTask(\\n    { description: \\"Chase the cat\\" },\\n    { user, entities: { Task: prismaClient.task } }\\n  )\\n}\\n\\nasync function createUser (prismaClient, data) {\\n  const { password, ...newUser } = await prismaClient.user.create({ data })\\n  return newUser\\n}\\n```\\n\\nFinally, to run these seeds, you can either do:\\n\\n- `wasp db seed`: If you have just one seed function, it will run it. If you have multiple, it will interactively ask you to choose one to run.\\n- `wasp db seed <seed-name>`: It will run the seed function with the specified name, where the name is the identifier you used in its\xa0`import`\xa0expression in the\xa0`app.db.seeds`\xa0list. Example:\xa0`wasp db seed devSeedSimple`.\\n\\nWe also added `wasp db reset` command (calls `prisma db reset` in the background) that cleans up the database for you (removes all data and tables and re-applies migrations), which is great to use in combination with `wasp db seed`, as a precursor.\\n\\n## Plans for the future \ud83d\udd2e\\n\\n- allow customization of managed dev database (Postgres plugins, custom Dockerfile, \u2026)\\n- have Wasp run the managed dev database automatically whenever it needs it (instead of you having to run `wasp start db` manually)\\n- dynamically find a free port for managed dev database (right now it requires port 5432)\\n- provide utility functions to make writing seeding functions easier (e.g. functions for creating new users)\\n- right now seeding functions are defined as part of a Wasp server code \u2192 it might be interesting to separate them in a standalone \u201cproject\u201d in the future, while still keeping their easy access to the server logic.\\n- do you have any ideas/suggestions? Let us know in our <DiscordLink />!"},{"id":"/2023/04/12/auth-ui","metadata":{"permalink":"/wasp-docs/blog/2023/04/12/auth-ui","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-04-12-auth-ui.md","source":"@site/blog/2023-04-12-auth-ui.md","title":"Wasp Auth UI: The first full-stack auth with self-updating forms!","description":"One of the main benefits of Wasp is having deep understanding of your entire full-stack app - e.g. what routes you have, what data models you defined, but also what methods you use for authentication. And that enables us to do some pretty cool stuff for you!","date":"2023-04-12T00:00:00.000Z","formattedDate":"April 12, 2023","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"startups","permalink":"/wasp-docs/blog/tags/startups"},{"label":"github","permalink":"/wasp-docs/blog/tags/github"}],"readingTime":1.775,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"Wasp Auth UI: The first full-stack auth with self-updating forms!","authors":["matijasos"],"image":"/img/auth-ui/auth-customize-code.png","tags":["webdev","wasp","startups","github"]},"prevItem":{"title":"Wasp steps up its database game with Fully Managed Dev DB & DB Seeding","permalink":"/wasp-docs/blog/2023/04/13/db-start-and-seed"},"nextItem":{"title":"Wasp Launch Week #2","permalink":"/wasp-docs/blog/2023/04/11/wasp-launch-week-two"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\';\\nimport DiscordLink from \'./components/DiscordLink\';\\n\\n\\nOne of the main benefits of Wasp is having deep understanding of your entire full-stack app - e.g. what routes you have, what data models you defined, but also what methods you use for authentication. And that enables us to do some pretty cool stuff for you!\\n\\n<ImgWithCaption\\n    caption=\\"Customize auth forms to fit your brand!\\"\\n    alt=\\"Auth UI Demo\\"\\n    source=\\"img/auth-ui/auth-ui-demo.png\\"\\n/>\\n\\nOnce you\'ve listed auth methods you want to use in your `.wasp` config file, you\'re done - from that Wasp generates a full authentication form that you simply import as a React component. **And the best part is that is updates dynamically as you add/remove auth providers!**\\n\\nYou can [see the docs and give it a try here](/docs/guides/auth-ui).\\n\\n\x3c!--truncate--\x3e\\n\\n## Auto-updating magic \ud83d\udd2e\\n\\n<ImgWithCaption\\n    caption=\\"Add GitHub as another auth provider -> the form updates automatically!\\"\\n    alt=\\"Auth UI Demo gif\\"\\n    source=\\"img/auth-ui/auth-demo-compiler.gif\\"\\n/>\\n\\n:::tip\\n\\nSince `.wasp` config file contains a high-level description of your app\'s requirements, Wasp can deduce **a lot** of stuff for you from it, and this is just a single example.\\n\\n:::\\n\\nWhen you update your `.wasp` file by adding/removing an auth method (GitHub in this case), Wasp will detect it and automatically regenerate the auth form. No need to configure anything else, or change your React code - just a single line change in `.wasp` file and everything else will get taken care of!\\n\\n<ImgWithCaption\\n    caption=\\"When you realize Wasp is a compiler and actually understands your app \ud83e\udd2f\\"\\n    alt=\\"Mind exploding\\"\\n    source=\\"img/auth-ui/mind-explosion.gif\\"\\n/>\\n\\n\\n## Customize it! \ud83c\udfa8\\n\\nAlthough it looks nice, all of this wouldn\'t be really useful if you couldn\'t customize it to fit your brand. That\'s easily done through the component\'s props:\\n\\n<ImgWithCaption\\n    caption=\\"Easily customize your auth form through props!\\"\\n    alt=\\"Customizing auth form through props\\"\\n    source=\\"img/auth-ui/auth-customize-code.png\\"\\n/>\\n\\nAnd that\'s it! You can see the whole list of tokens you can customize [here](https://github.com/wasp-lang/wasp/blob/main/waspc/data/Generator/templates/react-app/src/stitches.config.js). More are coming in the future!\\n\\nWasp out \ud83d\udc1d \ud83c\udfa4- [give it a try](/docs/guides/auth-ui) and let us know how you liked it in our <DiscordLink />!"},{"id":"/2023/04/11/wasp-launch-week-two","metadata":{"permalink":"/wasp-docs/blog/2023/04/11/wasp-launch-week-two","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-04-11-wasp-launch-week-two.md","source":"@site/blog/2023-04-11-wasp-launch-week-two.md","title":"Wasp Launch Week #2","description":"Here we go again! After three months of building and talking to our community about what features they\'d like to see next, we\'re proud to kick off our second Launch Week. It stars tomorrow, and you can sign up for the launch event here!","date":"2023-04-11T00:00:00.000Z","formattedDate":"April 11, 2023","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"startups","permalink":"/wasp-docs/blog/tags/startups"},{"label":"github","permalink":"/wasp-docs/blog/tags/github"}],"readingTime":6.355,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"Wasp Launch Week #2","authors":["matijasos"],"image":"/img/lw2/lw2-banner.png","tags":["webdev","wasp","startups","github"]},"prevItem":{"title":"Wasp Auth UI: The first full-stack auth with self-updating forms!","permalink":"/wasp-docs/blog/2023/04/12/auth-ui"},"nextItem":{"title":"New React docs pretend SPAs don\'t exist anymore","permalink":"/wasp-docs/blog/2023/03/17/new-react-docs-pretend-spas-dont-exist"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\nHere we go again! After three months of building and talking to our community about what features they\'d like to see next, we\'re proud to kick off our second Launch Week. It stars tomorrow, and you can [sign up for the launch event here](https://discord.gg/PX6KczVz?event=1093188663912964136)!\\n\\n<ImgWithCaption\\n    alt=\\"Launch Week 2 is coming\\"\\n    source=\\"img/lw2/lw2-banner.png\\"\\n/>\\n\\nWasp Beta introduced a lot of core features that enabled developers to a build full-fledged SaaS-es. Since then, our community grew rapidly and we watched you deploy numerous apps and some of you even [making their startups and earning their first revenue on top of Wasp](/blog/2022/11/26/erlis-amicus-usecase)!\\n\\nSeeing that all the essential building blocks are now in place, **our next goal became to make Wasp really easy (and fun) to use**. We\'ve had a bunch of ideas on everything we\'d like to improve with DX for a while, and now finally came the right time to do it.\\n\\nNonetheless, the theme and sentiment of this launch week is best captured by an ancient term that poets used to describe some of the most beautiful and marvelous wonders of the world (e.g. pyramids, or the hanging gardens of Babylon): **pizzazz** \ud83c\udf55.\\n\\n\x3c!--truncate--\x3e\\n\\n## Wednesday, Apr 12 - Launch event \ud83d\ude80 + Pizzazz opener: Auth UI \ud83d\udc85\\n\\nWasp\'s easy auth has been by a long shot one of the most popular features in the community. We decided to take it one step further - **Wasp now offers beautifully designed, pre-made auth components** that you can simply plug into your app and immediately get that razzle dazzle on!\\n\\n<ImgWithCaption\\n    caption=\\"On your localhost, tomorrow\\"\\n    alt=\\"Auth UI Demo\\"\\n    source=\\"img/lw2/auth-ui-demo.gif\\"\\n/>\\n\\nWe\'ll present this and much more at our Kick-off event, starting tomorrow **on our Discord at 10 am EDT / 4 pm CET** - sign up [here](https://discord.gg/PX6KczVz?event=1093188663912964136) and make sure to mark yourself as interested!\\n\\nJoin us to meet the team and to be the first to get a sneak peek into the latest features! We\'ll follow up with a casual AMA session, showcase selected community projects and discuss all together about what we\'d like to see in Wasp next.\\n\\n<ImgWithCaption\\n    alt=\\"LW2 launch party instructions\\"\\n    source=\\"img/lw2/discord-event-info.png\\"\\n/>\\n\\nP.S. : The word is out that there will be a raffle and that the most lucky one(s) will win some cool Wasp swag! (Da Boi included, ofc).\\n\\n## Thursday, Apr 13 - Deploy your app to Fly.io with a single CLI command\\n\\n<ImgWithCaption\\n    alt=\\"Deploying to Fly.io\\"\\n    source=\\"img/lw2/wasp-deploy-fly.jpeg\\"\\n/>\\n\\nWhen developing your app is blazingly fast, the last thing you want to slow you down is deployment. Figuring out how to exactly setup client/server, dealing with CORS, configuring ports and env vars, ... - well, now you don\'t have to think about it anymore!\\n\\nThis release of Wasp introduces first CLI deployment helper, for Fly.io (others coming soon, and you\'re free to contribute)!\\n\\n<ImgWithCaption\\n    caption=\\"Deployment in Wasp before vs now\\"\\n    alt=\\"How deployment feels now\\"\\n    source=\\"img/lw2/deployment-before-now.gif\\"\\n/>\\n\\n## Friday, Apr 14 - Improved database tooling & DX\\n\\n<ImgWithCaption\\n    alt=\\"Database seeding\\"\\n    source=\\"img/lw2/wasp-db-seed.png\\"\\n/>\\n\\nIntroducing two main quality-of-life features here:\\n- **`wasp start db` - Fully managed development database** - (don\'t ever run `docker run postgres ...` again)\\n- **Database seeding** - populate your database with some initial, \\"seed\\" data\\n\\nThis was something we ourselves ended up needing often when developing a new app, and although not a huge thing at the first glance, it\'s feels so good to have it taken care of! Given that Wasp is a fully managed full-stack framework that \\"understands\\" all parts of your dev process, we were in unique position to offer this functionality.\\n\\nP.S. - you haven\'t been connecting to the prod database all along during development, have you?\\n\\n## Saturday, Apr 15 - More launch goodness: Custom API routes + Email sending \u2709\ufe0f\\n\\nIt\'s Saturday, so you get two features for the price of one!\\n\\n### Add custom API routes\\n\\n<ImgWithCaption\\n    alt=\\"Custom API routes\\"\\n    source=\\"img/lw2/custom-api-route.png\\"\\n    caption=\\"Adding a custom route handler at /foo/bar endpoint\\"\\n/>\\n\\nAlthough for typical CRUD you don\'t have to define an API since Wasp offers a typesafe RPC layer via [operations](/docs/data-model/operations/overview), sometimes you need extra flexibility (e.g. for implementing webhooks). Now you can easily do it, in a typical boilerplate-free Wasp style.\\n\\n### Email sending: Wasp + Sendgrid/Mailgun/...\\n\\n<ImgWithCaption\\n    alt=\\"Laurence Fishburne messenger pigeons\\"\\n    source=\\"img/lw2/laurence-fishburne-pigeons.png\\"\\n    caption=\\"Don\'t end up like this, use Wasp for sending emails\\"\\n/>\\n\\nEmail sending - another feature that sounds like you should be able to implement it in 30 minutes (looking at you, auth), but then you find yourselves a week later cursing web development and having an inexplicable urge to start breeding messenger pigeons (that\'s what happened to Laurence Fishburne in John Wick, if you ever wondered). \\n\\n<ImgWithCaption\\n    alt=\\"Email sending code example\\"\\n    source=\\"img/lw2/email-sending-code.png\\"\\n/>\\n\\nWasp offers unified interface for different providers (e.g. Sendgrid or Mailgun, or a custom SMTP server). It also works great with our latest auth method, `email` - you get email verification and password reset out of the box!\\n\\n## Sunday, Apr 16 - Frontend testing and full-stack type safety!\\n\\nWe continue with our buy-one-get-one-free scheme (although both are free in all fairness):\\n\\n### Frontend testing, powered by Vitest\\n\\n<ImgWithCaption\\n    alt=\\"Frontend testing via Vitest\\"\\n    source=\\"img/lw2/vitest.png\\"\\n/>\\n\\nAll you have to do to run your frontend tests is run `wasp test client` in your CLI! Backed by Vitest, while mocking is powered by [MSW](https://mswjs.io/) and additional Wasp helpers sprinkled on top. Now you really have no excuses to write your tests (except on the backend, support for them is coming next, so enjoy while it lasts)!\\n\\n### Full-stack type safety\\n\\n<ImgWithCaption\\n    caption=\\"Our typesafe RPC is now doing some serious type-fu\\"\\n    alt=\\"Our RPC is now doing serious type-fu\\"\\n    source=\\"img/lw2/type-fu.gif\\"\\n/>\\n\\nWe already introduced glimpses of this in our Beta launch, but now things got even better! Whatever types you define and use on the server, be it entities or your custom types, they immediately get propagated to the client and typecheck in your IDE.\\n\\n## Monday, Apr 17 - SaaS GPT template + Waspathon #2 kick-off!\\n\\n<ImgWithCaption\\n    alt=\\"SaaS GPT template\\"\\n    source=\\"img/lw2/wasp-saas-template.png\\"\\n/>\\n\\nAaand we saved the best for the last - we\'ll put a special highlight on our [SaaS GPT starter](https://github.com/wasp-lang/starters#saas-template), which lets you **build GPT-powered apps (such as [CoverLetterGPT.xyz](https://coverlettergpt.xyz/) or [SocialPostGPT.xyz](https://socialpostgpt.xyz/)) in a day and with all the good stuff pre-included - auth (social, email), Tailwind, deployment, Stripe and GPT API integration**, ... - all you need to do is run it and start coding!\\n\\n### Our second hackathon - Waspathon #2!\\n\\n<ImgWithCaption\\n    caption=\\"Hate it when this happens.\\"\\n    alt=\\"Hacking away\\"\\n    source=\\"img/lw2/hackathon.gif\\"\\n/>\\n\\n**And what a better reason to try out the SaaS GPT template than a hackathon**! It will be an open format and you\'re free to build whatever you want - there will be a few categories will grade and award, but more on that coming soon!\\n\\nThe same for the prizes - expect cool wasp-themed swag and useful stuff that makes dev\'s life easier (no, it doesn\'t include getting rid of your PM).\\n\\nWe\'ll share more info and the registration link soon.\\n\\n## Recap\\n\\n- **We are kicking off Launch Week #2 on Wed, April 12, at 10am EDT / 4pm CET** - make sure to [register for the event](https://discord.gg/PX6KczVz?event=1093188663912964136)!\\n- **Launch Week #2 brings a ton of new exciting features** - we\u2019ll highlight one each day, starting tomorrow\\n- **On Monday, April 17, we\u2019ll announce a hackathon** - follow us on [twitter](https://twitter.com/WaspLang) and [join our Discord](https://discord.gg/rzdnErX) to stay in the loop!\\n\\nThat\u2019s it, Waspeteers - put your pizzazz (buzzazz?) on and see you tomorrow! \ud83d\udc1d\\n\\nMatija, Martin & the Wasp team"},{"id":"/2023/03/17/new-react-docs-pretend-spas-dont-exist","metadata":{"permalink":"/wasp-docs/blog/2023/03/17/new-react-docs-pretend-spas-dont-exist","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-03-17-new-react-docs-pretend-spas-dont-exist.md","source":"@site/blog/2023-03-17-new-react-docs-pretend-spas-dont-exist.md","title":"New React docs pretend SPAs don\'t exist anymore","description":"<ImgWithCaption","date":"2023-03-17T00:00:00.000Z","formattedDate":"March 17, 2023","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"react","permalink":"/wasp-docs/blog/tags/react"}],"readingTime":4.13,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"New React docs pretend SPAs don\'t exist anymore","authors":["matijasos"],"image":"img/new-react-docs/evan-you-no-vite.png","tags":["webdev","react"]},"prevItem":{"title":"Wasp Launch Week #2","permalink":"/wasp-docs/blog/2023/04/11/wasp-launch-week-two"},"nextItem":{"title":"Building a full-stack app for learning Italian: Supabase vs. Wasp","permalink":"/wasp-docs/blog/2023/03/08/building-a-full-stack-app-supabase-vs-wasp"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<ImgWithCaption\\n    alt=\\"Where is Vite\\"\\n    source=\\"img/new-react-docs/evan-you-no-vite.png\\"\\n/>\\n\\nReact just released their new docs at [https://react.dev/](https://react.dev/). While it looks great and packs a lot of improvements, one section that caught the community\u2019s attention is \u201c[Start a New React Project](https://react.dev/learn/start-a-new-react-project)\u201d. The strongly recommended way to start a new React project is to use a framework such as Next.js, while the traditional route of using bundlers like Vite or CRA is fairly strongly discouraged.\\n\\nNext.js is a great framework, and its rise in popularity is due in a large part to the return of SEO optimization via Server-Side-Rendering (SSR) within the collective developer conscience. And it definitely does make sense to use a framework that provides SSR for static sites and pages that rely on SEO.\\n\\nBut what about typical Single Page Apps (SPAs)? Dashboard-like tools that live behind the auth (and don\u2019t need SEO at all), and for which React was originally designed, still very much exist.\\n\\n\x3c!--truncate--\x3e\\n\\n## The new React docs - use a framework unless your app has \u201cunusual\u201d constraints\\n\\n<ImgWithCaption\\n    alt=\\"react new project docs\\"\\n    source=\\"img/new-react-docs/react-new-project.png\\"\\n/>\\n\\nThe new docs make a pretty strong claim for using a framework when starting a new React project. Even if you read through the \u201cCan I use React without a framework\u201d section (hidden behind a collapsed toggle by default), you have to go through a wall of text convincing you why not using a framework is a bad idea, mainly due to the lack of SSR. Only then, in the end, comes the piece mentioning other options, such as Vite and Parcel:\\n\\n<ImgWithCaption\\n    alt=\\"use framework unless you app has unusual constraints\\"\\n    source=\\"img/new-react-docs/your-app-unusual.png\\"\\n/>\\n\\nEven then, first you\u2019ll have to admit your app has unusual constraints (and no examples were given of what that could be) before you\u2019re actually \u201callowed\u201d not to use a framework. It feels very much like you\u2019re doing it in spite of all the warnings and that there actually isn\u2019t a case where you should do it.\\n\\n## Why SPAs (still) matter\\n\\n<ImgWithCaption\\n    alt=\\"SPAs still have their place\\"\\n    source=\\"img/new-react-docs/spas-have-place.png\\"\\n/>\\n\\nSSR/SSG has been getting a lot of attention lately and has been a flagship feature of most new frameworks built on top of React. And rightly so - it has solved a major issue of using React for static & SEO-facing sites where time to first content (FCP) is crucial.\\n\\nOn the other hand, the use case where React, Angular, and other UI frameworks initially shined were dashboard apps (e.g., project management systems, CRMs, \u2026) - it allowed for a radically better UX, which resembled that of desktop apps.\\n\\nAlthough interactive content-rich apps (blogging platforms, marketplaces, social platforms) are today a typical poster child demo app for frameworks, dashboard-like apps still very much exist, and there are more of them than ever. Thousands of companies are building their internal tools daily, just like new SaaS-es pop up every day.\\n\\nSEO is largely irrelevant for them since everything is happening behind the auth layer, where everything is centered around workflows, not content. SSR might even be counter-productive since it puts more pressure on your servers instead of distributing the rendering load across the clients.\\n\\n## How then would you develop SPAs?\\n\\nTraditionally, React was only a UI library in your stack of choice. You would use CRA (or Vite nowadays) as a bundler/starter for your React project. Then you\u2019d probably add a routing library (e.g., react-router) and maybe a state management library (e.g., Redux, or react-query), and you\u2019d already be set pretty well. You would develop your backend in whatever you choose - Node.js/Express, Rails, or anything else.\\n\\nThere are also new frameworks emerging that focus on this particular use case (e.g., [RedwoodJS](https://redwoodjs.com/) and [Wasp](https://wasp-lang.dev) (disclaimer: this is us!)) whose flagship feature is not SSR, but rather the abstraction of API and CRUD on data models, and getting full-stack functionality from UI to the database, with extra features such as easy authentication and deployment out of the box.\\n\\nWith a \u201cgo for Next or you are unusual\u201d and \u201cyou need SSR\u201d message, React is making a strong signal against other solutions that don\u2019t emphasize SSR as their main feature.\\n\\n## So what\u2019s the big deal? Nobody forces you to use SSR in Next/Remix\\n\\nThat\u2019s correct, but also it\u2019s true that a buy-in into a whole framework is a much bigger step than just opting for a UI library. Frameworks are (more) opinionated and come with many decisions (code structure, architecture, deployment) made upfront for you. Which is great and that\u2019s why they are valuable and why we\u2019ll keep using them.\\n\\nBut, both sides of the story should be presented, and the final call should be left to the developer. React is too useful, valuable, and popular a tool and community to allow itself to skip this step.\\n\\n\\n*Want to stay in the loop? \u2192 [Join our newsletter!](/#signup)*"},{"id":"/2023/03/08/building-a-full-stack-app-supabase-vs-wasp","metadata":{"permalink":"/wasp-docs/blog/2023/03/08/building-a-full-stack-app-supabase-vs-wasp","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-03-08-building-a-full-stack-app-supabase-vs-wasp.md","source":"@site/blog/2023-03-08-building-a-full-stack-app-supabase-vs-wasp.md","title":"Building a full-stack app for learning Italian: Supabase vs. Wasp","description":"<ImgWithCaption","date":"2023-03-08T00:00:00.000Z","formattedDate":"March 8, 2023","tags":[{"label":"Full-stack","permalink":"/wasp-docs/blog/tags/full-stack"},{"label":"Supabase","permalink":"/wasp-docs/blog/tags/supabase"},{"label":"Wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"WebDev","permalink":"/wasp-docs/blog/tags/web-dev"}],"readingTime":13.135,"hasTruncateMarker":true,"authors":[{"name":"Mihovil Ilakovac","title":"Founding Engineer @ Wasp","url":"https://ilakovac.com","email":"miho@wasp-lang.dev","imageURL":"https://github.com/infomiho.png","key":"miho"}],"frontMatter":{"title":"Building a full-stack app for learning Italian: Supabase vs. Wasp","authors":["miho"],"image":"/img/building-a-full-stack-app-supabase-vs-wasp.jpg","tags":["Full-stack","Supabase","Wasp","WebDev"]},"prevItem":{"title":"New React docs pretend SPAs don\'t exist anymore","permalink":"/wasp-docs/blog/2023/03/17/new-react-docs-pretend-spas-dont-exist"},"nextItem":{"title":"10 \\"Hard Truths\\" All Junior Developers Need to Hear","permalink":"/wasp-docs/blog/2023/03/03/ten-hard-truths-junior-developers-need-to-hear"}},"content":"import Link from \'@docusaurus/Link\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<br/>\\n\\n<ImgWithCaption\\n    alt=\\"wasp vs. supabase\\"\\n    source=\\"img/building-a-full-stack-app-supabase-vs-wasp.jpg\\"\\n/>\\n\\n## Intro\\n\\n### What to expect\\n\\nIn this blog post, I will explain how I created the [Phrase Tutor](https://phrasetutor.com/) app for learning Italian phrases using two different technologies. I will share some code snippets to show what was required to build the app with both Wasp and Supabase.\\n\\n<ImgWithCaption\\n    alt=\\"Phrase Tutor\u2019s front-end\\"\\n    source=\\"img/building-a-full-stack-app-supabase-vs-wasp/phrase_tutor.gif\\"\\n    caption=\\"Phrase Tutor\u2019s front-end\\"\\n/>\\n\\nAs a senior full-stack developer with experience in building many side-projects, I prefer a quick development cycle. I enjoy turning ideas into POCs in just a few days or even hours.\\n\\nWe will examine how each technology can help when building a full-stack app and where Wasp and Supabase excel.\\n\\n\x3c!--truncate--\x3e\\n\\n### I wanted to learn Italian fast\\n\\nWhenever I travel abroad, I enjoy imagining what it would be like to live in that place. For instance, I usually don\'t like taking crowded public transportation, but for some reason, it brings me joy when I do it in a foreign country. It\'s all about the feeling that I\'m living there. One of the most important things for me to fully experience the culture is to learn the language or, at the very least, be able to not speak English all the time.\\n\\n<ImgWithCaption\\n    alt=\\"Pretending to be Italian\\"\\n    source=\\"img/building-a-full-stack-app-supabase-vs-wasp/italian.gif\\"\\n    caption=\\"Pretending to be Italian\\"\\n/>\\n\\nMy girlfriend and I were planning a trip to Italy, and I wanted to learn some Italian. I thought about what would be the easiest way to learn as much as possible with the least amount of effort. I decided that learning the top 100 Italian phrases would be a good start. I had a week to do it, and learning 100 phrases seemed doable if I practiced every day.\\n\\n### The learning method\\n\\nIn high school, I had a system for learning historical facts and dates quickly called \\"focusing on things you don\u2019t know\\".\\n\\nHere\'s how it works:\\n\\n1. Gather a pool of facts you want to learn (e.g. \\"When did WWI start?\\" - \\"1914\\").\\n2. Ask yourself each question in the pool.\\n3. If you know the answer, remove the fact from the pool.\\n4. If you don\'t know the answer, keep it in the pool.\\n5. Repeat with the smaller pool until there are no more facts left.\\n\\nI made a small app for this and shared it with my classmates, but it didn\'t go further than that.\\n\\nNow, I want to use the same method to learn Italian phrases for my trip. So, as a better developer now, I\'ll make a proper app and host it somewhere \ud83d\ude42\\n\\n## Building the Phrase Tutor app\\n\\nWe will create an app that follows the method described above. The app will show you a phrase and you can tell it if you know the translation or not by selecting \\"I knew it\\" or \\"I didn\'t know it\\".\\n\\n<ImgWithCaption\\n    alt=\\"How the learning in the app should work\\"\\n    source=\\"img/building-a-full-stack-app-supabase-vs-wasp/phrases.png\\"\\n    caption=\\"How the learning in the app should work\\"\\n/>\\n\\nThe app will keep track of your answers and suggest which phrases you should learn next \ud83d\udd75\ufe0f\\n\\nI\u2019ve built the app twice: first with Supabase and then with Wasp. Supabase is a well-rounded open-source Backend as a Service (BaaS) product that adds superpowers to your front-end apps. On the other hand, Wasp is an open-source framework for building full-stack apps that helps to keep the boilerplate low. Let\u2019s see how they compare.\\n\\n### Initial Supabase version\\n\\nWhen I made the initial version, I worked heavily with Vue.js, which I used to create the first version of the Phrase Tutor app. I started by collecting some phrases. I searched on Google for \\"best Italian phrases to learn\\" and came across an article titled \\"100 Italian phrases to learn.\\" (After extracting the phrases from the HTML, I found out that there were only 96 phrases, but that was still good enough for me.)\\n\\nThe initial app contained the phrases in a [JSON file](https://github.com/infomiho/phrase-tutor-supabase/blob/master/src/phrases/italian.json) that the frontend loaded. It was completely static, but it worked.\\n\\n```json\\n{\\n    \\"id\\": 1,\\n    \\"group\\": \\"general\\",\\n    \\"translations\\": {\\n        \\"en\\": \\"Yes\\",\\n        \\"it\\": \\"Si\\"\\n    }\\n}\\n```\\n\\nI put it on Cloudflare Pages and it went live.\\n\\nI showed it to my girlfriend, but she didn\'t like some of the phrases I used. If only I had a backend with a database to edit the phrases. Then I had an idea: let\'s add a database with [Supabase](https://supabase.com/).\\n\\nSupabase is a managed backend solution that provides a lot of free stuff: a PostgreSQL database and social authentication among other things.\\n\\n<ImgWithCaption\\n    alt=\\"Phrase Tutor built with Supabase\\"\\n    source=\\"img/building-a-full-stack-app-supabase-vs-wasp/supabase.png\\"\\n    caption=\\"Phrase Tutor built with Supabase\\"\\n/>\\n\\nI set up the database tables using the Supabase UI which was pretty straightforward.\\n\\nThe table I needed only had a few fields:\\n\\n```sql\\nCREATE TABLE phrases (\\n    id bigint  NOT NULL,\\n    group character varying  NULL,\\n    translations_en text  NOT NULL,\\n    translations_it text  NOT NULL\\n);\\n```\\n\\nThen I had to seed the database with some SQL. Executing SQL statements is easy with the use of Supabase\u2019s UI. You just log in, open the SQL editor and paste in the code:\\n\\n```sql\\nINSERT INTO phrases(id,\\"group\\",translations_en,translations_it) VALUES (1,\'general\',\'Yes\',\'Si\');\\nINSERT INTO phrases(id,\\"group\\",translations_en,translations_it) VALUES (2,\'general\',\'No\',\'No\');\\n...\\n```\\n\\nIntegrating Supabase into my existing front-end app was simple using their [Javascript SDK](https://github.com/infomiho/phrase-tutor-supabase/blob/master/src/services/supabase.ts#L4). If you\'re familiar with Firebase, it should feel similar. Essentially, you build your SQL queries on the frontend and use the resulting data in your app.\\n\\nUsing the SDK felt pretty straightforward and I could get what I wanted out of the database without much hassle.\\n\\n```jsx\\nconst { data, error } = await supabase.from(\\"phrases\\").select(\\"*\\");\\n```\\n\\nAnd just like that, my static Vue.js app had a database to rely on \ud83c\udf89\\n\\nAdding the login with Google was a matter of enabling it in Supabase UI and setting up the Client ID and Client Secret variables. In order to trigger the login process with Google, I [once again](https://github.com/infomiho/phrase-tutor-supabase/blob/master/src/stores/user.ts#L9) relied on their Javascript SDK.\\n\\n```jsx\\nsupabase.auth.signInWithOAuth({ provider: \\"google\\" });\\n```\\n\\nAwesome! I\'m glad that I can now edit the phrases and that there is a login feature that I plan to use later.\\n\\nIn the future, I have plans to add more languages to the app and also allow registered users to contribute new phrases and translations. I believe this will make the app more useful and engaging for language learners.\\n\\nAnd just like that, my app went from a pure static app to an app with a database and Google login \ud83e\udd2f\\n\\n:::info\\nCheck out the deployed app written with Vue.js and Supabase: [https://phrase-tutor.pages.dev](https://phrase-tutor.pages.dev/)\\n:::\\n\\n:::info\\nView the source [here](https://github.com/infomiho/phrase-tutor-supabase)\\n:::\\n\\n### Joining Wasp and dogfooding it\\n\\nSome background before the second part: I started working at Wasp earlier this year. I\'m really happy to work on a technology that solves a problem I care about: when I do side-projects, I dislike writing the same dull parts every time from scratch. I copy and paste from my previous side projects, but eventually, the code snippets become old and outdated.\\n\\nNaturally, I wanted to test out Wasp by rewriting one of my side projects. I decided to see how Wasp could work with the Phrase Tutor project.\\n\\nWasp works by having an easy-to-understand config file called `main.wasp` which coordinates your pieces of client and server functionalities. Its main purpose is to keep you productive and focused on writing interesting bits. It feels pretty much like using a web framework that covers your whole app.\\n\\n<ImgWithCaption\\n    alt=\\"Phrase Tutor built with Wasp\\"\\n    source=\\"img/building-a-full-stack-app-supabase-vs-wasp/wasp.png\\"\\n    caption=\\"Phrase Tutor built with Wasp\\"\\n/>\\n\\nLet\'s begin by creating the data models. Wasp uses Prisma under the hood to communicate with your database, which makes it easy to manage your database without worrying about the details. This is just one of the many choices the framework made for me, and I appreciate the feeling of using a setup that works.\\n\\nI had to first declare all of the entities I needed with Prisma PSL in the Wasp config file.\\n\\n```wasp\\nentity Phrase {=psl\\n  id Int @id @default(autoincrement())\\n  group String\\n  phrase String\\n  translations Translation[]\\npsl=}\\n\\nentity Language {=psl\\n  id Int @id @default(autoincrement())\\n  name String @unique\\n  emoji String\\n  translations Translation[]\\npsl=}\\n\\nentity Translation {=psl\\n  id Int @id @default(autoincrement())\\n  phraseId Int\\n  languageId Int\\n  translation String\\n  phrase Phrase @relation(fields: [phraseId], references: [id], onDelete: Cascade)\\n  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade)\\npsl=}\\n\\n```\\n\\nI\'m using a PostgreSQL database again, and you can see that the field definitions are similar.\\n\\nI improved the data schema a bit by defining three tables instead of one. I separated the concept of a `Phrase` from the concepts of `Language` and `Translation`. This will make it easier to add new languages in the future.\\n\\nI added some phrases to the database using Prisma and a [Wasp action](https://github.com/infomiho/phrase-tutor-wasp/blob/master/src/server/actions.js#L1):\\n\\n```tsx\\nexport async function seedItalianPhrases(args, context) {\\n    const data = [\\n       {\\n            id: 1,\\n            group: \\"general\\",\\n            translations_en: \\"Yes\\",\\n            translations_it: \\"Si\\"\\n        },\\n        ...\\n    ]\\n    for (const phrase of seedPhrases) {\\n        await context.entities.Phrase.create({\\n            ...\\n        });\\n    }\\n}\\n```\\n\\nLet\u2019s now look at what I needed to do to get the data flowing from the backend to my React app.\\n\\nFirst, I declared a query in my Wasp config file:\\n\\n```wasp\\napp phraseTutor {\\n  ...\\n}\\n...\\n\\nquery fetchAllPhrases {\\n  fn: import { getAllPhrases } from \\"@server/queries.js\\",\\n  entities: [Phrase]\\n}\\n```\\n\\nThen I wrote the code for my backend to fetch the phrases. You\u2019ll notice it\u2019s quite similar to the code I wrote for fetching phrases with the Supabase SDK, but I had to include the `translations` relation since we now have multiple tables.\\n\\n```jsx\\n// My query got the Prisma entity through the context parameter\\n// which I just used to fetch all the phrases\\nexport async function getAllPhrases(args, context) {\\n    return context.entities.Phrase.findMany({\\n        include: {\\n            translations: true\\n        }\\n    });\\n}\\n```\\n\\nAnd lastly, I could just import the query into my React app. It\u2019s set up in a way that it handles cache invalidation automatically, one less thing to worry about, which is awesome \ud83d\ude0e\\n\\n```jsx\\n// Wasp relies on React Query in the background\\nconst { data: phrases, isLoading } = useQuery(fetchAllPhrases);\\n```\\n\\nLet\u2019s also add support for Google auth for our app. It involves declaring you want it in the Wasp file, adding some env variables and using it in the React application.\\n\\nWe declare it to the Wasp file by adding the `google` key under `auth`:\\n\\n```wasp\\napp phraseTutor {\\n  ...\\n  auth: {\\n    userEntity: User,\\n    externalAuthEntity: SocialUser,\\n    methods: {\\n      // Define we want the Google auth\\n      google: {\\n        // Optionally, we can adjust what is saved from the user\'s data\\n        getUserFieldsFn: import { getUserFields } from \\"@server/auth/google.js\\"\\n      }\\n    },\\n    onAuthFailedRedirectTo: \\"/\\"\\n  },\\n  ...\\n}\\n\\n// Some of the entities needed for auth\\nentity User {=psl\\n  id Int @id @default(autoincrement())\\n  username String @unique\\n  password String\\n  profilePicture String\\n  externalAuthAssociations SocialUser[]\\n  createdAt DateTime @default(now())\\npsl=}\\n\\nentity SocialUser {=psl\\n  id          Int       @id @default(autoincrement())\\n  provider    String\\n  providerId  String\\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\\n  userId      Int\\n  createdAt   DateTime  @default(now())\\n  @@unique([provider, providerId, userId])\\npsl=}\\n```\\n\\nAnd \u2026 that\u2019s it. We can now use the Google auth in our frontend \ud83c\udf89\\n\\n```jsx\\nimport { signInUrl as googleSignInUrl } from \\"@wasp/auth/helpers/Google\\";\\n...\\nconst { data: user } = useAuth();\\n```\\n\\nWriting a full-stack React and Express.js with Wasp felt like a guided experience; I didn\'t have to focus too hard on the dev tooling, building, or deploying.\\n\\nInstead, I could focus on the logic needed for Phrase Tutor to work and just run `wasp start` most of the time. I did need to write some extra code to get everything running, but I\'m free to customize this code however I want.\\n\\n:::info\\nCheck out the deployed project built with Wasp: [https://phrasetutor.com](https://phrasetutor.com/)\\n:::\\n\\n:::info\\nView the source [here](https://github.com/infomiho/phrase-tutor-wasp)\\n:::\\n\\n### Let\'s compare some of the features\\n\\nI want to compare the features of Supabase and Wasp. It\'s good to think about different ways to do things and their pros and cons.\\n\\n| Feature                      | Supabase                                                          | Wasp                                                                            |\\n| ---------------------------- | ----------------------------------------------------------------- | ------------------------------------------------------------------------------- |\\n| Getting data from the API    | Use the Supabase JS SDK to query database tables                  | Declare query in Wasp config and use Prisma JS SDK to implement it |\\n| Custom business logic        | Writing custom PostgreSQL procedures or by writing edge functions | Declare actions in the Wasp file and write server-side JS                       |\\n| Defining the database schema | Visual editor or by CREATE TABLE query                            | By code - edit Prisma schema and commit changes                                                          |\\n| Auth                         | Enable in UI                                                      | Enable it in the Wasp file                                                      |\\n| Deployment                   | Supabase managed instance or self-host it                         | Deploy anywhere, support for https://fly.io one line deployment                  |\\n\\nWith Supabase, I liked how familiar the SDK felt and their UI made it easy to configure parts of my backend. I didn\u2019t need to think about deploying Supabase since I used their hosted version, but it did get paused after 1 week of inactivity on the free tier.\\n\\nOn the other hand, Wasp felt like the glue for my React + Express.js + Prisma app and I needed to write more code to get things done. It felt more explicit because I wrote code closer to what I would normally write. I deployed it to [fly.io](https://fly.io) with the Wasp command `wasp deploy fly launch` and it\u2019s now live on [https://phrasetutor.com](https://phrasetutor.com/)\\n\\n## Conclusion\\n\\n### It\'s all about the use case\\n\\nChoosing the right solution for your needs can be difficult. That\'s why it\'s important to try out different options and see how they work for you. In this case, I compared two options: Supabase and Wasp.\\n\\nSupabase is a great choice if you want a well-rounded open-source BaaS product that adds superpowers to your front-end apps. It provides a lot of free stuff, such as a PostgreSQL database and social authentication, which can make development easier and faster. It also has a nice SDK and UI that the end user can use to easily define their app\'s configuration.\\n\\nWasp is an open-source framework for building full-stack apps that helps out with keeping the boilerplate low. It is a bit more explicit about some things, such as defining your auth entities, but that can be a plus when you have more advanced use cases. By using Wasp as the glue for your full-stack application, you can have the best of both worlds: a development and production setup that works out of the box while still allowing you to develop your app any way you like.\\n\\nIn the case of Phrase Tutor, I liked working with both Supabase and Wasp. I did, however, get a different feeling from working with the two technologies. With Supabase I felt like my front-end app got instant superpowers and it now has a database and login, which was nice considering the effort I had to put in. But now I had a black-box dependency that I needed to build around.\\n\\nWhen I used Wasp to rebuild Phrase Tutor, it felt different because it was a full-stack app. I had more control over the application code, so I could change it and evolve it as I wanted. I felt like I had built an app that could grow in any direction. Although I had to write more code, it felt like a good trade-off for future needs.\\n\\nTo decide which option is best for you, I would suggest trying both and seeing how you feel. It is easy to set up both tools and see if they make sense for you.\\n\\n<ImgWithCaption\\n    alt=\\"Grazie for reading \ud83d\ude43\\"\\n    source=\\"img/building-a-full-stack-app-supabase-vs-wasp/thank_you.png\\"\\n    caption=\\"Grazie for reading \ud83d\ude43\\"\\n/>\\n\\nIf you try out the Phrase Tutor app, please let me know what you think. You can reach me on Twitter. I\'m always looking for ways to make it better."},{"id":"/2023/03/03/ten-hard-truths-junior-developers-need-to-hear","metadata":{"permalink":"/wasp-docs/blog/2023/03/03/ten-hard-truths-junior-developers-need-to-hear","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-03-03-ten-hard-truths-junior-developers-need-to-hear.md","source":"@site/blog/2023-03-03-ten-hard-truths-junior-developers-need-to-hear.md","title":"10 \\"Hard Truths\\" All Junior Developers Need to Hear","description":"<ImgWithCaption","date":"2023-03-03T00:00:00.000Z","formattedDate":"March 3, 2023","tags":[{"label":"Junior Developers","permalink":"/wasp-docs/blog/tags/junior-developers"},{"label":"Tech Career","permalink":"/wasp-docs/blog/tags/tech-career"},{"label":"Reddit","permalink":"/wasp-docs/blog/tags/reddit"},{"label":"WebDev","permalink":"/wasp-docs/blog/tags/web-dev"}],"readingTime":3.145,"hasTruncateMarker":false,"authors":[{"name":"Vinny","title":"DevRel @ Wasp","url":"https://vincanger.github.io","email":"vince@wasp-lang.dev","imageURL":"https://vincanger.github.io/assets/vince_smiley.jpg","key":"vinny"}],"frontMatter":{"title":"10 \\"Hard Truths\\" All Junior Developers Need to Hear","authors":["vinny"],"image":"/img/hard-truths-junior-devs.png","tags":["Junior Developers","Tech Career","Reddit","WebDev"]},"prevItem":{"title":"Building a full-stack app for learning Italian: Supabase vs. Wasp","permalink":"/wasp-docs/blog/2023/03/08/building-a-full-stack-app-supabase-vs-wasp"},"nextItem":{"title":"Wasp Beta - February 2023","permalink":"/wasp-docs/blog/2023/03/02/wasp-beta-update-feb"}},"content":"import Link from \'@docusaurus/Link\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<br/>\\n\\n<ImgWithCaption\\n    alt=\\"hard truths for junior devs\\"\\n    source=\\"img/hard-truths-junior-devs.png\\"\\n/>\\n\\nOk, I have to admit, these aren\u2019t really Truths, but rather some opinions I\u2019ve formed over my journey switching careers from Educator to Developer.\\n\\nIt\u2019s well known at this point that software \u2014 especially web \u2014 development is a viable option for someone looking for a new career without going the traditional education route. Due to this, and the fact that salaries tend to be very good, I think a portion of people making the switch might be doing it for the wrong reasons. \\n\\nAnd once you get into that career, as a Junior it can often be difficult to know what you should be doing to advance your career. There are a ton of opinions out there (including mine) and juniors tend to develop a lot of misconceptions, as my colleague and I discussed in our recent [Reddit post](https://www.reddit.com/r/webdev/comments/112im2m/senior_devs_what_are_the_most_damaging/) and [follow-up video](/blog/2023/02/21/junior-developer-misconceptions).\\n\\nSo, I put together this list of things you should consider when starting out a career in tech: \\n\\n1. \ud83d\udc4e **If you\u2019re doing it solely for the money, you\u2019re not gonna make it.** True, you don\u2019t need a degree or anyone\u2019s permission to advance in this career, but you need ambition and mental stamina. A genuine interest is needed to maintain them. \\n\\n2. \ud83d\ude0e\xa0**You don\u2019t have to follow the trends. Follow what interests you.** Like I said before, you need mental stamina in this field of work. Following your interests will keep you engaged and help avoid burnout.\\n\\n3. \ud83d\udc69\u200d\ud83d\udcbb\xa0**You don\u2019t need to know a piece of tech inside and out,** contrary to what some devs might want you to believe. The truth is, you are always learning, and there will always be gaps in your knowledge. Your confidence in being able to fill those gaps is what matters.\\n\\n4. \ud83e\uddf1\xa0**Start building, ASAP.** Find a problem that interests you and build the solution yourself. Contribute to Open-Source projects that you use. A portfolio of unique work speaks volumes about your abilities. Plus, there\u2019s no better teacher than experience. \\n\\n5. \ud83d\ude31\xa0**Be fearless and seek feedback.** Put your work out there and be ready to have it criticized. If you can stomach it, you\u2019ll come out the other side a much better developer. \\n\\n6. \ud83e\uddd0\xa0**You should have a firm understanding of what you\u2019re doing.** Don\u2019t copy-paste someone else\u2019s answer (or GPT\u2019s) to your problem and call it a day. Question why things work, and figure it out for yourself.\\n\\n7. \ud83c\udfcb\ufe0f\u200d\u2640\ufe0f\xa0**You have to do the grunt work, unfortunately. Don\u2019t expect high salaries from the beginning.** And you\u2019ll probably want to improve your portfolio by working on side projects in your free time, or you might stay a junior dev for longer than you wish. \\n\\n8. \ud83e\uddd7\u200d\u2642\ufe0f\xa0**Challenge yourself. Don\u2019t let yourself get too comfortable.** If you do, you won\u2019t improve. Offer to take new, difficult, and daunting tasks at work or with your personal projects. You\u2019ll be surprised what you can achieve. \\n\\n9. \ud83d\udcb0\xa0**You don\u2019t have to pay for boot camps or courses.** In fact, you\u2019re better off tackling problems on your own and only asking for help if you\u2019re truly stuck. There\u2019s a wealth of free resources out there, and when you\u2019re on the job, these might be the only things to assist you.\\n\\n10. \ud83d\udde3\xa0**Programming is definitely not the only skill you\u2019ll need.** Being respectful, communicative, conscientious, ambitious, and humble will put you in a different league and make you a valuable asset in any tech team. \\n\\nTIP: *Looking for some inspiration? Feedback? Motivation? Join us over at the [Wasp Discord server](https://discord.gg/CFnqtaEU), where we\'ve got an active, friendly community of web developers of all skill levels that build side-projects, share their experiences, make memes, and chat about life*\\n\\n<br/>\\n\\n<hr/>"},{"id":"/2023/03/02/wasp-beta-update-feb","metadata":{"permalink":"/wasp-docs/blog/2023/03/02/wasp-beta-update-feb","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-03-02-wasp-beta-update-feb.md","source":"@site/blog/2023-03-02-wasp-beta-update-feb.md","title":"Wasp Beta - February 2023","description":"<ImgWithCaption","date":"2023-03-02T00:00:00.000Z","formattedDate":"March 2, 2023","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"startups","permalink":"/wasp-docs/blog/tags/startups"},{"label":"github","permalink":"/wasp-docs/blog/tags/github"}],"readingTime":5.455,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"Wasp Beta - February 2023","authors":["matijasos"],"image":"/img/update-feb-23/banner.png","tags":["webdev","wasp","startups","github"]},"prevItem":{"title":"10 \\"Hard Truths\\" All Junior Developers Need to Hear","permalink":"/wasp-docs/blog/2023/03/03/ten-hard-truths-junior-developers-need-to-hear"},"nextItem":{"title":"The Most Common Misconceptions Amongst Junior Developers","permalink":"/wasp-docs/blog/2023/02/21/junior-developer-misconceptions"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<ImgWithCaption\\n    alt=\\"Wasp Update Feb 23\\"\\n    source=\\"img/update-feb-23/banner.png\\"\\n/>\\n\\n*Want to stay in the loop? \u2192 [Join our newsletter!](/#signup)*\\n\\nHey Wasp acolytes (Waspolytes?) \ud83d\udc1d,\\n\\nWhat\'s kickin\'? We at Wasp spent the whole month thinking of the coolest features to add to our next release and we can\'t wait to share it with you!\\n\\n\x3c!--truncate--\x3e\\n\\n<ImgWithCaption\\n    alt=\\"Tell me now\\"\\n    source=\\"img/update-feb-23/tell-me-now.gif\\"\\n    caption=\\"Ok ok, we\'re getting there, chill!\\"\\n/>\\n\\nLet me cut to the chase and show you what\'s been cooking in Wasp pot for the past month:\\n\\n## Deploy to Fly.io with a single command for free \ud83d\ude80\u2601\ufe0f\\n\\n<ImgWithCaption\\n    alt=\\"Deploy to fly.io with single command\\"\\n    source=\\"img/update-feb-23/deploy-fly.png\\"\\n/>\\n\\nThis is the only command you need to run to deploy your full app (client, server, and database) to Fly.io! They also offer a generous free tier so you can deploy your v1 without any second thoughts.\\n\\nCheck out our docs for more details: [Deploying your Wasp app to Fly.io](/docs/deploying#wasp-cli)\\n\\n## \u2705 Full stack TypeScript support\\n\\n<ImgWithCaption\\n    alt=\\"Types everywhere\\"\\n    source=\\"img/update-feb-23/types-buzz.png\\"\\n/>\\n\\nThis is one of the features we are most excited about! Now, when you define an entity in your Wasp file, it immediately becomes accessible as a type both on a client and a server.\\n\\n<ImgWithCaption\\n    alt=\\"Full stack TypeScript support\\"\\n    source=\\"img/update-feb-23/fullstack-ts.png\\"\\n/>\\n\\nThis feature beautifully showcases the power of the Wasp language approach and how much it can cut down on the boilerplate. And we\'re just getting started!\\n\\nFor more details, [check out our entity docs](/docs/data-model/entities).\\n\\n## \ud83d\uddd3 We set a date for the next launch - April 11th! \ud83d\ude80\\n\\n<ImgWithCaption\\n    alt=\\"Launch party\\"\\n    source=\\"img/update-feb-23/ballmer-launch.gif\\"\\n/>\\n\\nMark your calendars, it\'s official! **We will release the next version of Wasp on April 11th - in exactly 40 days**! As the last time, we will follow a launch week format with a lot of memes, swag and fun prizes (Including Da Boi, of course).\\n\\nHere\'s a quick list of the planned features:\\n- Using Vite instead of CRA under the hood - you\'ll be able to create new Wasp apps in a blink of an eye! \ud83d\ude80\\n- Custom API routes\\n- Code scaffolding for the quicker start\\n- Support for sending emails\\n- Password reset via email\\n- Improved Auth UI\\n- Testing support\\n\\nAnd more! This is quite an ambitious plan but we are fully committed to getting it done. Any comments or ideas, [ping us on our Discord](https://discord.gg/rzdnErX).\\n\\n## \u260e\ufe0f We had our Community Call #2 - meet Da Boi\\n\\n<ImgWithCaption\\n    alt=\\"We had a community call\\"\\n    source=\\"img/update-feb-23/da-boi-call.jpeg\\"\\n/>\\n\\nWe had so much fun on our last community call that we decided we have to do it again! As you can notice, our community-approved mascot Da Boi stole the show. The rest was pretty much just a filler and an excuse to have more fun with Da Boi :D.\\n\\nOn a serious note, it was great to catch up with the community prior to the next release - we discussed features and the roadmap and everybody shared what they\'re building and what they\'d like to see next in Wasp.\\n\\n## \ud83c\udfa5 Wasp is now on YouTube!\\n\\n<ImgWithCaption\\n    alt=\\"Wasp is on YouTube\\"\\n    source=\\"img/update-feb-23/yt-junior-devs.png\\"\\n/>\\n\\nWe are still going strong with our YouTube! **The [latest video](https://youtu.be/eermNn9VhOA) started as a question on Reddit and it escalated quite quickly, with 200+ comments** - we cover the responses we received + our expert commentary :D.\\n\\nIf you want to stay in the loop (and I guess you do since you\'re reading this :D), please [subscribe to our channel](https://www.youtube.com/@wasplang) and help us reach the first 100 subscribers on YouTube!\\n\\n<ImgWithCaption\\n    alt=\\"Subscribe to Wasp on YouTube\\"\\n    source=\\"img/update-dec-23/yt-cta.png\\"\\n    caption=\\"You know you want it!\\"\\n/>\\n\\n## \u2328\ufe0f From the blog\\n\\n* [The Best Web App Framework Doesn\'t Exist](/blog/2023/02/02/no-best-framework) - or this one we invented our own \\"Hierarchy of Developer Needs\\". Scientifically proven \ud83e\udd1e.\\n\\n* [The Most Common Misconceptions Amongst Junior Developers](/blog/2023/02/21/junior-developer-misconceptions) - we asked and Reddit answered!\\n\\n## \ud83d\udd79 Community highlights\\n\\n* [PhraseTutor: Learn Italian in a week](https://phrasetutor.com/)! There is a new app built from scratch with Wasp, by Mihovil - one of our early community members who recently joined the team as an engineer! It\'s smooth both on the front end and back end and will teach you Italian before you can say (or eat) \\"quattro formaggi\\"!\\n<ImgWithCaption\\n    alt=\\"Phrase Tutor\\"\\n    source=\\"img/update-feb-23/phrase-tutor.png\\"\\n/>\\n\\n\\n## Developer life \ud83d\udcbb\u2328\ufe0f\ud83d\udcbd\\nHere is the cool stuff we came across this month\\n\\n- [Motion Canvas - Visualize complex ideas programmatically](https://motioncanvas.io/) - a very cool 2d animation library and editor! I want to play around with this one so much and create a cool animation for Wasp (Da Boi anyone?) \ud83d\ude04\\n<ImgWithCaption\\n    alt=\\"Motion Canvas\\"\\n    source=\\"img/update-feb-23/motion-canvas.png\\"\\n/>\\n\\n- [98.css - A design system for building faithful recreations of old UIs](https://jdan.github.io/98.css/) - I think we can all agree that web design is becoming increasingly minimalistic and getting rid of the flashy gradients and shadows. Be ahead of the curve - make your app look like Windows 98! You\'ll instantly feel 10 (20?) years younger and get an irresistible urge to play Minesweeper \ud83d\udea9.\\n<ImgWithCaption\\n    alt=\\"98 css\\"\\n    source=\\"img/update-feb-23/98-css.png\\"\\n/>\\n\\n- [Squeezing a Sokoban game into 10 lines of code](https://www.cole-k.com/2023/02/21/tiny-games-hs/) - this is why Haskell gets a bad rep and why we can\'t have nice things \ud83d\ude05 I\'ll urge you to look away, but I know you won\'t. Jokes aside, this was cool! The blog post is also really well written and it was super fun to read.\\n<ImgWithCaption\\n    alt=\\"Sokoban in 10 lines of code\\"\\n    source=\\"img/update-feb-23/sokoban-10loc.png\\"\\n/>\\n\\n\\n## Wasp Github Star Growth - 2,317 \u2b50\ufe0f, woohoo!\\nHuge thanks to all our [contributors](https://github.com/wasp-lang/wasp/graphs/contributors) and [stargazers](https://github.com/wasp-lang/wasp/stargazers) - you are amazing!\\n\\n<ImgWithCaption\\n    alt=\\"Wasp has over 2,000 GitHub stars\\"\\n    source=\\"img/update-feb-23/gh-stars.png\\"\\n/>\\n\\nAnd if you haven\'t yet, please [star us on Github](https://wasp-lang.dev/docs)! Yes, we are shameless star beggars, but if you believe in the project and want to support it that\'s one of the best ways to do it (next to actually building something with Wasp - [go do that too](https://wasp-lang.dev/docs)! :D)\\n\\nThat\'s a wrap! Thanks for reading and we can\'t wait for our next launch to get out and see how you like it. As always, [we\'re on Discord](https://discord.gg/rzdnErX) and appreciate any comments, feedback, and ideas - that\'s how Wasp came to be!\\n\\nAs a parting gift, here are a few curated Da Boi memes created by our valued community members:\\n\\n<ImgWithCaption\\n    alt=\\"Wasp\'s new mascot\\"\\n    source=\\"img/update-feb-23/wasp-discord-meme.jpeg\\"\\n/>\\n\\nBuzzy buzz, you got that snazz \ud83d\udc1d \ud83d\udc1d,  \\nMatija, Martin and the Wasp team\\n\\n\\n*Want to stay in the loop? \u2192 [Join our newsletter!](/#signup)*"},{"id":"/2023/02/21/junior-developer-misconceptions","metadata":{"permalink":"/wasp-docs/blog/2023/02/21/junior-developer-misconceptions","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-02-21-junior-developer-misconceptions.md","source":"@site/blog/2023-02-21-junior-developer-misconceptions.md","title":"The Most Common Misconceptions Amongst Junior Developers","description":"High code quality only indirectly affects users. The main purpose is to keep development velocity high which benefits all stakeholders","date":"2023-02-21T00:00:00.000Z","formattedDate":"February 21, 2023","tags":[{"label":"Junior Developers","permalink":"/wasp-docs/blog/tags/junior-developers"},{"label":"Tech Career","permalink":"/wasp-docs/blog/tags/tech-career"},{"label":"Reddit","permalink":"/wasp-docs/blog/tags/reddit"},{"label":"WebDev","permalink":"/wasp-docs/blog/tags/web-dev"}],"readingTime":5.19,"hasTruncateMarker":true,"authors":[{"name":"Vinny","title":"DevRel @ Wasp","url":"https://vincanger.github.io","email":"vince@wasp-lang.dev","imageURL":"https://vincanger.github.io/assets/vince_smiley.jpg","key":"vinny"}],"frontMatter":{"title":"The Most Common Misconceptions Amongst Junior Developers","authors":["vinny"],"image":"/img/junior-misconceptions/juniors-misconceptions.png","tags":["Junior Developers","Tech Career","Reddit","WebDev"]},"prevItem":{"title":"Wasp Beta - February 2023","permalink":"/wasp-docs/blog/2023/03/02/wasp-beta-update-feb"},"nextItem":{"title":"From Idea to Paying Customers in 1 Week: An Interview with Amicus.work","permalink":"/wasp-docs/blog/2023/02/14/amicus-indiehacker-interview"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<br/>\\n\\n> *High code quality only indirectly affects users. The main purpose is to keep development velocity high which benefits all stakeholders* \\n> &nbsp; \u2014 **zoechi**\\n\\n<br/>\\n\\nWe recently asked the web dev community on [Reddit.com](https://www.reddit.com/r/webdev/comments/112im2m/senior_devs_what_are_the_most_damaging/) what the most common misconceptions are amongst junior developers, and we got a ton of great responses -- more than 270 to be exact.\\n\\nBecause there was so much to discuss, Matija and I decided to summarize the replies and give our own opinions in a longer-form YouTube video, which you can watch below. \\n\\n*You can also continue reading further for a summary of the main concepts.*\\n\\n<iframe width=\\"100%\\" height=\\"400\\" src=\\"https://www.youtube.com/embed/eermNn9VhOA\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\n\x3c!--truncate--\x3e\\n<p></p>\\n\\n## The Most Common Themes\\n\\nAmong the responses were lots of great, specific examples, but we noticed a lot of common themes within them:\\n\\n- **Code Quality**\\n- **Managing Time & Expectations**\\n- **Effective Communication & Teamwork**\\n\\nThese seemed to be the topics senior devs had the most to say about. And it makes sense -- these are the things that, when you get to the core of the issues, can make or break almost *any* career. \\n\\nIt was also interesting to see that the top replies were issues that encompassed all of these themes. For example, take the top-voted reply:\\n\\n<ImgWithCaption\\n    alt=\\"Clean it up later\\"\\n    source=\\"img/junior-misconceptions/come-back-later.png\\"\\n    caption=\\"The most common misconception is that you\'re going to come back and clean that up later.\\" \\n/>\\n\\n## First Quality & Then Velocity\\n\\nThe top reply above touches on all three of the common themes we outlined, because within it is a message about quality -- about doing things correctly. And whenever you speak about quality, there is an inherent assumption that it takes longer, so we\'re also talking about time management. And, if you\'re a part of a team, you can\'t work effectively without good communication and teamwork.\\n\\nNevertheless, in the \\"quality\\" debate there were effectively two camps, with those who thought quality code was about: \\n 1. writing clean, readable code, that\'s easy to maintain \\n 2. writing code that gets shipped on time and works.\\n\\nThe balance between meeting deadlines, shipping features, and writing the best possible code is obviously a tricky one to get right. Some people had the opinion that business realities trump clean code patterns in the dash to meet deadlines and keep clients happy, while others thought that clean, quality code should be the priority, and that by making it a priority you can actually increase long-term velocity, even if short-term deadlines aren\'t met.\\n\\n<ImgWithCaption\\n    alt=\\"You don\'t have to touch all the code you see\\"\\n    source=\\"img/junior-misconceptions/touch-all-code.png\\"\\n/>\\n\\nThis discussion can distract from Junior developers priorities though, which are to grow and improve as a developer, not lead the team to success. Therefore, it\'s probably best for Junior devs to focus on quality first, and then improve their speed of delivery second.\\n\\n## Stay Humble & Manage Expectations\\n\\nAs a Junior developer, it\'s not expected that you\'re going to get everything right the first time. There is an assumption that you will learn the best practices over time, and along the way you might produce inconsistent work, make mistakes, or even possibly break some things along the way.\\n\\nBut that\'s okay. \\n\\nIt\'s part of the process. It\'s expected. And it\'s important to remember that this is not a reflection of your value or worth as an engineer or individual. \\n\\nIn the replies, there were also many developers who recognized another developer\'s desire \\"to fix things later\\" as a way to brush off criticism towards their work. They generally viewed this as a bad habit to get into, as it is often one that plagues developers even as they gain more experience. \\"Code reviews are not personal\\", and being able to take criticism graciously is an important skill to develop. After all, seniors are there to guide you towards making better decisions based on their own experiences. And juniors are there to learn.\\n\\n<ImgWithCaption\\n    alt=\\"The senior dev doesn\'t know everything\\"\\n    source=\\"img/junior-misconceptions/senior-knows-all.png\\"\\n/>\\n\\nBut how often should you seek a Senior\'s advice? Should you do what they said, or what some dude told you *is the only way to do x* on YouTube or in some blogpost ;) ? \\n\\nShould you ask for help every time you get stuck, or should you compromise your sanity and struggle alone for days?\\n\\nWell, it depends on who you ask. But most of the replies made it clear that:\\n1. You should try it out yourself first.\\n2. Use the resources available to you (Google, Stack Overflow, GPT) to try and figure it out.\\n3. Ask for help once you considerably slow down on making any progress.\\n4. If you have a possible solution and it differs from the senior dev\'s suggestion, that doesn\'t mean it\'s wrong -- there can sometimes be many possible ways to achieve the same goal!\\n\\n<ImgWithCaption\\n    alt=\\"Bothering seniors with questions\\"\\n    source=\\"img/junior-misconceptions/bothering-questions.png\\"\\n/>\\n\\n## Be Flexibile & Open to Change \\n\\nNothing changes faster than the world of technology. As a developer, you need to constantly be learning and adapting to new technologies and trends. If you don\'t like change, well then being a software developer probably isn\'t the right career for you.\\n\\n<ImgWithCaption\\n    alt=\\"Everything takes longer than you think\\"\\n    source=\\"img/junior-misconceptions/everything-takes-longer.png\\"\\n/>\\n\\nOn top of things changing constantly, it\'s the kind of job that challenges your assumptions. What you think might be the best solution turns out to be incompatible with your team\'s desired goals or end product, and you\'re forced to use a \\"sub-optimal\\" solution instead. Why? Because it\'s the best way to \\nget the job done given your team\'s constraints. *\\"Sorry, pal, but we can\'t use your favorite framework on this one.\\"*\\n\\nThe developers who stay flexible and open-minded are often at an advantage here. They\'re the ones that are less dogmatic about a particular technology or approach, and are more willing to adapt to the situation at hand. They\'re typically the ones that progress faster than their peers, and they\'re the ones that get the job done well.\\n\\n<hr/>\\n\\n*Want to stay in the loop? \u2192 [Join our newsletter!](/#signup)*"},{"id":"/2023/02/14/amicus-indiehacker-interview","metadata":{"permalink":"/wasp-docs/blog/2023/02/14/amicus-indiehacker-interview","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-02-14-amicus-indiehacker-interview.md","source":"@site/blog/2023-02-14-amicus-indiehacker-interview.md","title":"From Idea to Paying Customers in 1 Week: An Interview with Amicus.work","description":"I guess it was less me having an idea and validating it, and more a valid idea coming to me and biting me in the ass, and me thinking \u2018oh hey\u2026\u2019","date":"2023-02-14T00:00:00.000Z","formattedDate":"February 14, 2023","tags":[{"label":"SaaS","permalink":"/wasp-docs/blog/tags/saa-s"},{"label":"IndieHacker","permalink":"/wasp-docs/blog/tags/indie-hacker"},{"label":"Solopreneur","permalink":"/wasp-docs/blog/tags/solopreneur"},{"label":"Interview","permalink":"/wasp-docs/blog/tags/interview"}],"readingTime":7.255,"hasTruncateMarker":true,"authors":[{"name":"Vinny","title":"DevRel @ Wasp","url":"https://vincanger.github.io","email":"vince@wasp-lang.dev","imageURL":"https://vincanger.github.io/assets/vince_smiley.jpg","key":"vinny"}],"frontMatter":{"title":"From Idea to Paying Customers in 1 Week: An Interview with Amicus.work","authors":["vinny"],"image":"/img/amicus-usecase/amicus-homepage.png","tags":["SaaS","IndieHacker","Solopreneur","Interview"]},"prevItem":{"title":"The Most Common Misconceptions Amongst Junior Developers","permalink":"/wasp-docs/blog/2023/02/21/junior-developer-misconceptions"},"nextItem":{"title":"The Best Web App Framework Doesn\'t Exist","permalink":"/wasp-docs/blog/2023/02/02/no-best-framework"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<br/>\\n\\n> *I guess it was less me having an idea and validating it, and more a valid idea coming to me and biting me in the ass, and me thinking \u2018oh hey\u2026\u2019* \\n> &nbsp; \u2014 **Erlis Kllogjri**\\n\\n<br/>\\n\\nErlis Kllogjri, a computer engineer and the creator of [Amicus.work](https://amicus.work), went from idea to paying customers in just one week \ud83e\udd2f! In this interview, he tells how sometimes the best ideas come looking for you, and how moving quickly can help you stay inspired, motivated, and pull in your first satisfied customers.\\n\\n<br/>\\n<ImgWithCaption\\n    alt=\\"Amicus Homepage\\"\\n    source=\\"/img/amicus-usecase/amicus-homepage.png\\"\\n    width=\\"500px\\"\\n/>\\n\\n\x3c!--truncate--\x3e\\n\\n<hr/>\\n\\n### Before we begin with the unlikely origin story of Amicus.work, can you tell us a bit about what it is?\\n\\n[Amicus](https://amicus.work) is a SaaS tool for legal teams that helps keep you organized and on top of your legal needs. Think of it like \\"Asana for lawyers\\", but with features and workflows tailored to the domain of law. \\n\\nIt allows attorneys and their clients to easily track the progress of the legal case they are dealing with, and collaborate with others involved in the case, all in one central location. For example, deadline reminders help with not missing key dates and workflow visualization allows lawyer and client to see where the process is stuck, and get it unstuck.\\n\\n\\n### Your time from initial idea to working MVP seemed fast. How long was it and how did you achieve it so quickly?\\n\\nFrom the initial discussions to the launch of the initial prototype was probably a week or so. This is even quicker than it sounds because I was working a full time job at the time. The speed [of execution] was fully enabled by [Wasp](https://wasp-lang.dev), a full-stack web app framework.\\n\\nI was looking at other solutions, but none of them were full-stack and sounded like a lot of work just to stitch everything together and get started. I just wanted to get the job done and didn\u2019t care about picking the stack specifics myself. [Wasp](https://wasp-lang.dev) was really helpful as it set me up with the best practices and I had everything running in just a few minutes!\\n\\n### How were you able to get these first customers so quickly?\\n\\nThe first user is a little bit of a cheat because I know them \u2014 my brother, who is a lawyer. But having read about other entrepreneurs, this is not that uncommon. Sometimes the first users we know are ourselves, sometimes they\u2019re family or friends, and sometimes it\u2019s someone you sought out. But I think it was important to have the client before the idea, because that way you have the problem before the solution.\\n\\n### What advice would you give to other Solopreneurs regarding the validation process?\\n\\nWith regard to process, I spent a lot of time having discussions with my first user - my brother. The better you know the first user, the more careful you need to be I think. They\u2019re going to give you slack and support your ideas. You don\u2019t really want that, so you have to dive deeper into each problem/solution - like asking 5 why\u2019s, so you can be more objective. \\n\\nOnce more users came on, I began sending out surveys about the key things I wanted to know. I also started setting up SQL queries and adding logs to answer questions about what kind of user was using what features the most etc. Being a solopreneur means you have to be even more careful about what you spend your time building.\\n\\nMRR is low at the moment, around ~$90, and the first goal is to get to an MRR around ~$2,000. At that point I would be able to throw more time and resources at the application, increase the utility, and kick off a virtuous cycle of more revenue and utility.\\n\\n### That\u2019s great. So rather than trying to find a clever idea, the idea found you.\\n\\nIt\u2019s funny because I have all of these harebrained ideas that I\u2019m always kicking around, thinking about how to validate them: MVPs, setting up a landing page that gets emails or deposits, etc. \\n\\nMeanwhile my brother was telling me about this pain of managing matters that no tool really helped with. Clients want to know where the process is, how many steps are left, how they need to be reminded of important dates like contract deadlines, etc. So I agreed to build something to see if it would help. [Wasp](https://wasp-lang.dev) was instrumental here because if these steps had taken too long I would have probably lost interest and gotten distracted by something else. It allowed me to abstract all the details of a full stack app and focus on the product itself.\\n\\nI built the prototype and it was TERRIBLE, it hurts to think back on that first version. But it was being used, and terrible though it was, it was still providing utility. And that was the point where it clicked the idea would work - if my first crude attempt was useful, and it would only get better with each iteration, there is a space here to provide so much value that some of it can be captured.\\n\\nI guess it was less me having an idea and validating it, and more a valid idea coming to me and biting me in the ass, and me thinking \u2018oh hey\u2026\u2019.\\n\\n### What\u2019s been the biggest lessons learned as a result from building Amicus? If you could do it over, what would you do the same and what would you do differently?\\n\\nI think one of the things I would do differently is spend a little more time at the beginning getting a full grasp on the use cases. I tried doing this with interviews with the first client. However once what was intended was built, I come across all of these questions that weren\u2019t initially obvious. I have seen PMs in the past create paper mockups (or using [Figma](https://www.figma.com) if there is time) and walking a person through what they would do - then all of a sudden these assumptions you both had bubble up. [I] would probably do something like that if possible.\\n\\n### What were your biggest concerns before getting started building Amicus? What problems did you know you wanted to avoid and how did you successfully achieve those goals?\\n\\n[My] biggest concern when getting started building [Amicus](https://amicus.work) was honestly that it would go to the unfinished project graveyard. Once again, [Wasp](https://wasp-lang.dev) was key to resolving this. Being able to remove most of the redundancy involved in making a full stack app really helped me. It allowed me to focus on the interesting problems.\\n\\nOne of the things I have been trying to be careful to avoid is building things that aren\u2019t needed or solving problems that don\u2019t exist. It is very easy to get into the trap of thinking \u2018oh this would be cool\u2019 or \u2018oh this extra thing might need to be build incase\u2026\u2019. I have been trying to be rigorous about validating features before building them (by talking to users or through the surveys), and unless theres a good reason to believe something is a problem I don\u2019t spend my time fixing it. This is very hard, but it has allowed me to focus.\\n\\n<br/>\\n<ImgWithCaption\\n    alt=\\"Wasp Logo\\"\\n    source=\\"/img/wasp-logo-wide.png\\"\\n    width=\\"500px\\"\\n/>\\n\\n### Have you done any form of advertising? press releases? How are you spreading the word about Amicus at the moment?\\n\\nNo advertising yet and no press releases either. Right now spreading of the word is mostly through word of mouth. Advertising can be a money pit, especially when you don\u2019t know what you\u2019re doing (and I probably don\u2019t know what I am doing) so I want to first make sure I am at the point where users feel passionate enough about Amicus to where they tell others about it. Once I get there, advertising can have a bigger return even with my fumbling. \\n\\n### What made you decide to go it alone as a \u201cSolopreneur\u201d? Were you confident that you\u2019d be able to tackle the challenge alone, and if so why?\\n\\nThis wasn\u2019t so much a decision as something that came about one decision at a time. What initially started as just a handy app for my brother to use, naturally grew in scope and utility, and all of a sudden there was a business and I effectively became a solopreneur. Although I\u2019ve always wanted to be an entrepreneur, I didn\u2019t realize I had become a solopreneur until after the fact.\\n\\n<hr/>\\n\\n*Want to stay in the loop? \u2192 [Join our newsletter!](/#signup)*"},{"id":"/2023/02/02/no-best-framework","metadata":{"permalink":"/wasp-docs/blog/2023/02/02/no-best-framework","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-02-02-no-best-framework.md","source":"@site/blog/2023-02-02-no-best-framework.md","title":"The Best Web App Framework Doesn\'t Exist","description":"The web app framework you choose doesn\u2019t really matter. Well, it matters, just not as much as others would like you to believe.","date":"2023-02-02T00:00:00.000Z","formattedDate":"February 2, 2023","tags":[{"label":"framework","permalink":"/wasp-docs/blog/tags/framework"},{"label":"StateOfJS","permalink":"/wasp-docs/blog/tags/state-of-js"},{"label":"react","permalink":"/wasp-docs/blog/tags/react"},{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"}],"readingTime":2.74,"hasTruncateMarker":true,"authors":[{"name":"Vinny","title":"DevRel @ Wasp","url":"https://vincanger.github.io","email":"vince@wasp-lang.dev","imageURL":"https://vincanger.github.io/assets/vince_smiley.jpg","key":"vinny"}],"frontMatter":{"title":"The Best Web App Framework Doesn\'t Exist","authors":["vinny"],"image":"/img/best-framework/pretending.png","tags":["framework","StateOfJS","react","webdev"]},"prevItem":{"title":"From Idea to Paying Customers in 1 Week: An Interview with Amicus.work","permalink":"/wasp-docs/blog/2023/02/14/amicus-indiehacker-interview"},"nextItem":{"title":"Convincing developers to try a new web framework - the effects of launching beta","permalink":"/wasp-docs/blog/2023/01/31/wasp-beta-launch-review"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<br/>\\n\\nThe web app framework you choose doesn\u2019t *really* matter. Well, it matters, just not as much as others would like you to believe. \\n\\nThe fact that so many libraries and frameworks exist in 2023, and that **the best one** is [still hotly debated](https://joshcollinsworth.com/blog/self-fulfilling-prophecy-of-react), proves my point. It\u2019s the web developers biggest \u201cfirst-world problem\u201d \u2014 a problem that\u2019s not really a problem. On Maslow\u2019s *Hierarchy of Developer Needs,* it\u2019s definitely near the top (ok, I made that up \ud83d\ude05)\\n\\n<br/>\\n<ImgWithCaption\\n    alt=\\"hierarchy of developer needs\\"\\n    source=\\"img/best-framework/hierarchy-of-dev-needs.png\\"\\n/>\\n<br/>\\n\\n\x3c!--truncate--\x3e\\n\\nFor example, according the the [StateOfJS](https://2022.stateofjs.com/en-US/libraries/front-end-frameworks/) survey, there were 5 Front-end Frameworks with good retention in 2018, now there are 11 in 2022. That\u2019s a 120% increase in a matter of 4 years, and that\u2019s not even taking into account the hot meta-frameworks like NextJS, SvelteKit, or Astro!\\n\\n<br/>\\n<ImgWithCaption\\n    alt=\\"State of JS 2022\\"\\n    source=\\"img/best-framework/state-of-js.png\\"\\n    caption=\\"A growing family of frameworks...\\"\\n/>\\n<br/>\\n\\nThese are great developments for the space, overall. They improve things like developer speed, bundle size, performance, and developer experience. But they also make it damn hard for developers and teams to make a decision when trying to decide which to use for their next project. It\u2019s even worse for beginners, which is probably why they just go for React \u2014 which, of course, is perfectly fine. \\n\\nAnd I think all of this is OK, because in the end it doesn\u2019t really matter which one you choose. When it really comes down to it, all that matters is that the framework you chose:\\n\\n- Is stable\\n- Allows you to move quickly\\n- Allows you to reach your end goal\\n\\nWhy? Because most of them are built around the same concepts, have proven themselves capable of performing at scale, and have communities you can engage with and learn from. \\n\\nReact might be the most prominent in job descriptions, but if you\u2019re looking for a new role and only have experience in Vue or Angular, I can\u2019t imagine it would take you more than a week to build a side-project with React to display your ability to prospective employers.\\n\\nOn the flip side, if you\u2019re a beginner or Junior dev, once you have the basics of HTML, CSS, and JS under your belt, it doesn\u2019t really matter what framework you learn. I personally started learning backend development with Node/ExpressJS, but landed my first role as a Frontend developer with Angular. In my second role I used NextJS, and now I work with [Wasp](https://wasp-lang.dev) (a full-stack framework built on top of React and ExpressJS). [Developers never stop learning](https://www.youtube.com/watch?v=gl5HvBpUbt8), so it\u2019s kind of a non-argument to deride any specific framework \u2014 unless it really sucks, but then no one will continue to use it anyway.\\n\\n<br/>\\n<ImgWithCaption\\n    alt=\\"Use what works\\"\\n    source=\\"img/best-framework/midwitwasp.jpeg\\"\\n/>\\n<br/>\\n\\nSo, in the end, use what works. Because in 99.99% of cases, your choice of web framework will not decide the fate of your project.\\n\\nIf you\u2019ve done a bit of research and found a framework that suits your needs and you enjoy using it \u2014 use it. There\u2019s really no good reason not to.\\n\\n<br/>\\n<hr/>\\n\\n*Want to stay in the loop? \u2192 [Join our newsletter!](/#signup)*"},{"id":"/2023/01/31/wasp-beta-launch-review","metadata":{"permalink":"/wasp-docs/blog/2023/01/31/wasp-beta-launch-review","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-01-31-wasp-beta-launch-review.md","source":"@site/blog/2023-01-31-wasp-beta-launch-review.md","title":"Convincing developers to try a new web framework - the effects of launching beta","description":"<ImgWithCaption","date":"2023-01-31T00:00:00.000Z","formattedDate":"January 31, 2023","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"startups","permalink":"/wasp-docs/blog/tags/startups"},{"label":"github","permalink":"/wasp-docs/blog/tags/github"}],"readingTime":6.455,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"Convincing developers to try a new web framework - the effects of launching beta","authors":["matijasos"],"image":"/img/beta-launch-review/how-it-started.png","tags":["webdev","wasp","startups","github"]},"prevItem":{"title":"The Best Web App Framework Doesn\'t Exist","permalink":"/wasp-docs/blog/2023/02/02/no-best-framework"},"nextItem":{"title":"Wasp Beta December 2022","permalink":"/wasp-docs/blog/2023/01/18/wasp-beta-update-dec"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n\\n<ImgWithCaption\\n    alt=\\"Alpha feedback\\"\\n    source=\\"img/beta-launch-review/how-it-started.png\\"\\n/>\\n\\nWe are developing an OSS web framework in a form of a config language (DSL) that works with React & Node.js. Getting developers to use a new tool (especially a web framework) is [a pretty hard thing to do](/blog/2022/09/29/journey-to-1000-gh-stars). We wished there were more stories of how today\'s mainstream tools got adopted that we could learn from, so that motivated us to document our own.\\n\\n*Want to stay in the loop? \u2192 [Join our newsletter!](/#signup)*\\n\\n\x3c!--truncate--\x3e\\n\\n## TL;DR\\n- [HackerNews launch](https://news.ycombinator.com/item?id=33910997) post brought the most traffic, by far\\n- Product Hunt launch went worse than expected, bots took over\\n- Our goal was to reach GitHub Trending but we failed\\n- Less overall traffic than for the Alpha launch, but much higher quality of feedback + a shift in public perception\\n- Having a public launch date made us 3x more productive\\n\\n## \ud83d\udcca The results: stats\\nWe [launched Beta](/blog/2022/11/29/wasp-beta) on Nov 27, 2022 in a launch week format, recently popularized by [Supabase](https://supabase.com/blog/supabase-how-we-launch). During the first week we launched on Product Hunt, and after the weekend we posted on HackerNews. Here\'s what the numbers were on the last day of the launch:\\n- 190 GitHub stars added to the repo\\n- 108 new projects started\\n- 83 new users (installed Wasp locally and ran it)\\n\\n<ImgWithCaption\\n    alt=\\"Web visitors during beta launch week\\"\\n    source=\\"img/beta-launch-review/launch-week-visitors.png\\"\\n/>\\n\\nHN launch caused almost 2x spike in traffic and usage. Also, although our launch week already ended by the start of December, we actually had the most users ever throughout December:\\n\\n<ImgWithCaption\\n    alt=\\"WAU displayed monthly\\"\\n    source=\\"img/beta-launch-review/wau-monthly.png\\"\\n/>\\n\\nLooking back, this wasn\'t at all our biggest event in terms of traffic, but it was in terms of usage:\\n\\n<ImgWithCaption\\n    alt=\\"All time stats\\"\\n    source=\\"img/beta-launch-review/all-time-stats.png\\"\\n/>\\n\\nOne of the main effects of the launch (together with a [few](https://news.ycombinator.com/item?id=32098144) [recent](https://news.ycombinator.com/item?id=32566123) successful HN posts, and the [Alpha Testing Program](/blog/2022/11/16/alpha-testing-program-post-mortem) we ran in Jul \'22) is that we managed to move the baseline WAU from ~10 to ~20. Another effect, felt more subjectively, is the change in the community perception.\\n\\n## Community perception shift\\nAs mentioned above, although our Alpha launch had higher absolute numbers (website traffic, HN upvotes etc), **it felt that Beta launch caused the biggest perception shift in the community so far**.\\n\\nBefore were mostly getting superficial comments like *\u201cthis looks cool, I\u2019ll give it a try once\u201d*, or *\u201cwhy DSL approach and not the other one\u201d*, and this time we could notice that portion of people already knew Wasp from before (some even used it), and had more specific questions, even proposing next features that we planned but haven\u2019t published yet.\\n\\n<ImgWithCaption\\n    alt=\\"Beta feedback\\"\\n    source=\\"img/beta-launch-review/beta-feedback.png\\"\\n/>\\n\\nAlthough the core message (DSL for developing full-stack web apps with React & Node.js) hasn\u2019t changed, there was significantly less pushback to the concept than before. I guess it comes down to the time elapsed and the product being more polished and validated from the outside - Beta, [published use-cases](/#showcases), [testimonials](/#testimonials), \u2026\\n\\n\\n## Before the launch\\nThis was our initial plan:\\n<ImgWithCaption\\n    alt=\\"Launch timeline\\"\\n    source=\\"img/beta-launch-review/launch-timeline.png\\"\\n/>\\n\\nFor 20 days before the launch we were posting daily countdown banners on Twitter + a few polls (e.g. what\'s your favourite CSS framework) to engage the audience.\\n\\n<ImgWithCaption\\n    alt=\\"Examples of pre-launch tweets\\"\\n    source=\\"img/beta-launch-review/prelaunch-tweets.png\\"\\n/>\\n\\n[Our Twitter game](https://twitter.com/WaspLang) is still super young (~500 followers) so it didn\'t have a big effect but it helped to get the team excited and a few people also noticed it and commented/voted.\\n\\nDue to the lack of time we ended up doing user testing in-house. That\'s still something I\'d like to improve and make a habit of in the future.\\n\\nA few other things we did prior to the launch:\\n- **Redesigned our project page** - gave it a new, sleeker look\\n- **Published [use cases with our most successful users](/#showcases)** and featured them on the project page\\n- **Activated our Discord and [email list](https://us4.campaign-archive.com/?u=8139c7de74df98aa17054b235&id=1195fce664)**\\n- **Organized a launch event** (call on Discord) to celebrate the launch - it went better than expected, a decent amount of people showed up and we had some good discussions!\\n\\n## The launch\\nAs mentioned, we went with a launch week format - we liked the idea of having a whole week filled with content rather than cramming everything in a single day. We highlighted a new feature every day + launched a hackathon on the last day of the week, to keep the momentum. You can see the full schedule [here](/blog/2022/11/26/wasp-beta-launch-week).\\n\\n<ImgWithCaption\\n    alt=\\"Launch week schedule\\"\\n    source=\\"img/beta-launch-review/launch-schedule.png\\"\\n/>\\n\\nWe also shared our launch news at different places, most successful being [Product Hunt](https://www.producthunt.com/products/wasp-lang-alpha#wasp-lang-beta), [HackerNews](https://news.ycombinator.com/item?id=33910997) and [Reddit](https://www.reddit.com/r/javascript/comments/z7xo9t/wasp_dsl_framework_for_building_fullstack_js/).\\n\\n## Product Hunt - failed, but ok\\nThe mistake we did was launching on the Thanksgiving weekend - there was little (real) traffic + the mods were away so the bots took over!\\n\\nWe ended up as [#5 product of the day](https://www.producthunt.com/products/wasp-lang-alpha#wasp-lang-beta) with ~250 upvotes, which wasn\u2019t so bad because in the end we got featured in their daily newsletter with 1M+ subscribers.\\n\\nThe bad part was that mods were away and **pretty much all other products in front of us were fake or obviously bot powered!** It felt like there was no real interaction on any of these products, just endless \u201ccongrats on the launch\u201d comments from the newly created accounts with obviously fake names. Two products were also clearly violating PH rules (one was the same product that launched a week or two ago, but just changed the name).\\n\\nThe most disappointing part for us (and especially for the team) was that it felt like there aren\u2019t any real people on PH, just bots.\\n\\n## \ud83d\udd79 Post-launch: Wasp Hackathon #1 - Betathon!\\nSince we introduced all the new features during the launch week, we thought a good way to keep the community engaged and give them a reason to try Wasp Beta out would be to throw a hackathon! It was the first time we did so we weren\'t sure how it\'d go, but it went better than expected!\\n\\n<ImgWithCaption\\n    alt=\\"Tweet about Betathon - our #1 hackathon!\\"\\n    source=\\"img/beta-launch-review/hackathon-tweet.png\\"\\n/>\\n\\nIn the end, it was definitely worth it ([see review and submissions here](https://wasp-lang.dev/blog/2023/01/11/betathon-review)). It was quite lightweight to organize (we even made a [custom web app with Wasp for the hackathon](https://betathon.wasp-lang.dev/) which you can also [use for your hackathon](https://github.com/vincanger/wasp-betathon)) and we got some really nice submissions and community shout-outs.\\n\\n## Announcing a launch date publicly is great for productivity\\n\\nAnother big benefit we noticed from this type of launching is how much more productive it made the whole team. Although the launch date was totally self-imposed (and we did move it a couple of times internally), it was still an amazing forcing function once we announced it publicly. It focused the efforts of the whole team and it also felt great.\\n\\n**We decided to keep going with the quarterly release schedule in this format - 3 months is just enough time to make a dent on the product side, but not long enough to get stuck or caught up with endless refactoring**. It also forces us to plan for the features that will have most impact on the developers using Wasp and make their lives easier, because we all want to have something cool and useful to present during the launch week.\\n\\n## Conclusion\\n\\nI hope you found this post helpful or at least interesting! Creating a new web framework might be one of the most notorious things to do as a developer, but that shouldn\'t be a reason not to do it - where are the new frameworks going to come from otherwise?\\n\\n*Want to stay in the loop? \u2192 [Join our newsletter!](/#signup)*"},{"id":"/2023/01/18/wasp-beta-update-dec","metadata":{"permalink":"/wasp-docs/blog/2023/01/18/wasp-beta-update-dec","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-01-18-wasp-beta-update-dec.md","source":"@site/blog/2023-01-18-wasp-beta-update-dec.md","title":"Wasp Beta December 2022","description":"<ImgWithCaption","date":"2023-01-18T00:00:00.000Z","formattedDate":"January 18, 2023","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"startups","permalink":"/wasp-docs/blog/tags/startups"},{"label":"github","permalink":"/wasp-docs/blog/tags/github"}],"readingTime":5.095,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"Wasp Beta December 2022","authors":["matijasos"],"image":"/img/update-dec-23/banner.png","tags":["webdev","wasp","startups","github"]},"prevItem":{"title":"Convincing developers to try a new web framework - the effects of launching beta","permalink":"/wasp-docs/blog/2023/01/31/wasp-beta-launch-review"},"nextItem":{"title":"Hosting Our First Hackathon: Results & Review","permalink":"/wasp-docs/blog/2023/01/11/betathon-review"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<ImgWithCaption\\n    alt=\\"Wasp Update Dec 22\\"\\n    source=\\"img/update-dec-23/banner.png\\"\\n/>\\n\\n*Want to stay in the loop? \u2192 [Join our newsletter!](/#signup)*\\n\\nHey Wasp tribe \ud83d\udc1d ,\\n\\nHappy New Year! I know you\'re probably already sick of hearing it, but hopefully we\'re the last ones to congratulate you \ud83d\udd2b \ud83d\udc48 (that\'s pistol fingers emoji in case you were wondering).\\n\\n\x3c!--truncate--\x3e\\n\\n<ImgWithCaption\\n    alt=\\"Pistol fingers\\"\\n    source=\\"img/update-dec-23/pistol-fingers.gif\\"\\n    caption=\\"This is how I imagine myself telling the joke above.\\"\\n/>\\n\\nNow that the [Beta Launch](/blog/2022/11/29/wasp-beta) craze is over (thanks for your support, it was amazing - we saw more devs hacking with Wasp than ever!), we\'re back to our usual programming. Let\'s dive in and see what\'s new and what\'s in the plans for this year:\\n\\n## \ud83c\udfae \ud83d\udc1d We hosted our first hackathon - it was a blast! \ud83c\udf89 \ud83c\udf89\\n\\n<ImgWithCaption\\n    alt=\\"Tweet about Wasp\\"\\n    source=\\"img/update-dec-23/tskaggs-tweet.png\\"\\n/>\\n\\nWe launched our first Wasp hackathon ever on the last day of Beta Launch (thus we named it Betathon) and got some [really cool submissions](/blog/2023/01/11/betathon-review)! Winners received hosting credits kindly offered by our partners at [Railway](https://railway.app/) and a special 1st place award was a wasp-themed mechanical keyboard (we\'re still assembling it but we\'ll post photos on our [twitter](https://twitter.com/WaspLang) :))!\\n\\n> \u201c***This was the best app dev experience I ever had!*** *\u2026Walking through the docs, I immediately figured out how to use Wasp and was able to make a prototype in a couple of days.\u201d* - Chris\\n> \\n\\nTo check out the winning projects and see where devs found Wasp most helpful, take a look here: [Wasp Betathon review post](/blog/2023/01/11/betathon-review)\\n\\n## \ud83d\udd11 New auth method - GitHub! \ud83d\udc19\\n\\nNext to [username/password](/docs/auth/username-and-pass) and [Google](/docs/auth/social-auth/google), **Wasp now also supports [GitHub](/docs/auth/social-auth/github)** as an authentication method!\\n\\n<ImgWithCaption\\n    alt=\\"Support for GitHub auth in Wasp\\"\\n    source=\\"img/update-dec-23/github-auth.png\\"\\n/>\\n\\nPutting the code above in your `main.wasp` file and specifying your GitHub env variables is all you need to do! Wasp will provide you with a full-stack GitHub authentication along with UI helpers (GitHub sign-up button) you can immediately use in your React component.\\n\\nFor more details, check the docs [here](/docs/auth/social-auth/github).\\n\\n## \ud83d\udcac Let\'s discuss - on GitHub Discussions!\\n\\n<ImgWithCaption\\n    alt=\\"Wasp is now on GitHub Discussions\\"\\n    source=\\"img/update-dec-23/gh-discussions.png\\"\\n/>\\n\\nSo far we\'ve been capturing your feedback across [GitHub issues](https://github.com/wasp-lang/wasp/issues) and [Wasp Discord server](https://discord.gg/rzdnErX), but with the current volume it has become a bit unwieldy and hard to keep track of.\\n\\nThat\'s why we introduced [Wasp GitHub Discussions](https://github.com/wasp-lang/wasp/discussions)! It\'s a relatively new service by GitHub that allows distinguishing between specific, well-defined issues (bug reports, TODOs, ...) and discussion items (ideating about new features, figuring out best practices, etc) and allows for upvotes from the community.\\n\\nIf there is a feature you\'d like to see in Wasp (e.g. support for Vue) you can create a new post for it or upvote it if it is already there!\\n\\n## \ud83d\ude80 Next launch is coming - a super early sneak peek \ud83d\udc40 \\n\\n<ImgWithCaption\\n    alt=\\"Next launch sneak peek\\"\\n    source=\\"img/update-dec-23/next-launch.png\\"\\n/>\\n\\nWe know we just wrapped up Beta release, but we are busy wasps and our heads are already in the next one! We made a preliminary draft of the features that are going to be included - **the \\"theme\\" of this release is going to be about making Wasp super easy and friendly for you to use**.\\n\\nWe\'ll further polish our auth & deployment experience, along with ensuring TypeScript experience is fully typed and as helpful as possible. Stay tuned for the official roadmap and date of the next launch!\\n\\nWant to make sure your fav feature makes it into the next release? [Let us know on Discussions](https://github.com/wasp-lang/wasp/discussions)!\\n\\n## \ud83c\udfa5 Wasp is now on YouTube!\\n\\n<ImgWithCaption\\n    alt=\\"Wasp is on YouTube\\"\\n    source=\\"img/update-dec-23/wasp-youtube.png\\"\\n/>\\n\\nThanks to Vince, who recently joined as Devrel (intro blog post coming soon!), Wasp now finally has [its YouTube channel](https://www.youtube.com/@wasplang/videos)!\\n\\nWe\'re just starting out but already made some splashes - our [\\"Build a full-stack app in 9 mins with Wasp and ChatGPT\\"](https://youtu.be/HjUpqfEonow) got over 2k views (not bad for a channel with 50 subscribers, right?).\\n\\nWe also made our first YT short, featuring [how to add auth to your app in 60 seconds](https://youtube.com/shorts/-daNTYiUC64?feature=share) with Wasp.\\n\\nIf you want to stay in the loop (and I guess you do since you\'re reading this :D), please [subscribe to our channel](https://www.youtube.com/@wasplang) and help us reach the first 100 subscribers on YouTube!\\n\\n<ImgWithCaption\\n    alt=\\"Subscribe to Wasp on YouTube\\"\\n    source=\\"img/update-dec-23/yt-cta.png\\"\\n    caption=\\"You know you want it!\\"\\n/>\\n\\n## \ud83d\udd79 Community highlights\\n\\n* [Making Something Waspy: A Review Of Wasp](https://dev.to/emmanuelthecoder/making-something-waspy-a-review-of-wasp-571j) - an overview of Wasp by Emmanuel, one of our contributors and hackathon winners!\\n\\n* [The first 2,000 GitHub stars of Wasp](https://podcast.bitreach.io/episodes/matija-sosic) (podcast \ud83d\udd0a) - I was a guest on the Scaling DevTools podcast by [Jack Bridger](https://twitter.com/jacksbridger) - we chatted about how Wasp started, what were the hardest parts and what are the plans for the future!\\n\\n## Wasp Github Star Growth - over 2,000 \u2b50\ufe0f, woohoo!\\n\\nBeta was great and it brought us to [2,234 stars](https://github.com/wasp-lang/wasp)! We never imagined Wasp could become so popular when we were just getting started. Huge thanks to all our [contributors](https://github.com/wasp-lang/wasp/graphs/contributors) and [stargazers](https://github.com/wasp-lang/wasp/stargazers) - you are amazing!\\n\\n<ImgWithCaption\\n    alt=\\"Wasp has over 2,000 GitHub stars\\"\\n    source=\\"img/update-dec-23/gh-stars.png\\"\\n/>\\n\\nAnd if you haven\'t yet, please [star us on Github](https://wasp-lang.dev/docs)! Yes, we are shameless star beggars, but if you believe in the project and want to support it that\'s one of the best ways to do it (next to actually building something with Wasp - [go do that too](https://wasp-lang.dev/docs)! :D)\\n\\nAnd before you leave, here\'s a photo of a squishy wasp (ok, it\'s a bumblebee, but you get it) proudly rocking Wasp swag \ud83e\udd18 \ud83d\udc1d (yep, we got a bunch of these for the office, you can also see Martin the background :D)!\\n\\n<ImgWithCaption\\n    alt=\\"Wasp\'s new mascot\\"\\n    source=\\"img/update-dec-23/da-boi.jpg\\"\\n    caption=\\"This lil\' boy actually became pretty popular in our community - we\'re now looking for a name for him!\\"\\n/>\\n\\nThanks for reading and see you in a month!\\n\\nBuzzity buzz, you got that pizzazz \ud83d\udc1d \ud83d\udc1d,  \\nMatija, Martin and the Wasp team\\n\\n\\n*Want to stay in the loop? \u2192 [Join our newsletter!](/#signup)*"},{"id":"/2023/01/11/betathon-review","metadata":{"permalink":"/wasp-docs/blog/2023/01/11/betathon-review","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2023-01-11-betathon-review.md","source":"@site/blog/2023-01-11-betathon-review.md","title":"Hosting Our First Hackathon: Results & Review","description":"To finalize the Wasp Beta launch week, we held a Beta Hackathon, which we dubbed the \u201cBetathon\u201d. The idea was to hold a simple, open, and fun hackathon to encourage users to build with Wasp, and that\u2019s exactly what they did!","date":"2023-01-11T00:00:00.000Z","formattedDate":"January 11, 2023","tags":[{"label":"fullstack","permalink":"/wasp-docs/blog/tags/fullstack"},{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"hackathon","permalink":"/wasp-docs/blog/tags/hackathon"},{"label":"startups","permalink":"/wasp-docs/blog/tags/startups"}],"readingTime":5.565,"hasTruncateMarker":true,"authors":[{"name":"Vinny","title":"DevRel @ Wasp","url":"https://vincanger.github.io","email":"vince@wasp-lang.dev","imageURL":"https://vincanger.github.io/assets/vince_smiley.jpg","key":"vinny"}],"frontMatter":{"title":"Hosting Our First Hackathon: Results & Review","authors":["vinny"],"tags":["fullstack","webdev","hackathon","startups"]},"prevItem":{"title":"Wasp Beta December 2022","permalink":"/wasp-docs/blog/2023/01/18/wasp-beta-update-dec"},"nextItem":{"title":"Watch us build a *truly* full-stack app in just 9 minutes w/ Wasp & ChatGPT \ud83d\ude80 \ud83e\udd2f","permalink":"/wasp-docs/blog/2022/12/08/fast-fullstack-chatgpt"}},"content":"import ImgWithCaption from \'./components/ImgWithCaption\'\\n\\nTo finalize the Wasp Beta launch week, we held a Beta Hackathon, which we dubbed the \u201cBetathon\u201d. The idea was to hold a simple, open, and fun hackathon to encourage users to build with Wasp, and that\u2019s exactly what they did!\\n\\nAs Wasp is still in its early days, we weren\u2019t sure what the response would be, or if there\u2019d be any response at all. Considering that we didn\u2019t do much promotion of the Hackathon outside of our own channels, we were surprised by the results.\\n\\nIn this post, I\u2019ll give you a quick run-down of:\\n\\n- the hackathon results \ud83c\udfc6\\n- how the hackathon was organized\\n- how we promoted it\\n- the community response\\n\\n\x3c!--truncate--\x3e\\n\\n## \u2026and the Winners Are:\\n\\nWhat\u2019s a hackathon without the participants!? Let\u2019s get this post off to a proper start by congratulating our winners and showcasing their work. \ud83d\udd0d\\n\\n\\n### \ud83e\udd47\xa0Tim\u2019s Job Board\\n<ImgWithCaption\\n    alt=\\"Tim\'s Job Board\\"\\n    source=\\"img/betathon/tim.png\\"\\n/>\\n\\nTim really went for it and created a feature-rich Job Board:\\n\\n- View the [App](https://client-production-54e7.up.railway.app/) & [GitHub Repo](https://github.com/tskaggs/wasp-jobs)\\n- Follow [Tim on Twitter](https://twitter.com/tskaggs)\\n- \ud83c\udf89 Prizes: Wasp-colored Mechanical Keyboard, Wasp swag, $200 [Railway.app](http://Railway.app) credits\\n\\n\\n> \u201c***Wasp is very awesome!*** *Easy setup and start-up especially if you\'re familiar with the Prisma ORM and Tailwind CSS. The stack is small but powerful... I\'m going to use Wasp on a few MVP projects this year.\u201d* - Tim\\n>\\n\\n\\n### \ud83e\udd48Chris\u2019s \u201cCook Wherever\u201d Recipes App\\n<ImgWithCaption\\n    alt=\\"Chris\'s Cook Wherever Recipes App\\"\\n    source=\\"img/betathon/chris.png\\"\\n/>\\n\\nChris created an extensive database of recipes in a slick app:\\n\\n- View the [App](https://cookwherever.com) & [GitHub Repo](https://github.com/cookwherever/cookwherever)\\n- Follow [Chris on Twitter](https://twitter.com/breadchris)\\n- \ud83c\udf89\xa0Prizes: Wasp swag, $125 [Railway.app](http://Railway.app) credits\\n\\n> \u201c***This was the best app dev experience I ever had!*** *\u2026Walking through the docs, I immediately figured out how to use Wasp and was able to make a prototype in a couple of days.\u201d* - Chris\\n> \\n\\n\\n### \ud83e\udd49\xa0Richard\u2019s Roadmap & Feature Voting App\\n<ImgWithCaption\\n    alt=\\"Richard\u2019s Roadmap & Feature Voting App\\"\\n    source=\\"img/betathon/richard.png\\"\\n/>\\n\\n- View the [App](https://droad.netlify.app/) & [GitHub Repo](https://github.com/Fecony/droad)\\n- Follow [Richard on Twitter](https://twitter.com/webrickony)\\n- \ud83c\udf89\xa0Prizes: Wasp Shirt, $75 [Railway.app](http://Railway.app) credits\\n\\n> \u201c***I liked how Wasp simplified writing query/actions*** *that are used to interact with the backend and frontend. How everything is defined and configured in wasp file and just works. Also [\u2026] login/signup was really easy to do since Wasp provides these two methods for use.\u201d* -\\n>\\n\\n\\n### \ud83e\udd49\xa0Emmanuel\u2019s Notes App\\n<ImgWithCaption\\n    alt=\\"Emmanuel\u2019s Notes App\\"\\n    source=\\"img/betathon/emmanuel.png\\"\\n/>\\n\\n- View the [GitHub Repo](https://github.com/EmmanuelTheCoder/noteapp-with-wasp)\\n- Follow [Emmanuel on Twitter](https://twitter.com/EmmanuelCoder)\\n- \ud83c\udf89\xa0Prizes: Wasp Shirt, $75 [Railway.app](http://Railway.app) credits\\n\\n> *I joined the hackathon less than 48 hours before the submission deadline.* ***Wasp made it look easy because it handled the hard parts for me.*** *For example, username/password authentication took less than 7 lines of code to implement. -* excerpt from [Emmanuel\u2019s Betathon Blog Post](https://dev.to/emmanuelthecoder/making-something-waspy-a-review-of-wasp-571j)\\n>\\n\\n\\n## Hackathon How-to\\n\\nPersonally, I\u2019ve never organized a hackathon before, and this was Wasp\u2019s first hackathon as well, so when you\u2019re a complete newbie at something, you often look towards others for inspiration. Being admirers of the work and style of Supabase, we drew a lot of inspiration from their \u201c[launch week](https://supabase.com/blog/launch-week-5-hackathon)\u201d approach when preparing for our own Beta launch and hacakthon.\\n\\n<ImgWithCaption\\n    alt=\\"Wasp Betathon Homepage\\"\\n    source=\\"img/betathon/betathonpage.png\\"\\n    caption=\\"Our dedicated hackathon landing page w/ intro video & submission form\\"\\n/>\\n\\nWith some good inspiration in hand, we set off to create a simple, easy-going Hackathon experience. We weren\u2019t certain we\u2019d get many participants, so we decided to make the process as open as possible: *two weeks to work on any project using Wasp, alone or in a team of up to 4 people, submitted on our [Betathon Homepage](https://betathon.wasp-lang.dev/) before the deadline*. That was it.\\n\\nWhen you\u2019re an early-stage startup, you can\u2019t offer big cash prizes, so we asked Railway if they\u2019d be interested in sponsoring some prizes, as we\u2019re big fans of their deployment and hosting platform. Luckily, they agreed (thanks, Railway \ud83d\ude4f\ud83d\ude82). It was also a great match, since we already had the documentation for deploying Wasp apps to Railway on our website, making it an obvious choice for the participants to deploy their Hackathon apps with.\\n\\n<ImgWithCaption\\n    alt=\\"Keyboard\\"\\n    source=\\"img/betathon/keyboard.png\\"\\n    caption=\\"Disclaimer: actual prize keyboard will be cooler and waspier \ud83d\ude0e\ud83d\udc1d\\"\\n/>\\n\\nOn top of that, we decided that a cool grand prize could be a Wasp-colored mechanical keyboard. Nothing fancy, but keyboards are an item a lot of programmers love. We also threw in some Wasp beanies and shirts, and stated that we\u2019d spotlight the winner\u2019s on our platforms and social media accounts. \\n\\n\\n## Promotion\\n\\nFor the Wasp Beta Launch Week, we were active and publicising Wasp on many platforms. We didn\u2019t outright promote the hackathon on those platforms, but we were getting a lot of incoming interest to our Website and Discord, so we made noise about it there. We posted banners on the homepage, and made announcements on Discord and Twitter that directed people to a [Beta Hacakthon homepage](https://betathon.wasp-lang.dev) we created.\\n\\nThe homepage was nice to have as a central spot for all the rules and relevant info. We also added a fun intro video to give the hackathon a more personal touch. I also think the effort put into making an intro video gives participants the feeling that they\u2019re entering into a serious contest and committing to something of substance.\\n\\n<ImgWithCaption\\n    alt=\\"Hackathon Wasp app repo\\"\\n    source=\\"img/betathon/github.png\\"\\n    caption=\\"Wanna host your own Hackathon? Use our template app!\\"\\n/>\\n\\nAs an extra bonus, we wrote the Betathon Homepage with Wasp, and put the [source code up on our GitHub](https://github.com/wasp-lang/wasp/tree/main/examples/hackathon). We thought it might inspire people to build with Wasp, using it as a guide while creating their own projects for the hackathon, plus it could be used by others in the future if they want to host their own hackathon. \ud83d\udcbb\\n\\n### The Response\\n\\nThe response overall was small but significant, considering Wasp\u2019s age. We were also extremely happy with the quality of the engagement. We had thirteen participants register overall, a nice number considering we only started promoting the hackathon on the day that we announced it (this is probably something we\u2019d do differently next time)!\\n\\nWe also asked participants for their feedback on participating in the Hackathon, and they were all pleased with the open, straight-forward approach we took, so we\u2019ll most likely be repeating this for future versions. Other good signs were the many comments that participants were eager to take part in our next hackathon, as well as some dedicated new community members, which makes it all the more motivating for us. \ud83d\udcaa\\n\\n---\\n\\n**A big THANK YOU again to all the participants for their hard work and feedback. Here\u2019s to the next one! \ud83c\udf7b**"},{"id":"/2022/12/08/fast-fullstack-chatgpt","metadata":{"permalink":"/wasp-docs/blog/2022/12/08/fast-fullstack-chatgpt","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-12-08-fast-fullstack-chatgpt.md","source":"@site/blog/2022-12-08-fast-fullstack-chatgpt.md","title":"Watch us build a *truly* full-stack app in just 9 minutes w/ Wasp & ChatGPT \ud83d\ude80 \ud83e\udd2f","description":"---","date":"2022-12-08T00:00:00.000Z","formattedDate":"December 8, 2022","tags":[{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"ai","permalink":"/wasp-docs/blog/tags/ai"},{"label":"chatgpt","permalink":"/wasp-docs/blog/tags/chatgpt"},{"label":"fullstack","permalink":"/wasp-docs/blog/tags/fullstack"},{"label":"language","permalink":"/wasp-docs/blog/tags/language"}],"readingTime":2.2,"hasTruncateMarker":true,"authors":[{"name":"Vinny","title":"DevRel @ Wasp","url":"https://vincanger.github.io","email":"vince@wasp-lang.dev","imageURL":"https://vincanger.github.io/assets/vince_smiley.jpg","key":"vinny"}],"frontMatter":{"title":"Watch us build a *truly* full-stack app in just 9 minutes w/ Wasp & ChatGPT \ud83d\ude80 \ud83e\udd2f","authors":["vinny"],"tags":["wasp","ai","chatgpt","fullstack","language"]},"prevItem":{"title":"Hosting Our First Hackathon: Results & Review","permalink":"/wasp-docs/blog/2023/01/11/betathon-review"},"nextItem":{"title":"Wasp Beta brings major IDE improvements","permalink":"/wasp-docs/blog/2022/12/01/beta-ide-improvements"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<br/>\\n<div style={{ textAlign: \\"center\\", width: \\"100%\\", display: \\"inline-block\\" }}>\\n<iframe width=\\"100%\\" height=\\"400\\" src=\\"https://www.youtube.com/embed/HjUpqfEonow\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen=\\"true\\"></iframe>\\n</div>\\n\\n\x3c!--truncate--\x3e\\n---\\n\\nThere\u2019s a lot of hype around ChatGPT at the moment, and for good reason. It\u2019s amazing. But there\u2019s also some very valid criticism: that it\u2019s simply taking the grunt work out of programming by writing boilerplate for us, which we as developers have to maintain! \\n\\n<div style={{ marginBottom: \\"1rem\\" }}>\\n    <a href=\\"https://twitter.com/paulg/status/1600447377248116736?ref_src=twsrc%5Etfw\\">\\n        <img src=\'https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rgubux630836d05mje5.png\' alt=\\"I expected technology to make programming less laborious, as it does to most things. But I have to admit I expected it to happen by programmers switching to more powerful languages, rather than continuing to write programs full of boilerplate, but having AIs generate most of it.\\"/>\\n    </a>\\n</div>\\n\\nPG is totally right in his remark above, but what he doesn\u2019t realize is that there are languages out there that attempt to overcome this very problem, and [Wasp](https://wasp-lang.dev) is one of them. \\n\\nWhat makes Wasp unique is that it\u2019s a framework that uses a super simple **language** to help you build your web app: front-end, server, and deployment. But it\u2019s not a complicated language like Java or Python, it\u2019s more similar to SQL or JSON, so the learning curve is really quick (technically, it\u2019s a *Domain Specific Langauge* or *DSL*). \\n\\nCheck it out for yourself:\\n\\n```wasp title=\\"main.wasp\\"\\napp todoApp {\\n  title: \\"ToDo App\\",/* visible in tab */\\n\\n  auth: {/* full-stack auth out-of-the-box */\\n    userEntity: User,\\n    externalAuthEntity: SocialLogin,\\n    methods: {\\n      usernameAndPassword: {},\\n      google: {}\\n    }\\n  }\\n}\\n\\nroute RootRoute { path: \\"/\\", to: MainPage }\\npage MainPage {\\n\\t/* import your React code */\\n  component: import Main from \\"@client/Main.js\\"\\n}\\n```\\n\\nWith this simple file above, Wasp will continually compile a truly full-stack web app for you, with a React front-end, and an ExpressJS server. You\u2019re free to then build out the important features yourself with React, NodeJS, Prisma, and react-query.\\n\\nThe great part is, you can probably understand the Wasp syntax without even referencing the docs. Which means AI can probably work with it easily as well. So rather than having AI create a ton of boilerplate for us, we thought \u201ccan ChatGPT write Wasp?\u201d If it can, all we need is to have it create that one file, and then the power of Wasp will take care of the rest. No more endless boilerplate!\\n\\nSo that\u2019s exactly what we set to find out in the video above. The results? Well let\u2019s just say they speak for themselves."},{"id":"/2022/12/01/beta-ide-improvements","metadata":{"permalink":"/wasp-docs/blog/2022/12/01/beta-ide-improvements","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-12-01-beta-ide-improvements.md","source":"@site/blog/2022-12-01-beta-ide-improvements.md","title":"Wasp Beta brings major IDE improvements","description":"With the Beta release (0.7), Wasp brings its IDE game to a whole new level!","date":"2022-12-01T00:00:00.000Z","formattedDate":"December 1, 2022","tags":[{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"language","permalink":"/wasp-docs/blog/tags/language"}],"readingTime":5.87,"hasTruncateMarker":true,"authors":[{"name":"Martin Sosic","title":"Co-founder & CTO @ Wasp","url":"https://github.com/martinsos","email":"martin@wasp-lang.dev","imageURL":"https://github.com/martinsos.png","key":"martinsos"}],"frontMatter":{"title":"Wasp Beta brings major IDE improvements","authors":["martinsos"],"tags":["wasp","language"]},"prevItem":{"title":"Watch us build a *truly* full-stack app in just 9 minutes w/ Wasp & ChatGPT \ud83d\ude80 \ud83e\udd2f","permalink":"/wasp-docs/blog/2022/12/08/fast-fullstack-chatgpt"},"nextItem":{"title":"Feature Release Announcement - Wasp Optimistic Updates","permalink":"/wasp-docs/blog/2022/11/30/optimistic-update-feature-announcement"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n\\nWith the Beta release (0.7), Wasp brings its IDE game to a whole new level!\\n\\nSo far Wasp didn\u2019t have much beyond basic syntax highlighting in VSCode, but now it has:\\n\\n1. **Wasp language server**, that brings the following to your .wasp files:\\n    1. live error reporting in your editor\\n    2. autocompletion (basic for now)\\n2. **VSCode Wasp language extension**:\\n    1. snippets (for `page`, `query`, `action`, `entity`)\\n    2. improved syntax highlighting for .wasp files\\n    3. integration with the above-mentioned language server\\n3. Support for popular **IDEs to fully support Javascript and Typescript files** in the Wasp project.\\n\\n\x3c!--truncate--\x3e\\n\\n<ImgWithCaption\\n    alt=\\"\\"\\n    source=\\"img/beta-ide-improvements/wls-demo.gif\\"\\n    caption=\\"Wasp IDE support in action in VSCode: syntax highlighting, snippets, live error reporting.\\"\\n/>\\n\\nWasp IDE support in action in VSCode: syntax highlighting, snippets, live error reporting.\\n\\n# Wasp Language Server\\n\\nWasp Language Server (WLS) is the \u201cbrain\u201d behind smart IDE features like live error reporting and autocompletion - so if it seems like IDE actually understands your code to some degree, well that is the language server!\\n\\n:::tip\\nFor curious, check out the source code of WLS on Github: [https://github.com/wasp-lang/wasp/tree/main/waspc/waspls/src/Wasp/LSP](https://github.com/wasp-lang/wasp/tree/main/waspc/waspls/src/Wasp/LSP) .\\n:::\\n\\n## Features\\n\\n### Live error/warning reporting\\n\\nWLS compiles wasp code for you as you work on it and shows you any errors directly in the editor, via red squiggly lines.\\n\\n\\n<ImgWithCaption\\n    alt=\\"\\"\\n    source=\\"img/beta-ide-improvements/wls-live-errors.gif\\"\\n/>\\n\\n### Autocompletion\\n\\nWLS understands at which part of code you are right now and offers appropriate completions for it.\\n\\n\\n<ImgWithCaption\\n    alt=\\"\\"\\n    source=\\"img/beta-ide-improvements/wls-autocompletion.gif\\"\\n/>\\n\\n:::note\\nRight now WLS is pretty naive here, and mostly focuses on offering available expressions when it realizes you need an expression. This is helpful but just a start, and it will get much smarter in future versions!\\n:::\\n\\n## Bit of history: why are Language Servers cool\\n\\nYears ago, there was no standardized way to write something like Language Server for your language, instead, each language was doing something of its own, and then each editor/IDE would also implement its own layer of logic for using it, and that was a loooot of work that needed to be done for each editor!\\n\\nLuckily, Microsoft then came up with [Language Server Protocol](https://microsoft.github.io/language-server-protocol/) - a standardized way of communicating between the \u201csmart\u201d part, implemented by language creators, and the editor/IDE part (language extension) that is using it. This enabled each editor to implement this logic for interacting with language servers only once, and then it can be used for any language server!\\n\\nThis is great for us, language creators, because it means that once we implement a language server for our language, most of the work is done, and the work we need to do per each editor is manageable.\\n\\nRight now WLS is used only by the [VSCode Wasp language extension](https://marketplace.visualstudio.com/items?itemName=wasp-lang.wasp), but thanks to the nature of the Language Server Protocol, it should be relatively easy to add support for other editors too! Check this [GH issue](https://github.com/wasp-lang/wasp/issues/864) if you are interested in helping.\\n\\n## Setup\\n\\nThe best thing: there is nothing you, as a Wasp user, have to do to set up WLS! It already comes bundled with your installation of `wasp` \u2192 so if you can run `wasp` projects on your machine, you already have WLS, and it is always of the correct version needed for your current wasp installation. The only thing you need to ensure is you have `wasp` version \u2265 0.6, and a relatively fresh VSCode Wasp language extension.\\n\\nAn easy way to check that your version of `wasp` has WLS packaged into it is to run it and look at its usage instructions: it should mention `waspls` as one of the commands.\\n\\n<ImgWithCaption\\n    alt=\\"\\"\\n    source=\\"img/beta-ide-improvements/wasp-cli-waspls.png\\"\\n/>\\n\\n# Wasp VSCode extension\\n\\nIf we would call Wasp Language Server (WLS) the \u201cbackend\u201d, then [VSCode Wasp language extension](https://marketplace.visualstudio.com/items?itemName=wasp-lang.wasp) would be \u201cfrontend\u201d \u2192 it takes care of everything to ensure you have a nice experience working with Wasp in VSCode, while delegating the hardest work to the WLS.\\n\\n<ImgWithCaption\\n    alt=\\"\\"\\n    source=\\"img/beta-ide-improvements/wasp-vscode-extension.png\\"\\n/>\\n\\n:::tip\\nFor curious, you can check out its source code here, core of it is just one file: [https://github.com/wasp-lang/vscode-wasp/blob/main/src/extension.ts](https://github.com/wasp-lang/vscode-wasp/blob/main/src/extension.ts)\\n:::\\n\\n## Features\\n\\n### Syntax highlighting\\n\\nNothing unexpected here: it recognizes different parts of Wasp syntax, like type, value, identifier, comment, string, \u2026 and colors them appropriately.\\n\\nIf you are curious how is this implemented, check [https://github.com/wasp-lang/vscode-wasp/blob/main/syntaxes/wasp.tmLanguage.yaml](https://github.com/wasp-lang/vscode-wasp/blob/main/syntaxes/wasp.tmLanguage.yaml) \u2192 the whole syntax of Wasp is described via this \u201cmysterious\u201d old TextMate format, since that is the way to do it in VSCode.\\n\\n### Snippets\\n\\nWasp allows you to quickly generate a snippet of code for a new `page`, `query`, `action`, or `entity`!\\n\\n<ImgWithCaption\\n    alt=\\"\\"\\n    source=\\"img/beta-ide-improvements/wls-snippets.gif\\"\\n/>\\n\\nCheck out our snippet definitions here: [https://github.com/wasp-lang/vscode-wasp/blob/main/snippets/wasp.json](https://github.com/wasp-lang/vscode-wasp/blob/main/snippets/wasp.json) . It is actually really easy, in VSCode, to define them and add new ones.\\n\\n### Live error reporting + autocompletion\\n\\nThis is done by delegating the work to WLS, as described above!\\n\\n# IDE support for Javascript / Typescript in Wasp project\\n\\nDue to how unique Wasp is in its approach, getting an IDE to provide all the usual features for Javascript / Typescript wasn\u2019t completely working, and instead, the IDE would get somewhat confused with the context in which files are and would for example not be able to offer \u201cgo to definition\u201d for some values, or would not know how to follow the import path.\\n\\nWith Wasp Beta this is now resolved! We resolved this by somewhat changing the structure of the Wasp project and also adding tsconfig.json files that provide IDE with the information needed to correctly analyze the JS/TS source files.\\n\\nTo learn more about Typescript support in Wasp Beta, check [this blog post](https://wasp-lang.dev/blog/2022/11/29/typescript-feature-announcement)!\\n\\n# What does the future hold?\\n\\nWhile Wasp Beta greatly improved IDE support for Wasp, there are still quite a few things we want to improve on:\\n\\n1. Smarter autocompletion via WLS.\\n    1. Right now it suggests any expression when you need an expression. In the future, we want it to know exactly what is the type of needed expression, and suggest only expressions of that type! So if I am in `route ... { to: <my_cursor_here> }`, then I want to see only `page`s among the suggested completions, not `queries` or `actions` or something else.\\n    2. Further, we would also like it to autocomplete on dictionary fields \u2192 so if I am in `route ... { <my_cursor_here> }`, it should offer me `path` and `to` as completions, as those are only valid fields in the `route` dictionary.\\n2. Extensions for other editors besides VSCode. Now that we have Wasp Language Server, these shouldn\u2019t be too hard to implement! This is also a great task for potential contributors: check this [GH issue](https://github.com/wasp-lang/wasp/issues/864) if you are interested.\\n3. Implement Wasp code formatter. We could make it a part of WLS, and then have the editor extension call it on save.\\n4. Improve support for PSL (Prisma Schema Language) in .wasp files.\\n\\nIf any of these sound interesting, feel free to join us on our [Github](https://github.com/wasp-lang/wasp), or join the discussion on [Discord](https://discord.gg/rzdnErX)!"},{"id":"/2022/11/30/optimistic-update-feature-announcement","metadata":{"permalink":"/wasp-docs/blog/2022/11/30/optimistic-update-feature-announcement","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-11-30-optimistic-update-feature-announcement.md","source":"@site/blog/2022-11-30-optimistic-update-feature-announcement.md","title":"Feature Release Announcement - Wasp Optimistic Updates","description":"We\u2019re excited to announce that Wasp actions now feature native support for optimistic updates!","date":"2022-11-30T00:00:00.000Z","formattedDate":"November 30, 2022","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"feature","permalink":"/wasp-docs/blog/tags/feature"},{"label":"optimistic","permalink":"/wasp-docs/blog/tags/optimistic"},{"label":"updates","permalink":"/wasp-docs/blog/tags/updates"}],"readingTime":6.165,"hasTruncateMarker":true,"authors":[{"name":"Filip Sodi\u0107","title":"Founding Engineer @ Wasp","url":"https://github.com/sodic","email":"filip@wasp-lang.dev","imageURL":"https://github.com/sodic.png","key":"sodic"}],"frontMatter":{"title":"Feature Release Announcement - Wasp Optimistic Updates","authors":["sodic"],"image":"/img/opt-updates-banner.png","tags":["webdev","wasp","feature","optimistic","updates"]},"prevItem":{"title":"Wasp Beta brings major IDE improvements","permalink":"/wasp-docs/blog/2022/12/01/beta-ide-improvements"},"nextItem":{"title":"Permissions (access control) in web apps","permalink":"/wasp-docs/blog/2022/11/29/permissions-in-web-apps"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\nWe\u2019re excited to announce that Wasp actions now feature native support for optimistic updates!\\nContinue reading to to find out what optimistic updates are and how Wasp implements them.\\n\\n<ImgWithCaption\\n    alt=\\"Wasp TS support\\"\\n    source=\\"img/opt-updates-banner.png\\"\\n/>\\n\\n\x3c!--truncate--\x3e\\n\\n## What are Optimistic Updates Anyway?\\n\\nThink about an interactive web app you use daily. It could be almost anything (e.g., Reddit, Youtube, Facebook). It almost certainly features UI elements you can interact with without refreshing the page, such as upvotes on Reddit or likes on Youtube.\\n\\nAll these small actions play out in the same manner. Let\'s look at Reddit upvotes as an example:\\n\\n1. You click on the upvote button\\n2. Your browser sends a request to the server to save the upvote\\n3. The server saves your upvote to the database and sends a successful response to your browser\\n4. Your browser receives the successful response and reflects the change in the UI (i.e., you see your upvote)\\n\\nThe client\xa0*waits*\xa0for the server\'s confirmation\xa0*before*\xa0updating the UI because actions can sometimes fail. Well, at least that was the original idea.\\n\\nThese days, many popular websites update their UIs\xa0*without waiting*\xa0for servers\' responses. Most of the time, everything goes as expected: you click on an upvote, and the server returns a successful response a couple of seconds later (depending on how fast your connection is). Since programmers want their users to have a snappier experience, instead of waiting for a confirmation, they update the UI immediately (as if the action were successful) and then roll back if the server doesn\'t return a successful response (which rarely happens). This pattern of optimistically updating the UI before receiving the confirmation of success is called, you guessed it, an\xa0**Optimistic Update**.\\n\\nMost popular modern websites use optimistic updates to some degree. As mentioned, Reddit uses them for upvotes and downvotes, Youtube uses them for likes, and Trello uses them when moving cards between lists.\\n\\nOptimistic updates are a significant UX improvement, but since they introduce additional state (which can get out of sync with the server), they can be tricky to get right. Then there\'s also the issue of writing additional code for managing the cache and rolling back the changes if the request ends up failing. Luckily, we\'re here to help!\\n\\nWasp recently added native support for optimistic updates, and the rest of this post demonstrates how to quickly set it up in your Wasp application.\\n\\n## A Wasp Todo App Without Optimistic Updates\\n\\nTo honor the tradition of demonstrating UIs using Todo apps, We\'ll show you how to improve the UX of toggling an item\'s status when working with a slow connection.\\nBefore looking at our todo app in action, let\'s see how we\'ve implemented it in Wasp.\\n\\nThese are the relevant declarations in our `.wasp` file:\\n```wasp title=main.wasp\\nentity Task {=psl\\n    id          Int     @id @default(autoincrement())\\n    description String\\n    isDone      Boolean @default(false)\\npsl=}\\n\\n// A query for fetching all tasks.\\nquery getTasks {\\n  fn: import { getTasks } from \\"@server/queries.js\\",\\n  entities: [Task]\\n}\\n\\n\\n// An action for updating the task\'s status.\\naction updateTask {\\n  fn: import { updateTask } from \\"@server/actions.js\\",\\n  entities: [Task]\\n}\\n```\\nThis is the query we use to fetch the tasks (together with their statuses):\\n```javascript title=queries.js\\nexport const getTasks = async (args, context) => {\\n  return context.entities.Task.findMany()\\n}\\n```\\nHere\'s the action we use to update a task\u2019s status:\\n```javascript title=actions.js\\nexport const updateTask = async ({ id, isDone }, context) => {\\n  return context.entities.Task.updateMany({\\n    where: { id },\\n    data: { isDone }\\n  })\\n}\\n```\\nFinally, this is how our client uses this action to update a task:\\n```jsx title=MainPage.js\\nimport updateTask from \'@wasp/queries\'\\n\\n// ...\\n\\nfunction Task({ id, isDone, description }) {\\n  return (\\n    <div className=\\"task\\">\\n      <label className=\\"description\\">\\n        <input\\n          type=\'checkbox\' id={id}\\n          checked={isDone}\\n          onChange={\\n            (e) => updateTask({ id, isDone: e.target.checked })\\n          }\\n        /><span>{description}</span></label>\\n    </div>\\n  )\\n}\\n```\\nLet\'s first see how updating a task looks when everything works as expected (i.e., we\'re on a fast connection):\\n\\n<ImgWithCaption\\n    alt=\\"Normal todo list\\"\\n    source=\\"img/optimistic-update-feature-announcement-normal.gif\\"\\n/>\\n\\nSo far, so good! But what happens when our connection is not as fast?\\n\\n<ImgWithCaption\\n    alt=\\"Todo list with lag\\"\\n    source=\\"img/optimistic-update-feature-announcement-lag.gif\\"\\n/>\\n\\nHmm, this isn\'t quite as smooth as we\'d like it to be.\\nThe user has to wait for several seconds before seeing their their changes reflected by the UI.\\n\\nHow can we improve it? Well, of course, we can optimistically update the checkbox!\\n\\n## Performing a Wasp Action Optimistically\\nTo perform the `updateTask` action optimistically, all we need to do is decorate the calling code on the client:\\n```jsx {6-16,25} title=MainPage.js \\nimport updateTask from \'@wasp/queries\'\\n\\n// ...\\n\\nfunction Task({ id, isDone, description }) {\\n  const updateTaskOptimistically = useAction(updateTask, {\\n    optimisticUpdates: [{\\n      // Addressing the query we want to update.\\n      getQuerySpecifier: () => [getTasks],\\n      // Telling Wasp how to update the addressed query using the new payload\\n      // and the previously cached data.\\n      updateQuery: ({ id, isDone }, oldTasks) => oldTasks.map(\\n        task => task.id === id ? { ...task, isDone } : task\\n      )\\n    }]\\n  })\\n\\n  return (\\n    <div className=\\"task\\">\\n      <label className=\\"description\\">\\n        <input\\n          type=\'checkbox\' id={id}\\n          checked={isDone}\\n          onChange={\\n            (e) => updateTaskOptimistically({ id, isDone: e.target.checked })\\n          }\\n        /><span>{description}</span></label>\\n    </div>\\n  )\\n}\\n```\\nThose are all the changes we need, the rest of the code (i.e., `main.wasp`, `queries.js` and `actions.js`) remains the same. We won\'t describe the API in detail, but if you\'re curious, everything is covered by [our official docs](/docs/data-model/operations/actions#the-useaction-hook-and-optimistic-updates).\\n\\nFinally, let\'s see how this version of the app looks in action:\\n\\n<ImgWithCaption\\n    alt=\\"Optimistically updated todo list\\"\\n    source=\\"img/optimistic-update-feature-announcement-fixed.gif\\"\\n/>\\n\\n\\nOur app no longer waits for the server before rendering the changes. Instead, it updates the cache optimistically, continues waiting for the response, and rolls back the changes if the action fails (Wasp internally handles all of this). As previously mentioned, simple changes such as this one rarely fail. Therefore, most of the time, the user enjoys their snappier experience without ever knowing anything special is happening in the background.\\n\\n## What Makes Optimistic Updates Difficult \\nThere\'s an old software engineering joke you\'re probably familiar with:\\n> There are only two hard things in Computer Science: cache invalidation and naming things.\\n\\nOptimistically updating a query involves plenty of meddling with the client-side cache, which is bound to come with a few gotchas. Examples include the answers to questions such as:\\n\\n- What happens when an optimistically updated action fails?\\n- What happens when the user uses the optimistically updated data in a new action?\\n- What happens when the user performs a different action that affects the same cached data as the optimistically updated one?\\n- etc.\\n\\nNotice how Wasp users don\'t need to know about any of these issues when using our optimistic updates API. They only need to tell Wasp which query they wish to update and how, and Wasp takes care of the rest.\\n\\nWasp internally uses\xa0[React Query](https://tanstack.com/query/v4/docs/adapters/react-query), an excellent asynchronous state management library we\'ll gladly recommend to anyone. While React Query does solve some of these problems and helps with some of the rest, we still had to implement quite a complex mechanism to fully cover all edge cases.\\n\\nDescribing this mechanism, although technically interesting, is beyond the scope of a feature announcement. But stay tuned because in a future blog post, we\'ll be taking a deep dive into the infrastructure Wasp uses to ensure optimistic updates are performed correctly and consistently."},{"id":"/2022/11/29/permissions-in-web-apps","metadata":{"permalink":"/wasp-docs/blog/2022/11/29/permissions-in-web-apps","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-11-29-permissions-in-web-apps.md","source":"@site/blog/2022-11-29-permissions-in-web-apps.md","title":"Permissions (access control) in web apps","description":"At Wasp, we are working on a config language / DSL for building web apps that integrates with React & Node.js.","date":"2022-11-29T00:00:00.000Z","formattedDate":"November 29, 2022","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"}],"readingTime":18.585,"hasTruncateMarker":true,"authors":[{"name":"Martin Sosic","title":"Co-founder & CTO @ Wasp","url":"https://github.com/martinsos","email":"martin@wasp-lang.dev","imageURL":"https://github.com/martinsos.png","key":"martinsos"}],"frontMatter":{"title":"Permissions (access control) in web apps","authors":["martinsos"],"image":"/img/permissions-in-web-apps/auth-spidermen.jpg","tags":["webdev","wasp"]},"prevItem":{"title":"Feature Release Announcement - Wasp Optimistic Updates","permalink":"/wasp-docs/blog/2022/11/30/optimistic-update-feature-announcement"},"nextItem":{"title":"Feature Announcement - TypeScript Support","permalink":"/wasp-docs/blog/2022/11/29/typescript-feature-announcement"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\nAt Wasp, we are working on a config language / DSL for building web apps that integrates with React & Node.js.  \\nThis requires us to deeply understand different parts of what constitutes a web app, in order to be able to model them in our DSL.\\n\\nRecently our focus was on access control, and I decided to capture the learnings in this blog post, to help others quickly get up to speed on how to do access control in web apps.  \\nSo, if you are new to access control in web apps, or have been doing it for some time but want to get a better idea of standard practices, read along!\\n\\n#### Quick overview of what this blog post covers:\\n\\n1. Permissions, yay! Wait, what are they though? (quick overview of basic terms)\\n2. Where do we check permissions in a web app: frontend vs backend vs db\\n3. Common approaches (RBAC, ABAC, \u2026)\\n4. OWASP recommendations\\n5. Implementing access control in practice\\n6. Summary ([TLDR](#summary-tldr))\\n\\n\x3c!--truncate--\x3e\\n\\n## 1. Permissions, yay! Wait, what are they though?\\n\\nUnless your web app is mostly about static content or is a form of art, it will likely have a notion of users and user accounts.\\n\\n<ImgWithCaption\\n    alt=\\"Artistic dolphin painting with brush\\"\\n    source=\\"img/permissions-in-web-apps/dolphin_artist.webp\\"\\n    caption=\\"This dolphin doesn\'t need users\\"\\n/>\\n\\nIn such a case, you will need to know which user has permissions to do what -> who can access which resources, and who can execute which operations.\\n\\nSome common examples of permissions in action:\\n\\n1. User can access only their own user account.\\n2. If the user is an admin, they can ban other users\u2019 accounts.\\n3. User can read other users\u2019 articles, but can\'t modify them.\\n4. The title and description of the article behind the paywall are publicly accessible, but the content is not.\\n5. User can send an email invitation to up to 10 future users per day.\\n\\n### Aha, you mean access control! Sorry, authorization! Hmm, authentication?\\n\\nThere are different terms out there (authentication, authorization, access control, permissions) that are often confused for each other, so let\'s quickly clarify what each one of them stands for.\\n\\n<ImgWithCaption\\n    alt=\\"Spidermen representing authN, authZ, AC and permissions pointing at each other\\"\\n    source=\\"img/permissions-in-web-apps/auth-spidermen.jpg\\"\\n    caption=\\"They all look the same!\\"\\n    width=\\"500px\\"\\n/>\\n\\n### 1) Authentication (or as cool kids would say: authN)\\n\\nAct of verifying the user\'s identity.  \\nAnswers the question \\"**Who are they?**\\"\\n\\n> A: Knock Knock  \\n> B: Who is it?  \\n> A: User!  \\n> B: User who?  \\n> A: Authorization: Basic myusername:mypassword\\n>\\n> -> yes, you noticed correctly, this is an example of common authentication method but HTTP header is called \\"Authorization\\"! Weird! But it all makes sense if you squint hard enough: ([https://stackoverflow.com/questions/30062024/why-is-the-http-header-for-authentication-called-authorization](https://stackoverflow.com/questions/30062024/why-is-the-http-header-for-authentication-called-authorization)).\\n> \\n\\n### 2) Authorization (or as cool kids would say: authZ)\\n\\nProcess of determining access rights that user has.  \\nAnswers the question \\"**Are they allowed to do this?**\\"\\n\\nNormally you will want the user to be authenticated at this point already, so you have information about them based on which you will decide if they are allowed to do something.\\n\\n### 3) Access Control\\n\\nA higher-level term (compared to authN and authZ) that encompasses the whole process of ensuring that only allowed parties can access specific resources (controlling access to resources -> access control).\\n\\nOften consists of authentication and/or authorization as its steps.\\n\\nAlso often used in the wild interchangeably with just \\"authorization\\".\\nReference (OWASP): [https://www.cgisecurity.com/owasp/html/ch08.html](https://www.cgisecurity.com/owasp/html/ch08.html)\\n\\n### 4) Permission(s)\\n\\nA more general/informal term, closest in meaning to \\"authorization\\" when used in the context of computer science.\\n\\n**Permission** to **access** a **resource** is called **authorization**.\\n\\n### All together\\n\\n<ImgWithCaption\\n    alt=\\"Diagram of authN, authZ, AC and permissions relationship\\"\\n    source=\\"img/permissions-in-web-apps/auth-terms-diagram.png\\"\\n    width=\\"350px\\"\\n/>\\n\\nLet\u2019s see these terms used in a sentence by observing the following imagined pull request (PR):\\n\\n> Title: Added **access control** to the app.  \\n>\\n> Description:  \\n> I implemented a way for users to **authenticate** via email and password or via Google.  \\n> On the server-side, I added **permission checks** to most of our REST API handlers, to ensure an **authenticated** user is **authorized** to execute them.  \\n> If the user is not **authorized**, we throw an HTTP error 403.  \\n> There are also some public parts of REST API where the user doesn\u2019t have to be **authenticated**.\\n\\n\\n## 2. Where do we check permissions in a web app: frontend vs backend vs database\\n\\nWe explained a bunch of terms, let\'s see now how access permission checks are actually done in practice!\\n\\nIn a typical web app, you will have a frontend, backend (server), and database.\\n\\nThe frontend will be issuing commands to the server, which then executes operations and possibly modifies the database (on their behalf). Since **users don\u2019t have direct access to the database**, and since the **frontend is inherently not secure**, that leaves the **server as the central place where all the crucial access control needs to happen**.\\n\\n<ImgWithCaption\\n    alt=\\"A real-life photo of frontend, server, and database performing access control.\\"\\n    source=\\"img/permissions-in-web-apps/frontend-server-db-access-control.png\\"\\n    caption=\\"A real-life photo of frontend, server, and database performing access control.\\"\\n    width=\\"600px\\"\\n/>\\n\\n### Frontend (browser)\\n\\nBy frontend we mean web client -> code (e.g. JS) that executes in the browser.\\n\\nThe frontend is here to help users issue commands towards the server via which users can access and/or modify the resources of our web app (which are most often stored in the database).\\n\\nSince users can manipulate the frontend code as they wish, we can\'t really do any permissions checks in the frontend code, we can\'t trust it!\\n\\n<ImgWithCaption\\n    alt=\\"Imposter of the vent warning that frontend can\'t be trusted\\"\\n    source=\\"img/permissions-in-web-apps/imposter-of-the-vent.png\\"\\n    width=\\"300px\\"\\n/>\\n\\nAny permission checks we do on the frontend, we will need to repeat on the server in any case.  \\nIf that is so, should we at all check permissions on the frontend, and what is the purpose of that?  \\n**The main reason for doing any permissions checks on the frontend is ergonomics/user experience** -> by having UI focus only on resources they can change, we make it easier for users to understand what they can do in our web app and make sure they don\'t waste time on trying to describe complex operations that server will then not be able to execute.\\n\\nSo, for example, our frontend code can hide/omit certain fields in the UI form if the user shouldn\'t be able to access them, it can prevent opening certain pages, or hide/omit certain buttons if they trigger operations that the user is not allowed to perform.\\n\\n<ImgWithCaption alt=\\"Example of using casl.js in React\\"\\n    source=\\"img/permissions-in-web-apps/casl-react-example.png\\"\\n    caption=\\"Example of using casl.js in React to show button only if the user has permission.\\"\\n/>\\n\\n**Takeaway: Permission checks on frontend are not there for security, but only for ergonomics / improving user experience.**\\n\\n### Backend (server)\\n\\nThe server is **a crucial place to implement access control**. It exposes an API that the frontend (browser) and/or other services consume. While doing that, they authenticate with the server, so that server knows who they are, and then they ask (i.e. via REST API or GraphQL API) the server to execute certain operations (i.e. creating, updating, or fetching something). It is the server\u2019s job to figure out if they are allowed (authorized) to perform those operations (on specified resources / with provided arguments) and to reject them if they are not.\\n\\nAt its core, permissions checks on the server are here to **check for each API endpoint** if the caller is allowed to execute it. Often they are executed at the very start of the API endpoint logic, but often they are also intertwined with the rest of the endpoint handler logic.\\n\\n<ImgWithCaption alt=\\"Example of permissions check in backend.\\"\\n    source=\\"img/permissions-in-web-apps/backend-permissions-check-example.png\\"\\n    caption=\\"Example of doing permission check at the start of API endpoint (is user authenticated) and then also doing another check as part of the database query (is user owner of the article they are trying to delete).\\"\\n/>\\n\\nBesides defining checks at API/operation level, they are also often defined at the **data/model level**. This means that they are tied to specific data models (normally from the database), as part of data access logic (ORM), and are defining who can access specific field(s), or even the whole data model.\\n\\n\\nExample of attaching permission checks to the data model directly in the GraphQL schema ([from this blog post](https://www.prisma.io/blog/graphql-directive-permissions-authorization-made-easy-54c076b5368e)):\\n\\n<ImgWithCaption\\n    alt=\\"Example of attaching permission checks to the data model directly in the GraphQL schema\\"\\n    source=\\"img/permissions-in-web-apps/data-model-permissions-gql.png\\"\\n/>\\n\\nFor a more sophisticated RBAC approach, with an additional layer of indirection (permissions), read on.\\n\\n\\n### Database\\n\\nUsually, users don\u2019t have direct access to the database at all, instead, they affect it via the server. **In such a case, there is no need to do specific database access control** besides normal constraints that you will have in your DB to ensure data model integrity, like uniqueness, validations, and similar. That said, in some situations, you might want to do it, but we will not get into that in this article.\\n\\n\\n## 3. Common approaches (RBAC, ABAC, \u2026)\\n\\nThe most common approaches to access control are **RBAC** (Role-Based Access Control) and **ABAC** (Attribute-Based Access Control), with RBAC having the strong lead (but ABAC is picking up).\\n\\nAlthough less popular, we will also shortly mention ReBAC as an \u201cin-between\u201d option.\\n\\n### RBAC - Role-based access control\\n\\nRoles rule :D! In [RBAC](https://en.wikipedia.org/wiki/Role-based_access_control), roles are the central concept. Some example roles might be `admin`, `guest`, `writer`, `moderator`, \u2026. When determining if a certain user has access, **we check their roles and determine their access rights based on it**. For example, `admin` can delete other users, articles, and projects, but `guest` can\u2019t modify any resources, only read articles.\\n\\nPro advice (thanks Karan!): While we could be checking the user\u2019s roles directly in the permission checks, it is even better (and recommended by OWASP) to add a layer of indirection \u2192 permissions. **So roles are attached to users, permissions are attached to roles, and permission checks check permissions** (who would expect that :)!?).\\n\\n<ImgWithCaption\\n    alt=\\"Users -> Roles -> Permissions\\"\\n    source=\\"img/permissions-in-web-apps/users-roles-permissions.png\\"\\n/>\\n\\nFor example, a user might have role `admin`, and role `admin` has permissions `updateArticle` and `deleteArticle` attached to it. Then, when determining if a user can delete the article, we first fetch his role, then we fetch the permissions attached to that role, and finally check if `deleteArticle` is present among those \u2192 if so, they can continue with the deletion!\\n\\nThis way, if we decide a certain role should have more or fewer permissions, we just add or remove the permission in question to the role, and that is it! We don\u2019t have to go through every permission check and update its logic (which we would have to do if we were checking directly against roles).\\n\\n**RBAC is popular because it is relatively simple and it reflects the basic business domain pretty well** - often we are thinking in the terms of roles in the real world, so it is easy to grasp and understand. There are plenty of solutions and frameworks out there that implement RBAC.\\n\\nWhile a good match for many common use cases, there is a drawback to RBAC - when access control becomes complex (which usually happens as the web app evolves and grows big), RBAC sometimes fails in offering needed granularity in an elegant way, resulting in unwieldy and overly-complex access control logic.\\n\\n### ABAC - Attribute-based access control\\n\\nIn [ABAC](https://en.wikipedia.org/wiki/Attribute-based_access_control), key idea is that you define **a bunch of access control rules** where each rule takes different \u201cattributes\u201d as input. When you need to check if a user is authorized to do smth, you run the rules and **if all the rules pass, it is a go**, but if a single rule fails, it is a no go.\\n\\nRule attributes can be anything, but usually, they fall into 4 categories:\\n\\n1. **Subject**: information about a user (i.e. user\u2019s id or name)\\n2. **Action**: operation they want to perform (i.e. reading an Article)\\n3. **Object**: resources they want to operate on (i.e. an Article),\\n4. **Environment/context:** i.e. current time of the day or number of previous requests that the user did in the last hour.\\n\\n<ImgWithCaption\\n    alt=\\"ABAC diagram\\"\\n    source=\\"img/permissions-in-web-apps/abac-diagram.png\\"\\n/>\\n\\nLet\u2019s observe the example from before where we wanted to know if user is allowed to delete an article.  \\nIn ABAC, we could define an action \u201cdeleteArticle\u201d, and then define a rule that takes user(subject), action, object, and additional context. That rule would check if action is \u201cdeleteArticle\u201d \u2192 if so, it would evaluate if user is allowed to delete the article specified as an object, by checking some properties of user, maybe even role, or by checking if user is owner of that article.  \\nThen, when user actually issues a command to delete an article, we would ask our access control system to run it against all the rules it has, while giving it the (user, \u201cdeleteArticle\u201d, article, context) tuple \u2192 most of the rules would say all is ok since they are not concerned with \u201cdeleteArticle\u201d action, but the ones that are (like the one we defined above) must all pass in order to actually allow the access.\\n\\n**ABAC is very flexible and general as an approach**, and you could easily implement RBAC (and many other approaches) in ABAC (by checking the user\u2019s role as one of the attributes) \u2192 therefore it is more general/expressive than RBAC.\\n\\nHowever, ABAC is more complex to implement, and it is also more expensive performance-wise, due to needing to check multiple rules each time that access control check is being performed.\\n\\n### ReBAC - Relationship-based access control\\n\\nRoles (RBAC) can be lacking when you need to grant access based on relationship-related questions like \u201cis this user owner of this article\u201d or \u201cdoes this user belong to this workspace\u201d.\\n\\nWhile ABAC can easily handle this, you could also consider it a bit too powerful if all you need to describe are relationships \u2192 and this is where ReBAC comes in.\\n\\nWhile there are different ways one could go about implementing ReBAC, the simplest one is to build on top of RBAC by introducing a concept of \u201crelationship\u201d rules to your access control logic and then checking those alongside the roles. So RBAC with a dash of ABAC (focused on relationships).\\n\\n## 4. OWASP recommendations\\n\\nWhen looking online for \u201cofficial\u201d/standardized recommendations on how to do access control in web apps, you will most likely find resources produced by OWASP.\\n\\nDefinition of OWASP: The Open Web Application Security Project\xae (OWASP) is a nonprofit foundation that works to improve the security of software.\\n\\nI found that they have quite a few resources on how to do access control in web apps, the most interesting being the following:\\n\\n- [OWasp presentation about how to do ACL in Web App](https://owasp.org/www-pdf-archive/ASDC12-Access_Control_Designs_and_Pitfalls.pdf).\\n- [OWasp cheat sheet on how to do ACL in Web App.](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authorization_Cheat_Sheet.md)\\n\\nFrom their materials I extracted a couple of main points that made the most sense to me:\\n\\n- **Centralize the access control logic so it is easy to review.**\\n- **Deny access by default.**\\n- **Prefer ABAC over RBAC.**\\n\\n<ImgWithCaption\\n    alt=\\"You should centralize your access control logic - Nyehhh\\"\\n    source=\\"img/permissions-in-web-apps/comic-centralize-logic.png\\"\\n/>\\n\\n## 5. Implementing access control in practice\\n\\n<ImgWithCaption\\n    alt=\\"Poll on how do people implement access control\\"\\n    source=\\"img/permissions-in-web-apps/access-control-poll.png\\"\\n    caption=\\"\\"\\n/>\\n\\nHere\u2019s a Reddit [poll I did on r/webdev](https://www.reddit.com/r/webdev/comments/vhaglx/what_do_you_use_for_access_control_permission/).  \\nAn interesting finding is that even though the sample is pretty small, it is clear that devs prefer RBAC over OWASP-recommended ABAC.  \\nI believe this is due to 2 main reasons: RBAC is simpler + there are more libraries/frameworks out there supporting RBAC than ABAC (again, due to it being simpler).  \\nIt does seem that ABAC is picking up recently though, so it would be interesting to repeat this poll in the future and see what changes.\\n\\n### Organic development\\n\\n<ImgWithCaption\\n    alt=\\"Organic growth of my code (meme)\\"\\n    source=\\"img/permissions-in-web-apps/organic-code-meme.png\\"\\n    caption=\\"\\"\\n/>\\n\\nOften, we add permission checks to our web app one by one, as needed. For example, if we are using NodeJS with ExpressJS for our server and writing middleware that handles HTTP API requests, we will add a bit of logic into that middleware that does some checks to ensure a user can actually perform that action. Or maybe we will embed \u201cchecks\u201d into our database queries so that we query only what the user is allowed to access. Often a combination.\\n\\nWhat can be dangerous with such an organic approach is the complexity that arises as the codebase grows - if we don\u2019t put enough effort into centralizing and structuring our access control logic, it can become very hard to reason about it and to do consistent updates to it, leading to mistakes and vulnerabilities.\\n\\nImagine having to modify the web app so that user can now only read their own articles and articles of their friends, while before they were allowed to read any article. If there is only one place where we can make this update, we will have a nice time, but if there are a bunch of places and we need to hunt those down first and then make sure they are all updated in the same way, we are in for a lot of trouble and lot of space to make mistakes.\\n\\n### Using an existing solution\\n\\nInstead of figuring out on our own how to structure the access control code, often it is a better choice to use an existing access control solution! Besides not having to figure and implement everything on your own, another big advantage is that these solutions are battle-tested, which is very important for the code dealing with the security of your web app.\\n\\nWe can roughly divide these solutions into frameworks and (external) providers, where frameworks are embedded into your web app and shipped together with it, while providers are externally hosted and usually paid services.\\n\\nA couple of popular solutions:\\n\\n1. [https://casbin.org/](https://casbin.org/) (multiple approaches, multiple languages, provider)\\n    1. Open source authZ library that has support for many access control models (ACL, RBAC, ABAC, \u2026) and many languages (Go, Java, Node.js, JS, Rust, \u2026). While somewhat complex, it is also powerful and flexible. They also have their Casdoor platform, which is authN and authZ provider.\\n2. [https://casl.js.org/v5/en/](https://casl.js.org/v5/en/) (ABAC, Javascript)\\n    1. Open source JS/TS library for ABAC. CASL gives you a nice way to define the ABAC rules in your web / NodeJS code, and then also check them and call them. It has a bunch of integrations with popular solutions like React, Angular, Prisma, Mongoose, \u2026 .\\n3. https://github.com/CanCanCommunity/cancancan (Ruby on Rails ABAC)\\n    1. Same like casl.js, but for Ruby on Rails! Casl.js was actually inspired and modeled by cancancan.\\n4. https://github.com/varvet/pundit\\n    1. Popular open-source Ruby library focused around the notion of policies, giving you the freedom to implement your own approach based on that.\\n5. [https://spring.io/projects/spring-security](https://spring.io/projects/spring-security) \\n    1. Open source authN and authZ framework for Spring (Java). \\n6. https://github.com/dfunckt/django-rules\\n    1. A generic, approachable open source framework for building rule-based systems in Django (Python).\\n7. [Auth0](https://auth0.com/) (provider)\\n    1. Auth0 has been around for some time and is probably the most popular authN provider out there. While authN is their main offering (they give you SDKs for authentication + they store user profiles and let you manage them through their SaaS), they also allow you to define authZ to some degree, via RBAC and policies.\\n8. [https://www.osohq.com/](https://www.osohq.com/) (provider, DSL)\\n    1. OSO is an authZ provider, unique in a way that they have a specialized language for authorization (DSL, called Polar) in which you define your authorization rules. They come with support for common approaches (e.g. RBAC, ABAC, ReBAC) but also support custom ones. Then, you can use their open source library embedded in your application, or use their managed cloud offering.\\n9. [https://warrant.dev/](https://warrant.dev/) (Provider)\\n    1. Relatively new authZ provider, they have a dashboard where you can manage your rules in a central location and then use them from multiple languages via their SDKs, even on the client to perform UI checks. Rules can also be managed programmatically via SDK.\\n10. [https://authzed.com/](https://authzed.com/) (Provider)\\n    1. AuthZed brings a specialized SpiceDB permissions database which they use as a centralized place for storing and managing rules. Then, you can use their SDKs to query, store, and validate application permissions.\\n\\n## Summary (TLDR)\\n\\n- **Authentication** (authN) answers \u201cwho are they\u201d, **authorization** (authZ) answers \u201care they allowed to\u201d, while **access control** is the overarching term for the whole process of performing authN and authZ.\\n- Doing access control on the frontend is just for show (for improving UX) and you can\u2019t rely on it. **Any and all real access control needs to be done on the server** (possibly a bit in the db, but normally not needed).\\n- While it is ok to start with a simple access control approach at the beginning, you should be ready to switch to a more advanced approach once the complexity grows. The most popular approaches for doing access control are **RBAC** (role-based) and **ABAC** (attribute-based). RBAC is easier to get going with, but ABAC is more powerful.\\n- You should make sure your access control has **as little duplication as possible and is centralized**, in order to reduce the chance of introducing bugs.\\n- It is usually smart to **use existing solutions**, like access control frameworks or external providers.\\n\\n## Access control in Wasp\\n\\nIn [Wasp](https://wasp-lang.dev), we don\u2019t yet have special support for access control, although we are planning to add it in the future. As it seems at the moment, we will probably go for ABAC, and we would love to provide a way to define access rules both at the Operations level and at Entity (data model) level. Due to Wasp\u2019s mission to provide a highly integrated full-stack experience, we are excited about the possibilities this offers to provide an access control solution that is integrated tightly with the whole web app, through the whole stack!\\n\\nYou can check out our discussion about this in our [\u201cSupport for Permissions\u201d RFC](https://github.com/wasp-lang/wasp/issues/584).\\n\\n## Thanks to the reviewers\\n\\n[Karan Kajla](https://twitter.com/karankajla) (pro advice on RBAC!), [Graham Neray](https://twitter.com/grahamneray) (great general advice + pointed out ReBAC), [Dennis Walsh](https://twitter.com/lawjolla) (awesome suggestions how to have article read better), [Shayne Czyzewski](https://github.com/shayneczyzewski), [Matija Sosic](https://twitter.com/matijasosic), thank you for taking the time to review this article and make it better! Your suggestions, corrections, and ideas were invaluable."},{"id":"/2022/11/29/typescript-feature-announcement","metadata":{"permalink":"/wasp-docs/blog/2022/11/29/typescript-feature-announcement","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-11-29-typescript-feature-announcement.md","source":"@site/blog/2022-11-29-typescript-feature-announcement.md","title":"Feature Announcement - TypeScript Support","description":"<ImgWithCaption","date":"2022-11-29T00:00:00.000Z","formattedDate":"November 29, 2022","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"feature","permalink":"/wasp-docs/blog/tags/feature"},{"label":"typescript","permalink":"/wasp-docs/blog/tags/typescript"},{"label":"javascript","permalink":"/wasp-docs/blog/tags/javascript"}],"readingTime":7.245,"hasTruncateMarker":true,"authors":[{"name":"Filip Sodi\u0107","title":"Founding Engineer @ Wasp","url":"https://github.com/sodic","email":"filip@wasp-lang.dev","imageURL":"https://github.com/sodic.png","key":"sodic"}],"frontMatter":{"title":"Feature Announcement - TypeScript Support","authors":["sodic"],"image":"/img/wasp-ts-banner.png","tags":["webdev","wasp","feature","typescript","javascript"]},"prevItem":{"title":"Permissions (access control) in web apps","permalink":"/wasp-docs/blog/2022/11/29/permissions-in-web-apps"},"nextItem":{"title":"Wasp is in Beta: Auth, TypeScript, Tailwind, LSP","permalink":"/wasp-docs/blog/2022/11/29/wasp-beta"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<ImgWithCaption\\n    alt=\\"Wasp TS support\\"\\n    source=\\"img/wasp-ts-banner.png\\"\\n/>\\n\\n\x3c!--truncate--\x3e\\n\\n<InBlogCta />\\n\\n## Prologue\\nTypeScript doesn\'t need much introduction at this point, so we\'ll keep it short!\\nWasp finally allows you to write your code in TypeScript (i.e., the most popular web technology after JavaScript) on both the front-end and the back-end.\\n\\nYou can now define and use types in any part of your code, enjoying all benefits of the static type checker. At the time of writing, not all parts of Wasp are typed as well as they could be, but we\'re working on it!\\nExposing all Wasp functionalities through informative typed interfaces is one of our top priorities.\\n\\nWithout further ado, let\'s see how we can use TypeScript with Wasp.\\n\\n## Setting up a TypeScript project in Wasp\\nLet\'s start by creating a fresh Wasp project:\\n\\n```bash\\nwasp new myApp\\n```\\nThis will generate a project skeleton in the folder `myApp`. The project structure is different than before, and there are now several additional generated files that help with IDE and TypeScript support. So let\'s explain it:\\n```\\n.\\n\u251c\u2500\u2500 .gitignore\\n\u251c\u2500\u2500 main.wasp             # Your wasp code goes here.\\n\u251c\u2500\u2500 src\\n\u2502\xa0\xa0 \u251c\u2500\u2500 client            # Your client code (JS/CSS/HTML) goes here.\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 Main.css\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 MainPage.jsx\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 react-app-env.d.ts\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 tsconfig.json\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 waspLogo.png\\n\u2502\xa0\xa0 \u251c\u2500\u2500 server            # Your server code (Node JS) goes here.\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 tsconfig.json\\n\u2502\xa0\xa0 \u251c\u2500\u2500 shared            # Your shared (runtime independent) code goes here.\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 tsconfig.json\\n\u2502\xa0\xa0 \u2514\u2500\u2500 .waspignore\\n\u2514\u2500\u2500 .wasproot\\n```\\n\\n\\nAt this point, we can choose one of three options:\\n1. We write our code exclusively in JavaScript.\\n2. We write our code exclusively in TypeScript.\\n3. We write some parts of our code in JavaScript, and other parts in TypeScript.\\n\\nSince the third option is a superset of the first two, that\'s what Wasp currently supports. In other words, regardless of whether you want your entire codebase in one of these languages or you want to mix it up, there\'s no extra configuration necessary!\\nSimply use the appropriate extension (`.ts` and `.tsx` for TypeScript; `.js` and `.jsx` for JavaScript), and your IDE and Wasp will know what to do.\\n\\nTo demonstrate this, let\'s start Wasp and change `MainPage.jsx` to `MainPage.tsx`:\\n```\\nwasp start\\nmv src/client/MainPage.jsx src/client/MainPage.tsx\\n```\\nThat\'s it! Wasp will notice the change and recompile, and your app will continue to work. The only difference is that you can now write TypeScript in `MainPage.tsx` and get helpful information from your IDE and the static type checker. Try removing an import and see what happens.\\n\\nThe same applies to any file you may want to include in your project. Specify the language you wish to use via the extension, and Wasp will do the rest!\\n\\n:::caution\\nEven if you use TypeScript and have a _server_ file called `someFile.ts`, you must still import it as if it had the `.js` extension (i.e., `import foo from \'someFile.js\'`). Wasp internally uses `esnext` module resolution, which always requires specifying the extension as `.js` (i.e., the extension used in the emitted JS file). This applies to all `@server` imports (and files on the server in general).\\n\\nRead more about ES modules in TypeScript [here](https://www.typescriptlang.org/docs/handbook/esm-node.html). If you\'re interested in the discussion and the reasoning behind this, read about it [in this GitHub issue](https://github.com/microsoft/TypeScript/issues/33588).\\n\\nThis does not apply to front-end files. Thanks to Webpack, you don\'t need to write extensions when working with client-side imports.\\n\\n:::\\n\\n## Moving existing projects to the new structure (and optionally TypeScript)\\nIf you wish to move an existing project to the new structure, the easiest approach comes down to creating a new project and moving all the files from your old project into appropriate locations. After doing this, you can choose which files you\'d like to implement in TypeScript, change the extension and go for it.\\n\\n\\nTo avoid digging too deep, this is all we\'ll say about migrating. For a more detailed migration guide, check [our changelog](https://github.com/wasp-lang/wasp/releases/tag/v0.7.0). It explains everything step-by-step.\\n\\n## TypeScript in action\\nFinally, let\'s demonstrate how TypeScript helps us by using it in a small Todo app. The part of our code in charge of rendering tasks looks something like this:\\n```jsx\\n\\nfunction MainPage() {\\n  const { data: tasks } = useQuery(getTasks)\\n\\n  return (\\n    <div>\\n      <h1>Todos</h1>\\n      <TaskList tasks={tasks} />\\n    </div>\\n  )\\n}\\n\\nfunction TaskList({ tasks }) {\\n  if (!tasks.len) {\\n    return <div>No tasks</div>\\n  }\\n\\n  return (\\n    <div>\\n      {tasks.map((task, idx) => <Task {...task} key={idx}/>)}\\n    </div>\\n  )\\n}\\n\\n\\n\\nfunction Task({ id, isdone, description }) {\\n  return (\\n    <div>\\n      <label>\\n        <input\\n          type=\'checkbox\'\\n          id={id}\\n          checked={isdone}\\n          onChange={\\n            (event) => updateTask({ id, isDone: event.target.checked })\\n          }\\n        />\\n        <span>{description}</span>\\n      </label>\\n    </div>\\n  )\\n}\\n```\\nTry to see if you can find any bugs. When you\'re confident you\'ve got all of them, continue reading.\\n\\nLet\'s see what happens when we bring TypeScript into the picture. Remember, we only need to change the extension to `tsx`. After we do this, The IDE will warn us about missing type definitions, so let\'s fill these in. While we\'re at it, we can also tell `useQuery` what types it\'s working with by specifying its type arguments.\\n\\nHere\'s how our code looks after these changes:\\n```tsx\\n// highlight-start\\ntype Task = {\\n  id: string\\n  description: string\\n  isDone: boolean\\n}\\n// highlight-end\\n\\nfunction MainPage() {\\n  // highlight-next-line\\n  const { data: tasks } = useQuery<Task, Task[]>(getTasks)\\n\\n  return (\\n    <div>\\n      <h1>Todos</h1>\\n      <TaskList tasks={tasks} />\\n    </div>\\n  )\\n}\\n\\n// highlight-next-line\\nfunction TaskList({ tasks }: { tasks: Task[] }) {\\n  if (!tasks.len) {\\n    return <div>No tasks</div>\\n  }\\n\\n  return (\\n    <div>\\n      {tasks.map((task, idx) => <Task {...task} key={idx}/>)}\\n    </div>\\n  )\\n}\\n\\n\\n\\n// highlight-next-line\\nfunction Task({ id, isdone, description }: Task) {\\n  return (\\n    <div>\\n      <label>\\n        <input\\n          type=\'checkbox\'\\n          id={id}\\n          checked={isdone}\\n          onChange={\\n            (event) => updateTask({ id, isDone: event.target.checked })\\n          }\\n        />\\n        <span>{description}</span>\\n      </label>\\n    </div>\\n  )\\n}\\n```\\nAs soon as we change our code, TypeScript detects three errors:\\n\\n<ImgWithCaption\\n    alt=\\"TypeScript erros\\"\\n    source=\\"img/typescript-errors.png\\"\\n    caption=\\"The errors are pretty simple (almost as if we\'ve made them up for this example :)\\"\\n/>\\n\\n1. The first error warns us that `tasks` might be `undefined` (e.g., on the first render), which `TaskList` does not expect\\n2. The second error tells us that the property `len` does not exist on the array `tasks`. In other words, we misspelled `length`.\\n3. Finally, the third error tells us that the type `Task` does not contain the field `isdone`. This is also a typo. The field\'s name should be `isDone`.\\n\\nThanks to TypeScript, we can quickly fix all three errors, saving us a lot of time we\'d probably lose by hunting them down manually or, even worse, during runtime.\\n```tsx\\n\\ntype Task = {\\n  id: string\\n  description: string\\n  isDone: boolean\\n}\\nfunction MainPage() {\\n  const { data: tasks } = useQuery<Task, Task[]>(getTasks)\\n\\n  return (\\n    <div>\\n      <h1>Todos</h1>\\n      // highlight-next-line\\n      {tasks && <TaskList tasks={tasks} />}\\n    </div>\\n  )\\n}\\n\\nfunction TaskList({ tasks }: { tasks: Task[] }) {\\n  // highlight-next-line\\n  if (!tasks.length) {\\n    return <div>No tasks</div>\\n  }\\n\\n  return (\\n    <div>\\n      {tasks.map((task, idx) => <Task {...task} key={idx} />)}\\n    </div>\\n  )\\n}\\n\\n\\n\\n// highlight-next-line\\nfunction Task({ id, isDone, description }: Task) {\\n  return (\\n    <div>\\n      <label>\\n        <input\\n          type=\'checkbox\'\\n          id={id}\\n          // highlight-next-line\\n          checked={isDone}\\n          onChange={\\n            (event) => updateTask({ id, isDone: event.target.checked })\\n          }\\n        />\\n        <span>{description}</span>\\n      </label>\\n    </div>\\n  )\\n}\\n```\\n\\nAnd that\'s it! This is the joy of TypeScript. We\'ve easily fixed all reported errors, and our code should now work correctly (well, at least less incorrectly).\\n\\n## Future work\\nYou might have noticed that, if we want to use the `Task` type, we have to write most of its type definition twice - once when defining the `Task` entity in the `.wasp` file and then again in our code. While we can define the type in `src/shared` to avoid writing (almost) the same code on both the server and the client, we\'ll still have duplication between the code in `src/shared` and our `.wasp` file.\\n\\nThe good news is that we know about this, also find it annoying, and are working to fix it as soon as possible! In the near future, Wasp will generate types from entities and allow you to access them using `@wasp` imports. Other improvements exist, too. For example, Wasp could read your query declarations and provide you with the correct type for the `context` object in their definitions. Another possible improvement is automatically typing queries on the front-end, and then relying on type inference to correctly type `useQuery` (instead of users specifying its type arguments explicitly).\\n\\nIn short, there\'s a long and exciting path ahead of us, full of interesting possibilities. So stick with Wasp and see how far we can make it!"},{"id":"/2022/11/29/wasp-beta","metadata":{"permalink":"/wasp-docs/blog/2022/11/29/wasp-beta","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-11-29-wasp-beta.md","source":"@site/blog/2022-11-29-wasp-beta.md","title":"Wasp is in Beta: Auth, TypeScript, Tailwind, LSP","description":"Wasp is a simple configuration language for building full-stack web apps with less code and ensured best practices. It integrates with React, Node.js and Prisma and provides a lot of common features (auth, CRUD, async jobs, ...) out of the box.","date":"2022-11-29T00:00:00.000Z","formattedDate":"November 29, 2022","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"startups","permalink":"/wasp-docs/blog/tags/startups"},{"label":"github","permalink":"/wasp-docs/blog/tags/github"}],"readingTime":2.49,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"Wasp is in Beta: Auth, TypeScript, Tailwind, LSP","authors":["matijasos"],"image":"/img/beta/wasp-beta-banner.png","tags":["webdev","wasp","startups","github"]},"prevItem":{"title":"Feature Announcement - TypeScript Support","permalink":"/wasp-docs/blog/2022/11/29/typescript-feature-announcement"},"nextItem":{"title":"Why we chose Prisma as a database layer for Wasp","permalink":"/wasp-docs/blog/2022/11/28/why-we-chose-prisma"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\nWasp is a simple configuration language for building full-stack web apps with less code and ensured best practices. It integrates with React, Node.js and Prisma and provides a lot of common features (auth, CRUD, async jobs, ...) out of the box.\\n\\nToday, we\u2019re moving to Beta.\\n\\n\x3c!--truncate--\x3e\\n\\nSince the [launch of Wasp Alpha](https://news.ycombinator.com/item?id=26091956) in February 2021, we\u2019ve been fortunate to work with hundreds of early adopters who helped us shape the product and [prioritise the features](/blog/2022/11/16/alpha-testing-program-post-mortem#the-feedback) to build. Number of applications have been deployed to production and even the first [revenue generating product](/blog/2022/11/26/erlis-amicus-usecase) was built on top of Wasp.\\n\\n### Alpha in numbers\\n\\n- 1,011 projects created\\n- 2,012 GitHub stars\\n- 45 GitHub contributors\\n- 243 issues closed\\n- 42,170 lines of code\\n\\n### Featured applications built with Wasp\\n\\n- [Grabbit: internal tool for managing dev environments at StudentBeans](/blog/2022/11/26/michael-curry-usecase)\\n- [Farnance: SaaS for farmers, a HackLBS 2021 winner](/blog/2022/10/28/farnance-hackathon-winner)\\n- [Amicus: Planning and workflow tracking for legal teams](/blog/2022/11/26/erlis-amicus-usecase)\\n\\nHere are the the new features that ship with Beta:\\n\\n### \ud83d\udfe6\xa0TypeScript support\\n\\nDevelopers can now write all their code in TypeScript both on client and server. We\u2019re also in the process of migrating our codebase and adding new types to Wasp imports every day.\\n\\n[Learn more here \u2192](/blog/2022/11/29/typescript-feature-announcement)\\n\\n### \ud83d\udd11\xa0Full-stack authentication\\n\\nBesides username & password, Wasp now also supports authentication with Google. We offer both UI helpers (forms you can just import) and functions you can call from client or server if you need more control.\\n\\n[Learn more here \u2192](/blog/2022/11/15/auth-feature-announcement)\\n\\n### \ud83d\udca8\xa0Tailwind support\\n\\nTailwind CSS framework is now supported in Wasp. Just add two files to the project and you\u2019re ready to go!\\n\\n[Learn more here \u2192](/blog/2022/11/16/tailwind-feature-announcement)\\n\\n### \u23f3\xa0Async jobs/workers\\n\\nDevelopers can run one-time or schedule repeating functions that run out of the regular request-response band. This is useful for e.g. sending emails, crunching data, generating reports and other resources intensive tasks. Powered by pg-boss, zero setup required.\\n\\n[Learn more here \u2192](/blog/2022/06/15/jobs-feature-announcement)\\n\\n### \ud83e\udd5b Optimistic updates support\\n\\nWasp will by default propagate your data model changes across the stack. Still, [in some cases](https://wasp-lang.dev/blog/2021/12/02/waspello#what-doesnt-work-yet)\\nyou might want more control over that flow for the sake of smoother UX - that is now easy to achieve with Wasp.\\n\\n[Learn more here \u2192](/blog/2022/11/30/optimistic-update-feature-announcement)\\n\\n### \ud83d\udcdf Wasp Language Server\\n\\nWasp now has its own LSP for VS Code (other editors coming soon) - that means improved syntax highlighting, code snippets, autocompletion, and error reporting.\\n\\n[Learn more here \u2192](/blog/2022/12/01/beta-ide-improvements)\\n\\n## What\u2019s next?\\n\\nThe next features are going to be about making Wasp easier to use - more examples, starter templates and UI helpers. Longer term, we\u2019ll look into deeper integration of data models throughout the stack and supporting more functionalities through the DSL.\\n\\nIt\u2019s [Beta Launch Week](blog/2022/11/26/wasp-beta-launch-week) and we\u2019re highlighting a new feature every week. Also, at the end of the week we\u2019ll kick-off first Wasp hackathon! Signup [here](/#signup) to stay in the loop."},{"id":"/2022/11/28/why-we-chose-prisma","metadata":{"permalink":"/wasp-docs/blog/2022/11/28/why-we-chose-prisma","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-11-28-why-we-chose-prisma.md","source":"@site/blog/2022-11-28-why-we-chose-prisma.md","title":"Why we chose Prisma as a database layer for Wasp","description":"<ImgWithCaption","date":"2022-11-28T00:00:00.000Z","formattedDate":"November 28, 2022","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"prisma","permalink":"/wasp-docs/blog/tags/prisma"}],"readingTime":6.18,"hasTruncateMarker":true,"authors":[{"name":"Martin Sosic","title":"Co-founder & CTO @ Wasp","url":"https://github.com/martinsos","email":"martin@wasp-lang.dev","imageURL":"https://github.com/martinsos.png","key":"martinsos"}],"frontMatter":{"title":"Why we chose Prisma as a database layer for Wasp","authors":["martinsos"],"image":"/img/why-we-chose-prisma/wasp-loves-prisma.png","tags":["webdev","wasp","prisma"]},"prevItem":{"title":"Wasp is in Beta: Auth, TypeScript, Tailwind, LSP","permalink":"/wasp-docs/blog/2022/11/29/wasp-beta"},"nextItem":{"title":"Amicus: See how Erlis built a SaaS for legal teams with Wasp and got first paying customers!","permalink":"/wasp-docs/blog/2022/11/26/erlis-amicus-usecase"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<ImgWithCaption\\n    alt=\\"Beta is coming\\"\\n    source=\\"img/why-we-chose-prisma/wasp-loves-prisma.png\\"\\n/>\\n\\nWasp is a full-stack JS web dev framework, covering frontend, backend, and database. When choosing the solution to build our database layer on top, we chose Prisma, even though it was still somehwat new tech at that point, and we believe today we made a great choice -> read on to learn why!\\n\\n\x3c!--truncate--\x3e\\n\\nAt Wasp, [we aim](/docs/vision) to simplify full-stack web development via a specialized high-level language. This language allows you to describe the main parts of your web app succinctly, avoiding a lot of usual boilerplate and configuration while giving you lots of features and ensuring best practices. Wasp is essentially a full-stack web framework implemented as a specialized language that works with React & Node.js!\\n\\nWhen we started working on Wasp, we wanted to keep it easy to learn and to the point, so we decided:\\n\\n- the Wasp language should only be used at a high level, so you would still use React, NodeJS, HTML, CSS, etc. to implement your custom logic. If a full-stack web app is an orchestra, Wasp is the conductor.\\n- the Wasp language should be declarative and simple, very similar to JSON, but \u201csmarter\u201d in the sense it understands web app concepts and makes sure your app follows them.\\n\\nWith that in mind, we focused on identifying high-level web app concepts that are worth capturing in the Wasp language. We identified the following parts of a web app:\\n\\n- General app info (title, head, favicon, \u2026)\\n- Pages and Routes\\n- Data Models (aka Entities), e.g. User, Task, Organization, Article, \u2026 .\\n- Operations (communication between client and server; CRUD on data models, 3rd party APIs, \u2026)\\n- Deployment\\n\\n## Entities\\n\\nOf all of those, Entities are in the middle of everything, present through the whole codebase, and are central to all the other parts of the web app: client, server, and database. They were, however, also the most daunting part to implement!\\n\\nWhen we started, we imagined an Entity would look something like this in Wasp:\\n\\n```\\nentity User {\\n  id: Id,\\n  username: String @unique,\\n  email: String @unique\\n  groups: [Group]\\n}\\n```\\n\\nWhile adding this initial syntax to our language was feasible, there were also much bigger tasks to tackle in order to make this a proper solution:\\n\\n- expand syntax to be flexible enough for real-life use cases\\n- support migrations (data and schema)\\n- generate code that users can call from JS/TS to query and update entities in the DB\\n- and probably a lot of other things that we hadn\u2019t even thought of yet!\\n\\n## Mongoose, Sequelize, \u2026 or Prisma?\\n\\nWe already decided that we would pick an ORM(ish) solution for JS/TS which we would build the rest of the features on top of. We started evaluating different ones: Mongoose, Sequelize, TypeORM, \u2026 .\\n\\nBut then we looked at Prisma, and the winner was clear! Not only was Prisma taking care of everything that we cared about, but it had one additional feature that made it a perfect fit:\\n\\n```prisma\\nmodel User {\\n  id          Int     @id @default(autoincrement())\\n  username    String  @unique\\n  password    String\\n}\\n```\\n\\nNo, this is not another idea of how the syntax for Entities could look like in Wasp language \u2192 this is the Prisma Schema Language (PSL)!!!\\n\\n## Prisma Schema Language (PSL)\\n\\nIndeed, Prisma is unique in having a special, declarative language for describing data models (schema), and it was exactly what we needed for Wasp.\\n\\nSo instead of implementing our own syntax for describing Entities, we decided to use Prisma and their PSL to describe Entities (data models) inside the Wasp language.\\n\\nToday, Entities are described like this in Wasp language:\\n\\n```wasp\\n// ... some Wasp code ...\\n\\nentity User {=psl\\n  id          Int     @id @default(autoincrement())\\n  username    String  @unique\\n  password    String\\npsl=} \\n\\n// ... some Wasp code ...\\n```\\n\\nSo in the middle of Wasp, you just switch to writing PSL (Prisma Schema Language) to describe an entity!\\n\\nAnother great thing is that the PSL is at its core a pretty simple language, so we [implemented our own parser](https://github.com/wasp-lang/wasp/blob/main/waspc/src/Wasp/Psl/Parser/Model.hs) for it \u2192 that means that Wasp actually understands what you wrote, even though it is PSL, and can fully work with it. So we lost nothing by using PSL instead of our own syntax and instead gained all the features that Prisma brings.\\n\\n## Other Benefits\\n\\nBesides PSL, there were plenty of other reasons why we felt Prisma is a great fit for us:\\n\\n -  It is targeting Javascript / Typescript.\\n -  It takes care of migrations and has a nice workflow for doing it.\\n -  It supports different databases: Mongo, PostgreSQL, CockroachDB, \u2026, which is very important for Wasp since our vision is to support different stacks in the future.\\n -  It has Prisma Studio - UI for inspecting your database, which we also make available to you via Wasp CLI.\\n -  It keeps improving quickly and is very focused on a nice developer experience, which is also our focus here at Wasp.\\n -  Community is extremely welcoming and the core team is super helpful - all of our questions and issues were answered super quickly!\\n\\n## Challenges\\n\\nWhile integrating Prisma into Wasp went really smoothly, there were a few hiccups:\\n\\n -  Getting Prisma CLI to provide interactive output while being called programmatically by Wasp was tricky, and in the end, we had to use a bit of a dirty approach to trick the Prisma CLI into thinking it is called interactively. We opened an issue for this with Prisma, so hopefully, we will be able to remove this once it is resolved: https://github.com/prisma/prisma/issues/7113.\\n -  In the early days, there were some bugs, however, they were always quickly solved, so updating to the newest Prisma version was often the solution.\\n -  It took us a bit of fiddling to get Prisma to work with its schema outside of the server\u2019s root directory, but we did get it working in the end!\\n\\nMost of these were due to us stretching the boundaries of how Prisma was imagined to be used, but in total Prisma proved to be fairly flexible!\\n\\n## Summary\\n\\nWith its declarative language for describing schema, focus on ergonomics, and JS/TS as the target language, Prisma was really a stroke of luck for us - if not for it, it would have taken much more effort to get the Entities working in Wasp.\\n\\nWhen we started using it, Prisma was still somewhat early, and it was certainly the least-mature technology in our stack - but we decided to bet on it because it was just a perfect fit, and it made so much sense. Today, with Prisma being a mature and popular solution, we are more than happy we made that choice!\\n\\n## Future\\n\\nAlready, Prisma is playing a big role at Wasp, but there is still more that we plan and want to do:\\n\\n - support Prisma\u2019s Enum and Type declarations\\n - expose more of Prisma\u2019s CLI commands, especially database seeding\\n - add support in Wasp for multiple databases (which Prisma already supports)\\n - improve IDE support for PSL within the Wasp language\\n\\nIf you are interested in helping with any of these, reach out to us on this issue https://github.com/wasp-lang/wasp/issues/641, or in any case, join us on our [Discord server](https://discord.gg/rzdnErX)!"},{"id":"/2022/11/26/erlis-amicus-usecase","metadata":{"permalink":"/wasp-docs/blog/2022/11/26/erlis-amicus-usecase","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-11-26-erlis-amicus-usecase.md","source":"@site/blog/2022-11-26-erlis-amicus-usecase.md","title":"Amicus: See how Erlis built a SaaS for legal teams with Wasp and got first paying customers!","description":"amicus hero shot","date":"2022-11-26T00:00:00.000Z","formattedDate":"November 26, 2022","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"startups","permalink":"/wasp-docs/blog/tags/startups"},{"label":"github","permalink":"/wasp-docs/blog/tags/github"}],"readingTime":4.21,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"Amicus: See how Erlis built a SaaS for legal teams with Wasp and got first paying customers!","authors":["matijasos"],"image":"/img/amicus-usecase/amicus-hero-shot.png","tags":["webdev","wasp","startups","github"]},"prevItem":{"title":"Why we chose Prisma as a database layer for Wasp","permalink":"/wasp-docs/blog/2022/11/28/why-we-chose-prisma"},"nextItem":{"title":"How Michael Curry chose Wasp to build Grabbit: an internal tool for managing dev resources at StudentBeans","permalink":"/wasp-docs/blog/2022/11/26/michael-curry-usecase"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n\\n![amicus hero shot](../static/img/amicus-usecase/amicus-hero-shot.png)\\n\\n\\n[Erlis Kllogjri](https://github.com/ErlisK) is an engineer based in San Francisco with broad experience ranging from mechanical engineering and C/C++ microcontroller programming to Python and web app development. In his free time, Erlis enjoys working on side projects, which is also how [Amicus](https://www.amicus.work/) started out.\\n\\n[Amicus](https://www.amicus.work/) is a SaaS for legal teams - think about it as \\"Asana for lawyers\\", but with features and workflows tailored to the domain of law.\\n\\nRead on to learn how long it took Erlis to develop the first version of his SaaS with Wasp, how he got his first paying customers, and what features he plans to add next!\\n\\n\x3c!--truncate--\x3e\\n\\n## Looking for a full-stack \u201call-in-one\u201d solution, with React & Node.js\\n\\nErlis first learned about Wasp on HackerNews and it immediately caught his attention, particularly the configuration language part. One of the companies he worked at in the past had its own internal DSL in the hardware domain, and he understood how helpful it could be for moving fast and avoiding boilerplate.\\n\\nErlis also had previous experience in web development, especially on the front-end side in React and Javascript, so that made Wasp a logical choice.\\n\\n> I was looking at other solutions, but none of them were full-stack and sounded like a lot of work just to stitch everything together and get started. I just wanted to get the job done and didn\u2019t care about picking the stack specifics myself. Wasp was really helpful as it set me up with the best practices and I had everything running in just a few minutes!\\n>\\n> \u2014 Erlis Kllogjri - Amicus\\n\\n## Building Amicus v1.0 and getting first customers!\\n\\nThe idea for Amicus came from his brother, who is employed at a law firm - talking about their process and challenges in executing them, Erlis thought it would be an interesting side project, especially given there is a real problem to solve.\\n\\nSoon, the first version of Amicus was live! It was made in a true lean startup fashion, starting with the essential features and immediately being tested with users.\\n\\n<ImgWithCaption\\n    alt=\\"Amicus\'s dashboard\\"\\n    source=\\"img/amicus-usecase/amicus-dashboard.png\\"\\n    caption=\\"Amicus\'s dashboard, using Material-UI\\"\\n/>\\n\\nErlis used Material-UI as a UI library since it came with one of the example apps built in Wasp (Beta introduced Tailwind support!). Users could track their clients, active legal matters and there was even integrated billing with Stripe! Amicus also extensively used Wasp\u2019s [Async Jobs](https://wasp-lang.dev/blog/2022/06/15/jobs-feature-announcement) feature to regularly update invoices, send reminder emails and clear out old data from the database.\\n\\nAfter a few iterations with the legal team who were Amicus\' test user (e.g. adding support for different types of users via roles), they were ready to get onboarded and become paying customers! More than 20 people from a single company are using Amicus daily for their work, making it an amazing source of continuous feedback for further development.\\n\\nErlis enjoyed the most how fast he could progress and ship features with Wasp on a weekly basis. Having both front-end, back-end, and database set and fully configured to work together from the beginning, he could focus on developing features rather than spend time figuring out the intricacies of the specific stack.\\n\\n> If it weren\'t for Wasp, Amicus would probably have never been finished. I estimate it saved me 100+ hours from the start and I\'m still amazed that I did all this work as a team-of-one. Being able to quickly change existing features and add the new ones is the biggest advantage of Wasp for me.\\n>\\n> \u2014 Erlis Kllogjri - Amicus\\n\\n## Beyond MVP with Wasp\\n\\nAlthough Erlis already has a product running in production, with first paying customers, he wants to see how far he can take it and has a lot of ideas (also requests) for the next features. *(Actually, Erlis had a big kanban board with post-its on a wall behind him as we were chatting, dedicated just to Amicus - that was impressive to see!)*. \\n\\nSome of the most imminent ones are:\\n\\n- uploading and sharing files between lawyers and clients\\n- usage logging and analytics\\n- transactional emails for notifications\\n\\nSince under the hood Wasp is generating code in today\'s mainstream, production-tested technologies such as React, Node.js and PostgreSQL (through Prisma), there aren\'t any technical limitations to scaling Amicus as it grows and attracts more users.\\n\\nAlso, given that the `wasp build` CLI command generates a ready Docker image for the back-end (and static files for the front-end), deployment options are unlimited. Since Heroku is shutting down its free plan, we added guides on how to deploy your project for free on [Fly.io](http://Fly.io) and Railway (freemium).\\n\\n> I was using Wasp while still in Alpha and was impressed how well everything worked, especially given how much stuff I get. I had just a few minor issues and the team responded super quickly on Discord and helped me resolve it.\\n>\\n> \u2014 Erlis Kllogjri - Amicus"},{"id":"/2022/11/26/michael-curry-usecase","metadata":{"permalink":"/wasp-docs/blog/2022/11/26/michael-curry-usecase","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-11-26-michael-curry-usecase.md","source":"@site/blog/2022-11-26-michael-curry-usecase.md","title":"How Michael Curry chose Wasp to build Grabbit: an internal tool for managing dev resources at StudentBeans","description":"grabbit hero shot","date":"2022-11-26T00:00:00.000Z","formattedDate":"November 26, 2022","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"startups","permalink":"/wasp-docs/blog/tags/startups"},{"label":"github","permalink":"/wasp-docs/blog/tags/github"}],"readingTime":4.545,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"How Michael Curry chose Wasp to build Grabbit: an internal tool for managing dev resources at StudentBeans","authors":["matijasos"],"image":"/img/michael-curry-usecase/grabbit-hero-shot.png","tags":["webdev","wasp","startups","github"]},"prevItem":{"title":"Amicus: See how Erlis built a SaaS for legal teams with Wasp and got first paying customers!","permalink":"/wasp-docs/blog/2022/11/26/erlis-amicus-usecase"},"nextItem":{"title":"Wasp Beta Launch Week announcement","permalink":"/wasp-docs/blog/2022/11/26/wasp-beta-launch-week"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n\\n![grabbit hero shot](../static/img/michael-curry-usecase/grabbit-hero-shot.png)\\n\\n[Michael Curry](https://github.com/cursorial) is a senior front-end engineer at [Improbable](https://www.improbable.io/), a metaverse and simulation company based in London. In his free time he enjoys learning about compilers.\\n\\nIn his previous position at StudentBeans, he experienced the problem of multiple engineering teams competing for the same dev environment (e.g. testing, staging, \u2026). Then he discovered Wasp and decided to do something about it!\\n\\nRead on to learn why Michael chose Wasp to build and deploy an internal tool for managing development environments at StudentBeans.\\n\\n\x3c!--truncate--\x3e\\n\\n## The problem: the battle for the dev environment\\n\\nStudentBeans has a microservices-based architecture with multiple environments - test, staging, production, \u2026. The team practices CI/CD and deploys multiple times a day. With such a rapid development speed, it would relatively often happen that multiple engineering teams attempt to claim the same dev environment at the same time. \\n\\nThere wasn\'t an easy way for teams to synchronize on who is using which environment and it would eventually lead to unexpected changes, confusion, and prolonged development times.\\n\\n## The solution: Grabbit - claim and release dev environments as-you-go\\n\\nAfter the incident described above repeated for the n-th time, the team got together for a postmortem. They decided their new development process should look like this:\\n\\n- merge your changes\\n- claim the environment you want to deploy to (e.g. testing, staging, \u2026)\\n- deploy your changes\\n- test your changes\\n- release the environment once you are done with it so others are able to claim it\\n\\nThe other requirements were to build the solution in-house to save money and also not to spend more than a few hours on it as they still needed to deliver some important features for the ongoing sprint.\\n\\n## The power of rapid prototyping with Wasp\\n\\nMichael learned about Wasp during its [first HackerNews launch](https://news.ycombinator.com/item?id=26091956) and it immediately caught his eye. Being a programming language enthusiast himself, he immediately understood the value of a DSL approach and how it could drastically simplify the development process, while at the same time not preventing him from using his preferred tech stack (React, Node.js) when needed.\\n\\nAlso, although Michael had full-stack experience, his primary strength at the time was on the front-end side. Wasp looked like a great way of not having to deal with the tedious back-end setup and wiring (setting up the database, figuring out API, \u2026) and being able to focus on the UX.\\n\\n> When I first learned about Wasp on HN I was really excited about its DSL approach. It was amazing how fast I could get things running with Wasp - I had the first version within an hour! The language is also fairly simple and straightforward and plays well with React & Node.js + it removes a ton of boilerplate.\\n>\\n> \u2014 Michael Curry - Grabbit\\n\\n## Out-of-the-box deployment\\n\\nOnce Michael was satisfied with the first version of Grabbit, and confirmed with the team it fits their desired process, the only thing left to do was to deploy it! It is well known this step can get really complicated, especially if you\'re not yet well-versed in the sea of config options that usually come with it.\\n\\nWasp CLI comes with a `wasp build` command that does all the heavy lifting for you - it creates a directory with static front-end files that you can easily deploy to e.g. Netlify, and on the other hand, a Docker image for the back-end. Since Heroku is ending its free plan, our recommendation is to deploy to Fly.io, for which the detailed guide is provided. You can find the [detailed deployment instructions here](https://wasp-lang.dev/docs/deploying).\\n\\nIn Michael\'s case, he deployed Grabbit behind the VPN since it was an internal tool, and this process was made easy by having a ready-to-go Dockerfile.\\n\\n## From MVP to a full-fledged SaaS without a rewrite\\n\\nThe presented functionality of Grabbit above is quite simple (create a resource \u2192 claim it \u2192 release it), and it could have easily been implemented in some no-code tool or, if we really wanted to go simple, with a Trello board. So why use Wasp at all?\\n\\nOne reason is that developers know and prefer their tools and trust code over the no-code solutions, especially when requirements are still evolving and it is not evident they won\'t get \\"stuck\\" in some closed system. Michael had similar thinking - as he identified this problem at his own company, he realized others must be facing the same issue as well. That is why his plan was to keep improving Grabbit and eventually offer it as a standalone SaaS.\\n\\nThis is where Wasp comes in - he could develop and deploy an initial version of Grabbit in a matter of hours, but still end up with a platform that he can extend indefinitely through the power of code with his stack of choice, React & Node.js, while also using the npm packages he is using everyday at work.\\n\\nOnce he starts adding more advanced features, such as multi-user support with authentication, email notifications, and integration with CI/CD, no-code tools won\'t cut it any more. This way he saved himself and the company from throwing an MVP away and starting everything from scratch (having to learn the new technology and figure out how to set it all up) as the product evolves."},{"id":"/2022/11/26/wasp-beta-launch-week","metadata":{"permalink":"/wasp-docs/blog/2022/11/26/wasp-beta-launch-week","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-11-26-wasp-beta-launch-week.md","source":"@site/blog/2022-11-26-wasp-beta-launch-week.md","title":"Wasp Beta Launch Week announcement","description":"It\u2019s almost here! After almost two years since our Alpha release, countless apps developed, React and Node versions upgraded, and PRs merged we\u2019re only a day away from Beta!","date":"2022-11-26T00:00:00.000Z","formattedDate":"November 26, 2022","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"startups","permalink":"/wasp-docs/blog/tags/startups"},{"label":"github","permalink":"/wasp-docs/blog/tags/github"}],"readingTime":4.535,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"Wasp Beta Launch Week announcement","authors":["matijasos"],"image":"/img/beta-ann/beta-banner.png","tags":["webdev","wasp","startups","github"]},"prevItem":{"title":"How Michael Curry chose Wasp to build Grabbit: an internal tool for managing dev resources at StudentBeans","permalink":"/wasp-docs/blog/2022/11/26/michael-curry-usecase"},"nextItem":{"title":"How Wasp reached all-time high PR count during Hacktoberfest: tips for OSS maintainers","permalink":"/wasp-docs/blog/2022/11/17/hacktoberfest-wrap-up"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\nIt\u2019s almost here! After almost two years since our Alpha release, countless apps developed, React and Node versions upgraded, and PRs merged **we\u2019re only a day away from Beta!**\\n\\n<ImgWithCaption\\n    alt=\\"Beta is coming\\"\\n    source=\\"img/beta-ann/beta-banner.png\\"\\n/>\\n\\nWe\u2019re going to follow a launch week format, **which means our Beta launch will last for the whole week**! Starting with the Product Hunt launch this Sunday (we\u2019ll let you know once we\u2019re live, so sharpen your upvoting fingers!) **we\u2019ll highlight a new feature every day**.\\n\\nI\u2019ll try not to spoil too much in advance but we\u2019re really excited about this - here follows a quick overview of what it\u2019s gonna look like:\\n\\n\x3c!--truncate--\x3e\\n\\n## Sunday, Nov 27 - Product Hunt launch event \ud83d\ude80 + let\u2019s get this party started: **Auth** \ud83c\udf89\\n\\nBesides defending our Product Hunt title (we won [#1 Product of the Day](https://www.producthunt.com/products/wasp-lang-alpha#wasp-lang-alpha) last time), this time we\u2019ll also have an online party for all of us to celebrate together!\\n\\nIt will be held **on our Discord at 9:00 am EST / 15:00 CET** - [sign up here](https://discord.gg/4kUcXChX?event=1042717917097246720) and make sure to mark yourself as \u201cInterested\u201d!\\n\\nJoin us to meet the team, attend a relaxed AMA session to learn everything about Wasp, from how it started to development challenges (having fun with Haskell, web dev and compilers) and ideas and plans for the future.\\n\\n<ImgWithCaption\\n    alt=\\"Beta launch party instructions\\"\\n    source=\\"img/beta-ann/launch-party.png\\"\\n/>\\n\\nThe first feature to announce will be authentication in Wasp! It\u2019s easier and cooler than ever, supports 3rd party providers (hint: starts with \u201cG\u201d), and works smoother than a jar of peanut butter (not the crunchy one of course)!\\n\\n## Monday, Nov 28 - TypeScript support!\\n\\n<ImgWithCaption\\n    alt=\\"TypeScript is here!\\"\\n    source=\\"img/beta-ann/thank-you-god.gif\\"\\n/>\\n\\nWhen we asked you what was missing in Wasp during our [Alpha Testing Program](/blog/2022/11/16/alpha-testing-program-post-mortem), you were pretty clear:\\n\\n<ImgWithCaption\\n    alt=\\"TypeScript is wanted!\\"\\n    source=\\"img/beta-ann/ts-wanted.png\\"\\n/>\\n\\nWe heard you (honestly we were missing it too) and now it\u2019s here! You can write your code in TypeScript and enjoy all the goodies that types bring. Some things already work really well and there are a few for which we still have ideas on how to make them better, but more on that on Tuesday!\\n\\n## Wednesday, Nov 29 - Tailwind support! \ud83d\udc08\xa0\ud83d\udca8\\n\\n<ImgWithCaption\\n    alt=\\"Tailwind Nic Cage\\"\\n    source=\\"img/beta-ann/nic-cage-tailwind.gif\\"\\n/>\\n\\nIt\u2019s beautiful! Another highly anticipated featured that also comes with Beta - support for Tailwind CSS framework! Since it has an additional build step it didn\u2019t work out-of-the-box with Alpha, but now it works like a breeze (see what I did here?)!\\n\\nHonestly, having used it for designing our new Beta landing page I can really see why it gained so much popularity. So long, making up names for classes, \u201ccontainers\u201d, and \u201cwrappers\u201d!\\n\\n## Thursday, Nov 30 - Optimistic updates!\\n\\n<ImgWithCaption\\n    alt=\\"Without optimistic updates\\"\\n    source=\\"img/beta-ann/no-opt-updates.gif\\"\\n    caption=\\"Stop glitching, dang it!\\"\\n/>\\n\\nYou know that feeling when you move your Trello card \u201cTry Wasp Beta\u201d from \u201cTodo\u201d column to \u201cDone\u201d column and everything works super smoothly without any glitches? That\u2019s because of optimistic updates! You may not need it often but if you needed and it wasn\u2019t possible you\u2019d feel really sad.\\n\\nWell, that\u2019s why Alpha is called Alpha and Beta is called Beta \ud83d\ude05. Long story short, now it\u2019s possible to do it in Wasp and it\u2019s also super easy and clean! We\'re actually very optimistic you\u2019ll feel really good about implementing optimistic updates for your app in Wasp.\\n\\n## Friday, Dec 1 - Improved IDE support, tooling and Wasp LSP!\\n\\n<ImgWithCaption\\n    alt=\\"VS Code support for Wasp LSP\\"\\n    source=\\"img/beta-ann/wasp-loves-vscode.png\\"\\n/>\\n\\nIf you like types in TypeScript (and in general), then you will also enjoy Wasp! Our DSL is also a typed language which means it can report errors in compile time, e.g. in case you haven\u2019t configured your route correctly. And now all that happens directly in your editor!\\n\\n**Beta brings LSP, Language Server for Wasp that works with VS Code** (support for other editors coming soon! I\u2019m VIM user myself so take a guess :D). That means improved syntax highlighting, code autocompletion and live error reporting - everything you\u2019d expect from a language!\\n\\n<ImgWithCaption\\n    alt=\\"Wasp Language Server in action\\"\\n    source=\\"img/beta-ann/wls-demo.gif\\"\\n    caption=\\"Wasp LSP in action!\\"\\n/>\\n\\n## Saturday, Dec 2 - Grande Finale + #1 Wasp Hackathon!(Waspathon\ud83d\udc1d\xa0?)\\n\\n<ImgWithCaption\\n    alt=\\"First Wasp hackathon\\"\\n    source=\\"img/beta-ann/hackathon-banner.gif\\"\\n/>\\n\\nI don\u2019t want to reveal too much in advance, but yep there will be a hackathon, yep there will be cool rewards (at least we think so) and yep it will be awesome! We\u2019ll officially announce it as we end the launch week, and equipped with all the new features Beta brought we\u2019ll switch into the hacking mode!\\n\\nIt\u2019s our first hackathon and we can\u2019t wait to tell you more about it (ok, I admit, we\u2019re still working on it) and see what you beeld with Wasp!\\n\\n## Recap\\n\\n- **We are launching Beta this Sunday, Nov 27, on Product Hunt at 1am PST / 4am EST / 10am CET** - make sure to upvote and comment (anything counts, even \u201cgo guys!\u201d) when you can\\n- **Beta brings a ton of new exciting features** - we\u2019ll highlight one each day of the following week\\n- **On Saturday, Dec 2, we\u2019ll announce a hackathon** - our first ever!\\n\\nThat\u2019s it, Waspeteers - keep buzzing as always and see you soon on the other side! \ud83d\udc1d\xa0\xa0\ud83c\udd71\ufe0f\\n\\nMatija, Martin & the Wasp team"},{"id":"/2022/11/17/hacktoberfest-wrap-up","metadata":{"permalink":"/wasp-docs/blog/2022/11/17/hacktoberfest-wrap-up","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-11-17-hacktoberfest-wrap-up.md","source":"@site/blog/2022-11-17-hacktoberfest-wrap-up.md","title":"How Wasp reached all-time high PR count during Hacktoberfest: tips for OSS maintainers","description":"2078 lines of code across 24 PRs were changed in Wasp repo during HacktoberFest 2022 - the most prominent online event for promoting and celebrating OSS culture. October has been a blast, to say the least, and the most active month in the repo\'s history.","date":"2022-11-17T00:00:00.000Z","formattedDate":"November 17, 2022","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"hacktoberfest","permalink":"/wasp-docs/blog/tags/hacktoberfest"},{"label":"github","permalink":"/wasp-docs/blog/tags/github"}],"readingTime":5.745,"hasTruncateMarker":true,"authors":[{"name":"Maksym Khamrovskyi","title":"DevRel @ Wasp","key":"maksym36ua"}],"frontMatter":{"title":"How Wasp reached all-time high PR count during Hacktoberfest: tips for OSS maintainers","authors":["maksym36ua"],"tags":["webdev","wasp","hacktoberfest","github"]},"prevItem":{"title":"Wasp Beta Launch Week announcement","permalink":"/wasp-docs/blog/2022/11/26/wasp-beta-launch-week"},"nextItem":{"title":"Alpha Testing Program: post-mortem","permalink":"/wasp-docs/blog/2022/11/16/alpha-testing-program-post-mortem"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n\\n2078 lines of code across 24 PRs were changed in [Wasp repo](https://github.com/wasp-lang/wasp) during [HacktoberFest 2022](https://hacktoberfest.com/) - the most prominent online event for promoting and celebrating OSS culture. October has been a blast, to say the least, and the most active month in the repo\'s history.\\n\\nThis is the story of our journey along with the tips on leveraging Hacktoberfest to get your repo buzzing! \ud83d\udc1d\ud83d\udc1d\\n\\n\x3c!--truncate--\x3e\\n\\n## How it went: the stats\\n\\nLet\'s take a quick look at the charts below (data obtained from [OSS Insight](https://ossinsight.io/analyze/wasp-lang/wasp) platform) \ud83d\udc47\\n\\n<ImgWithCaption\\n    alt=\\"PR history\\"\\n    source=\\"img/hacktoberfest-wrap-up/pr-history.png\\"\\n    caption=\\"24 contributor PRs in Oct, an all-time high!\\"\\n/>\\n\\n<ImgWithCaption\\n    alt=\\"Lines of code changes\\"\\n    source=\\"img/hacktoberfest-wrap-up/code-lines-history.png\\"\\n    caption=\\"On the other hand, number of changed LoC isn\'t that huge\\"\\n/>\\n\\nWhile the number of PRs is at an all-time high, the number of updated lines of code is fewer than usual. If we take a look at the distribution of PR sizes in the first chart, we can see that \\"xs\\" and \\"s\\" PRs are in the majority (20 out of 24).\\n\\n**This brings us to our first conclusion: first-time contributors start with small steps!** The main benefit here is getting potential contributors interested and familiar with the project, rather than expecting them to jump in and\\nimmediately start implementing the next major feature. Efforts like that require investing time to understand and digest codebase architecture, design decisions and the development process.\\n\\nOn the other hand, being able to implement and merge any feature, no matter the size, from beginning to the end, and to get your name on the list of contributors of your favourite project is an amazing feeling! That will make your contributors feel like superheroes and motivate them to keep taking on larger and larger chunks, and maybe eventually even join the core team!\\n\\n**Thus, the second conclusion would be: don\u2019t underestimate the significance of small PRs!** It\'s not about reducing your backlog, but rather encouraging developers to get engaged with your project in a friendly way.\\n\\n:::tip\\n\\nTo make it easier for your new contributors, you can prepare in advance good issues to get started with - e.g. smaller bugs, docs improvements, fun but isolated problems, etc.\\n\\nWe added [`good-first-issue`](https://github.com/wasp-lang/wasp/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22) label to such issues in Wasp repo, and even added extra context such as `no-haskell`, `webdev`, `example`, `docs`.\\n\\n:::\\n\\nWith your repo being set, the next question is *\\"How do I get people to pick my project to work on\\"*? Relying solely\\non putting \\"Hacktoberfest\\" topic on your GitHub repo won\'t do the trick, not with thousands of other repos doing the same.\\n\\nIf you want to get noticed, **you need to do marketing. A lot of it. The name of the game here is what you put in is what you get back.** Let\'s talk about this in more detail.\\n\\n## A thin line between genuine interactions and annoying self-promotion\\n\\nFirst and foremost, you\'ll need to create [an entry point](https://github.com/wasp-lang/wasp/issues/735) with all the necessary information for the participants. We opted for a GitHub issue where we categorized Hacktoberfest issues by type, complexity, etc, but it can be anything - a dedicated landing page, Medium/Dev.to article, or whatever works for you. Once you have that, you can start promoting it.\\n\\n<ImgWithCaption\\n    alt=\\"Hacktoberfest entry point - gh issue\\"\\n    source=\\"img/hacktoberfest-wrap-up/hf-gh-entry-point.png\\"\\n    caption=\\"Our entry point for Hacktoberfest\\"\\n/>\\n\\nOur marketing strategy consisted of the following:\\n\\n1. Tweeting regularly - what\'s new, interesting issues, ...\\n\\n2. Writing meaningful Reddit posts about your achievements\\n\\n3. Hanging out in HacktoberFest [Discord server](https://discord.com/invite/hacktoberfest), chatting with others and answering their questions\\n\\n4. Checking posts with [appropriate](https://dev.to/t/hacktoberfest) [tags](https://medium.com/tag/hacktoberfest2022) on different blogging websites like Medium, Dev.to, Hashnode, etc. and participating in conversations. \\n\\nThere are plenty of other ways to advertise your project, like joining events or writing articles. Even [meme contests](https://github.com/dailydotdev/memetoberfest). The activities mentioned above worked the best for us. Let\u2019s dive a bit deeper.\\n\\nTweets are pretty obvious - as mentioned, you can share updates on how stuff is going. Tag contributors, inform your followers about available issues and mention those who might be a good fit for tackling them.  \\n\\nReddit is a much more complex beast. You need to avoid clickbait post titles, comply with subreddit rules on self-promotion and try to give meaningful info to the community simultaneously. Take less than you give, and you\u2019re good. \\n\\n<ImgWithCaption\\n    alt=\\"posting on reddit\\"\\n    source=\\"img/hacktoberfest-wrap-up/oss-reddit-post.png\\"\\n    caption=\\"How posting on Reddit feels\\"\\n/>\\n\\n\\nThe Discord server marketing was pretty straightforward. There\u2019s even a dedicated channel for self-promotion. In case you\'re not talkative much, dropping a link to your project is OK, and that\u2019s it. On the other hand, the server is an excellent platform for discussing Hacktoberfest-related issues, approaches, and ideas. The more you chat, the higher your chances of drawing attention to your project.\\n\\nThe most engaging but also time consuming activity was commenting on blog posts of other Hacktoberfest participants. **Pretending that you\u2019re interested in the topic only to leave a self-promoting comment will not bring you anywhere - it can only result in your comment being removed**. Make sure to provide value: add more information on the topic of the article, address specific points the author may have missed, or mention how you\u2019ve dealt with the related issue in your project. \\n\\nBe consistent and dedicate time to regularly to check new articles and jump into discussions. Share a link to your repo only if it fits into the flow of the conversation.\\n\\n![Content marketing in a nutshell](../static/img/hacktoberfest-wrap-up/content-marketing-in-a-nutshell.png)\\n\\n## Was it worth it?\\n\\nBefore joining HacktoberFest as maintainers, we weren\u2019t sure it would be worth the time investment. Our skepticism was reinforced by the following:\\n\\n1. [Mentions](https://www.reddit.com/r/developersIndia/comments/xvynx9/hacktoberfest_is_ruining_opensource/) of people submitting trivial PRs just to win the award\\n\\n2. The fact that we\'re making a relatively complex project (DSL for developing React + Node.js full-stack web apps with less code) and it might be hard for people to get into it\\n\\n3. The compiler is written is Haskell, with templates in JavaScript - again, not the very common project setup\\n\\nFortunately, none of this turned out to be a problem! We\'ve got 24 valid PRs, both Haskell and non-Haskell, a ton of valuable feedback, and several dozen new users and community members. \\n\\n## Wrap up\\n\\nDon\u2019t expect magic to happen. HacktoberFest is all about smaller changes and getting community introduced to your project. Be ready to promote your repo genuinely and don\u2019t be afraid to take part in the contest. We hope that helps and wish you the best of luck!\\n\\nRemember, HacktoberFest is all about the celebration of open source. Stick to that principle, and you\u2019ll get the results you could only wish for!\\n\\n## P.S. - Thanks to our contributors!\\n\\nMassive shout out to our contributors: [@ussgarci](https://twitter.com/ussgarci), [@h4r1337](https://twitter.com/h4r1337), [@d0m96](https://twitter.com/d0m96), [@EmmanuelCoder](https://twitter.com/EmmanuelCoder), [@gautier_difolco](https://twitter.com/gautier_difolco), [@vaishnav_mk1](https://twitter.com/vaishnav_mk1), [@NeoLight1010](https://twitter.com/NeoLight1010), [@abscubix](https://twitter.com/abscubix), [@JFarayola](https://twitter.com/JFarayola), [@Shahx95](https://twitter.com/Shahx95) and everyone else for making it possible. You rock! \ud83e\udd18"},{"id":"/2022/11/16/alpha-testing-program-post-mortem","metadata":{"permalink":"/wasp-docs/blog/2022/11/16/alpha-testing-program-post-mortem","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-11-16-alpha-testing-program-post-mortem.md","source":"@site/blog/2022-11-16-alpha-testing-program-post-mortem.md","title":"Alpha Testing Program: post-mortem","description":"We are working on a new web framework that integrates with React & Node.js, and also happens to be a language. As you can probably imagine, it\u2019s not easy to get people to use a new piece of technology, especially while still in Alpha. On the other hand, without users and their feedback, it\u2019s impossible to know what to build.","date":"2022-11-16T00:00:00.000Z","formattedDate":"November 16, 2022","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"startups","permalink":"/wasp-docs/blog/tags/startups"},{"label":"github","permalink":"/wasp-docs/blog/tags/github"}],"readingTime":6.41,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"Alpha Testing Program: post-mortem","authors":["matijasos"],"image":"/img/atp/welcome-to-atp-notion.png","tags":["webdev","wasp","startups","github"]},"prevItem":{"title":"How Wasp reached all-time high PR count during Hacktoberfest: tips for OSS maintainers","permalink":"/wasp-docs/blog/2022/11/17/hacktoberfest-wrap-up"},"nextItem":{"title":"Feature Announcement - Tailwind CSS support","permalink":"/wasp-docs/blog/2022/11/16/tailwind-feature-announcement"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\nWe are working on a new web framework that integrates with React & Node.js, and also happens to be a language. As you can probably imagine, it\u2019s not easy to get people to use a new piece of technology, especially while still in Alpha. On the other hand, without users and their feedback, it\u2019s impossible to know what to build.\\n\\nThat is why we ran Alpha Testing Program for Wasp - here is what we learned and what went both well and wrong along the way.\\n\\n<ImgWithCaption\\n    alt=\\"twitter DM - shared atp in swag groups\\"\\n    source=\\"img/atp/swag-groups-twitter.png\\"\\n/>\\n\\n\x3c!--truncate--\x3e\\n\\n## \u201cOf course I know about Wasp! I just haven\u2019t come around to trying it out yet.\u201d\\n\\nAlthough we hit the front page of HN [several](https://news.ycombinator.com/item?id=26091956) [times](https://news.ycombinator.com/item?id=32098144) and are about to reach 2,000 stars on GitHub, there is still a big difference between a person starring a repo and actually sitting down and building something with it.\\n\\nTalking to people, we realised a lot of them had heard of Wasp, thought it was a neat idea, but hadn\u2019t tried it out. These were the main reasons:\\n\\n- having to find 30 mins to go through our **Build a Todo App** tutorial - *\u201cI\'m busy now, but I\u2019ll do it next week.\u201d*\\n- building a bare-bones todo app is not that exciting\\n- not having an idea what else to build\\n- *\u201cthe product is still in alpha, so I will bookmark it for later\u201d*\\n\\nThese are all obvious and understandable reasons. I must admit, I\u2019m much the same \u2014 maybe even worse \u2014 when it comes to trying out something new/unproven. It just isn\u2019t a priority, and without a push that will help me overcome all these objections, I usually don\u2019t have an incentive to go through with it.\\n\\nHaving realised all that, we understood we needed to give people a reason to try Wasp out **now**, because that\u2019s when we needed the feedback, not next week.\\n\\n## Welcome to Wasp Alpha Testing Program!\\n\\n<p align=\\"center\\">\\n  <figure>\\n    <img alt=\\"The team\\"\\n        src={useBaseUrl(\'img/atp/welcome-to-atp-notion.png\')}\\n    />\\n    <figcaption style={{color: \'#808080\'}}>I was having a bit too much fun <Link to={useBaseUrl(\'https://wasp-lang.notion.site/CLOSED-Welcome-to-Wasp-Alpha-Testing-program-f3a8a350802341abac87fb7831bb1e60\')}>here</Link>, but Portal fans will understand.</figcaption>\\n  </figure>\\n</p>\\n\\nWe quickly put together an admissions page for alpha testers in Notion (you can see it [here](https://wasp-lang.notion.site/Wasp-Alpha-Testing-Program-Admissions-dca25649d63849cb8dfc55881e4f6f82)) and started sharing it around. To counter the hurdles we mentioned above, we time-boxed the program (*\u201dthis is happening now and you have 48 hours to finish once you start*\u201d) and promised a t-shirt to everyone that goes through the tutorial and fills out the feedback form.\\n\\n<ImgWithCaption\\n    alt=\\"Apply to ATP - CTA\\"\\n    source=\\"img/atp/atp-apply-here.png\\"\\n    caption=\\"CTA from the admissions page\\"\\n/>\\n\\nSoon, the first applications started trickling in! For each new applicant, we\u2019d follow up with the [instructions](https://www.notion.so/CLOSED-Welcome-to-Wasp-Alpha-Testing-program-f3a8a350802341abac87fb7831bb1e60) on how to successfully go through the Alpha Testing Program:\\n\\n- fill out intro form (years of experience, preferred stack, etc)\\n- go through our \u201cbuild a Todo app\u201d tutorial\\n- fill out the feedback form - what was good, what was bad etc.\\n\\n<ImgWithCaption\\n    alt=\\"Timeboxing\\"\\n    source=\\"img/atp/timeboxing.png\\"\\n    caption=\\"People were really respectful of this deadline and would politely ask to extend it in case they couldn\u2019t make it.\\"\\n/>\\n\\nBut, soon after I got the following message on Twitter:\\n\\n<ImgWithCaption\\n    alt=\\"twitter DM - shared atp in swag groups\\"\\n    source=\\"img/atp/swag-groups-twitter.png\\"\\n/>\\n\\nWe got really scared that we would get a ton of folks putting in minimal effort while trying Wasp out just to get the free swag, leaving us empty-handed and having learned nothing! On the other hand, we didn\u2019t have much choice since we didn\u2019t define the \u201cminimum required quality\u201d of feedback in advance.\\n\\nLuckily, it wasn\u2019t the problem in the end, even the opposite -- we did get a surge of applications, but only a portion of them finished the program and the ones that did left really high-quality feedback!\\n\\n## How it went - test profile & feedback\\n\\n### Tester profile\\n\\nWe received 210 applications and 53 out of those completed the program \u2014 25% completion rate.\\n\\nWe also surveyed applicants about their preferred stack, years of programming experience, etc:\\n\\n<ImgWithCaption\\n    alt=\\"Intro survey - tester profile\\"\\n    source=\\"img/atp/atp-intro-survey-yoe.png\\"\\n    caption=\\"Yep, we like puns.\\"\\n/>\\n\\n### The feedback\\n\\nThe feedback form evaluated testers\u2019 overall experience with Wasp. We asked them what they found to be the best and worst parts of working with Wasp, as well as about the next features they\u2019d like to see.\\n\\n<ImgWithCaption\\n    alt=\\"Feedback survey - experience\\"\\n    source=\\"img/atp/atp-feedback-survey-exp.png\\"\\n/>\\n\\n**The bad parts**\\n\\nWhat our testers were missing the most was a full-blown IDE and TypeScript support. Both of these are coming in Beta but only JS was supported at the time. Plus, there were some installation problems with Windows (which is not fully supported yet \u2014 best to use it through WSL).\\n\\n<ImgWithCaption\\n    alt=\\"Feedback survey - the bad parts\\"\\n    source=\\"img/atp/atp-bad-parts.png\\"\\n/>\\n\\nWe were already aware that TypeScript support is an important feature, but didn\u2019t have an exact feeling of how much - the feedback was really helpful and helped us prioritise our Beta backlog.\\n\\n**The good parts**\\n\\nTesters\u2019 favourite part was the batteries-included experience, particularly the [auth model](/docs/tutorial/auth).\\n\\n<ImgWithCaption\\n    alt=\\"Feedback survey - the good parts\\"\\n    source=\\"img/atp/atp-good-parts.png\\"\\n/>\\n\\n## Post-mortem: what didn\u2019t go well\\n\\n### No threshold for feedback quality\\n\\n<ImgWithCaption\\n    alt=\\"Feedback quality\\"\\n    source=\\"img/atp/atp-feedback-quality.png\\"\\n/>\\n\\nWe didn\u2019t put any kind of restrictions on the feedback form, e.g. minimal length of the feedback. That resulted in ~15%-20% of answers being single words, such as depicted above. I\u2019m not sure if there is an efficient way to avoid this or just a stat to live with.\\n\\n### Using free text form for collecting addresses\\n\\nIt never crossed our minds before that validating addresses could be such an important part of shipping swag, but turns out it is. It seems that there are a lot of ways to specify an address, some of which are different from what is expected by our post office, resulting in a number of shipments getting returned.\\n\\nAn ideal solution would be to use a specialized \u201caddress\u201d field in a survey that would auto-validate it, but turns out Typeform (which we used) doesn\u2019t have that feature implemented yet, although [it\u2019s been highly requested](https://community.typeform.com/suggestions-feedback-34/address-field-question-type-2950).\\n\\n<ImgWithCaption\\n    alt=\\"Shipment returned\\"\\n    source=\\"img/atp/atp-shipment-returned.jpg\\"\\n/>\\n\\n<ImgWithCaption\\n    alt=\\"Shipment returned email\\"\\n    source=\\"img/atp/atp-shipment-returned-email.png\\"\\n/>\\n\\n## The non-obvious benefit of Alpha Testing Program\\n\\nWhat went well is that we got a lot of high-quality feedback that steered and fortified our plan for the upcoming Beta release.\\n\\nThe other big benefit is that we finally solved the *\u201clooks cool but i\u2019ll try it out later maybe\u201d* problem. Overall, our usage went well up during the program, but even after it ended, the baseline increased significantly. This was the second-order effect we didn\u2019t foresee.\\n\\nOur understanding is that once people finally gave it a try, a portion of them felt the value first-hand and decided to keep using it for other projects as well.\\n\\n<ImgWithCaption\\n    alt=\\"Alpha testing program - usage spike\\"\\n    source=\\"img/atp/atp-usage-spike.png\\"\\n/>\\n\\n## Summary & going forward: Beta\\n\\nThe overall conclusion from our Alpha Testing Program is it was a worthy effort which got us valuable feedback and positively affected the overall usage. Moving forward we\u2019ll try to focus on ensuring more quality feedback and prioritising 1-to-1 communication to make sure we fully understand what bothers Wasp users and what we can improve. It also might be helpful to do testing in smaller batches so we are not overwhelmed with responses and can focus on the individual testers - that\u2019s something we might try out in Beta.\\n\\nAs mentioned, the next stop is Beta! It comes out on the 27th of November - [sign up here](/#signup) to get notified."},{"id":"/2022/11/16/tailwind-feature-announcement","metadata":{"permalink":"/wasp-docs/blog/2022/11/16/tailwind-feature-announcement","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-11-16-tailwind-feature-announcement.md","source":"@site/blog/2022-11-16-tailwind-feature-announcement.md","title":"Feature Announcement - Tailwind CSS support","description":"<img alt=\\"Full stack devs\\"","date":"2022-11-16T00:00:00.000Z","formattedDate":"November 16, 2022","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"feature","permalink":"/wasp-docs/blog/tags/feature"},{"label":"css","permalink":"/wasp-docs/blog/tags/css"}],"readingTime":2.085,"hasTruncateMarker":true,"authors":[{"name":"Shayne Czyzewski","title":"Founding Engineer @ Wasp","url":"https://github.com/shayneczyzewski","imageURL":"https://github.com/shayneczyzewski.png","key":"shayneczyzewski"}],"frontMatter":{"title":"Feature Announcement - Tailwind CSS support","authors":["shayneczyzewski"],"image":"/img/tailwind-2.png","tags":["webdev","wasp","feature","css"]},"prevItem":{"title":"Alpha Testing Program: post-mortem","permalink":"/wasp-docs/blog/2022/11/16/alpha-testing-program-post-mortem"},"nextItem":{"title":"Feature Announcement - New auth method (Google)","permalink":"/wasp-docs/blog/2022/11/15/auth-feature-announcement"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<p align=\\"center\\">\\n  <img alt=\\"Full stack devs\\"\\n      src={useBaseUrl(\'img/tailwind-1.png\')}\\n      width=\\"400px\\"\\n  />\\n</p>\\n\\n\x3c!--truncate--\x3e\\n\\n<WaspIntro />\\n<InBlogCta />\\n\\nThere are backend devs who can do some frontend, and frontend devs who can do some backend. But the mythical full stack dev is exceedingly rare (or more likely, a lie). Even as someone who falls into the meme category above, we *all* still need to make websites that **look noice**. This is a place where CSS frameworks can help.\\n\\nBut which one should you use? According to our *extensive research*, a statistically-questionable-but-you\u2019re-still-significant-to-us 11 people on Twitter wanted us to add better support for [Tailwind](https://tailwindcss.com/). Which was lucky for us, since we already added it before asking them. \ud83d\ude05\\n\\n<p align=\\"center\\">\\n  <img alt=\\"Twitter voting\\"\\n      src={useBaseUrl(\'img/tailwind-2.png\')}\\n      width=\\"400px\\"\\n  />\\n</p>\\n\\nOk, it wasn\u2019t a huge stretch for us to do so preemptively. Tailwind is one of the most heavily used CSS frameworks out there today and seems to keep growing in popularity. So how do you integrate it into your Wasp apps? Like many things in Wasp, it\u2019s really easy- just drop in two config files into the root of your project and you can then start using it! Here are the defaults:\\n\\n```jsx title=\\"./tailwind.config.cjs\\"\\n/** @type {import(\'tailwindcss\').Config} */\\nmodule.exports = {\\n  content: [\\n    \\"./src/**/*.{js,jsx,ts,tsx}\\",\\n  ],\\n  theme: {\\n    extend: {},\\n  },\\n  plugins: [],\\n}\\n```\\n\\n```jsx title=\\"./postcss.config.cjs\\"\\nmodule.exports = {\\n  plugins: {\\n    tailwindcss: {},\\n    autoprefixer: {},\\n  },\\n}\\n```\\n\\nWhen these two files are present, Wasp will make sure all the required NPM dependencies get added, that [PostCSS](https://postcss.org/) plays nicely with Tailwind directives in CSS files, and that your JavaScript files are properly processed so you can use all the CSS selectors you want (provided you are properly equipped :D).\\n\\n<p align=\\"center\\">\\n  <img alt=\\"Best monitor\\"\\n      src={useBaseUrl(\'img/tailwind-3.png\')}\\n      width=\\"500px\\"\\n  />\\n</p>\\n\\nWith that in place, you can add the Tailwind directives to your CSS files like so:\\n\\n```css title=\\"./src/client/Main.css\\"\\n@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n\\n/* rest of content below */\\n```\\n\\nAnd then start using Tailwind classes in your components:\\n\\n```jsx\\n<h1 className=\\"text-3xl font-bold underline\\">\\n  Hello world!\\n</h1>\\n```\\n\\nAs usual, Wasp will still automatically reload your code and refresh the browser on any changes. \ud83e\udd73\\n\\nLastly, here is a small example that shows how to add a few Tailwind plugins for the adventurous ([wasp file](https://github.com/wasp-lang/wasp/blob/main/waspc/examples/todoApp/todoApp.wasp#L8-L9) and [Tailwind config](https://github.com/wasp-lang/wasp/blob/main/waspc/examples/todoApp/tailwind.config.cjs#L10-L11)), and [here](/docs/integrations/css-frameworks) are the docs for more details. We can\u2019t wait to see what you make!"},{"id":"/2022/11/15/auth-feature-announcement","metadata":{"permalink":"/wasp-docs/blog/2022/11/15/auth-feature-announcement","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-11-15-auth-feature-announcement.md","source":"@site/blog/2022-11-15-auth-feature-announcement.md","title":"Feature Announcement - New auth method (Google)","description":"<img alt=\\"No login for you!\\"","date":"2022-11-15T00:00:00.000Z","formattedDate":"November 15, 2022","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"feature","permalink":"/wasp-docs/blog/tags/feature"},{"label":"auth","permalink":"/wasp-docs/blog/tags/auth"}],"readingTime":3.38,"hasTruncateMarker":true,"authors":[{"name":"Shayne Czyzewski","title":"Founding Engineer @ Wasp","url":"https://github.com/shayneczyzewski","imageURL":"https://github.com/shayneczyzewski.png","key":"shayneczyzewski"}],"frontMatter":{"title":"Feature Announcement - New auth method (Google)","authors":["shayneczyzewski"],"image":"/img/auth-hero.png","tags":["webdev","wasp","feature","auth"]},"prevItem":{"title":"Feature Announcement - Tailwind CSS support","permalink":"/wasp-docs/blog/2022/11/16/tailwind-feature-announcement"},"nextItem":{"title":"Farnance: How Julian built a SaaS for farmers with Wasp and won a hackathon!","permalink":"/wasp-docs/blog/2022/10/28/farnance-hackathon-winner"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<p align=\\"center\\">\\n  <img alt=\\"No login for you!\\"\\n      src={useBaseUrl(\'img/auth-hero.png\')}\\n      width=\\"300px\\"\\n  />\\n</p>\\n\\n\x3c!--truncate--\x3e\\n\\n<WaspIntro />\\n<InBlogCta />\\n\\n## Prologue\\n\\nWe\'ve all been there. Your app needs to support user authentication with social login, and you must now decide what to do next. Should you eschew the collective experience and wisdom of the crowd and YOLO it by rolling your own, praying you don\'t get pwned in prod? \\"Nah, I just ate some week-old sushi and can\'t take another risk that big anytime soon.\\", you rightly think.\\n\\nOk, surely you can just use a library, right? Open source software, baby! \\"Hmm, seems Library X, Y, and Z are all somewhat used, each with their pros/cons, nuances, and integration pain points. Oh wait, there are tutorials for each... but each says how hard they are to correctly set up and use. I scoped this feature for one day, not a one-week hair-pulling adventure (Dang scrum! Who likes it anyways? Oh yeah, PMs do. Dang PMs!).\\" Ok, something else. You need to brainstorm. `You instead start to surf Twitter and see an ad for some unicorn auth startup.`\\n\\nEureka, you can go with a third-party SaaS offering! \\"We shouldn\'t have to pay for a while (I ~~think?~~ hope!), and it\'s just another dependency, no biggie... #microservices, right?\\" \\"But what about outages, data privacy, mapping users between systems, and all that implicit trust you are placing in them?\\" you think. \\"What happens when Elon buys them next?\\" You gasp as if you walked by a Patagonia vest covered in that hot new *Burnt Hair* cologne.\\n\\n\\"All I want is username and password auth with Google login support, why is that so hard in 2022?!? I miss Basic HTTP auth headers. I think I\'ll move off the grid and become a woodworker.\\"\\n\\n## Easy auth setup in Wasp\\n\\nWasp helps that dev by taking care of the entire auth setup process out of the box. Adding support for username and password auth, plus Google login, is super quick and easy for Wasp apps. We think this makes adding auth fast and convenient, with no external dependencies or frustrating manual configuration. Here\u2019s how it works:\\n\\n### Step 1 - Add the appropriate models\\n\\nWe need to store user info and the external mapping association for social logins. Here is an example you can start from and add new fields to:\\n\\n```sql title=\\"./main.wasp\\"\\nentity User {=psl\\n    id                        Int           @id @default(autoincrement())\\n    username                  String        @unique\\n    password                  String\\n    externalAuthAssociations  SocialLogin[]\\npsl=}\\n\\nentity SocialLogin {=psl\\n  id          Int       @id @default(autoincrement())\\n  provider    String\\n  providerId  String\\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\\n  userId      Int\\n  createdAt   DateTime  @default(now())\\n  @@unique([provider, providerId, userId])\\npsl=}\\n```\\n\\n### Step 2 - Update `app.auth` to use these items\\n\\n```wasp title=\\"./main.wasp\\"\\napp authExample {\\n  // ...\\n  auth: {\\n    userEntity: User,\\n    externalAuthEntity: SocialLogin,\\n    methods: {\\n      usernameAndPassword: {},\\n      google: {}\\n    },\\n    onAuthFailedRedirectTo: \\"/login\\"\\n  }\\n}\\n```\\n\\n### Step 3 - Get Google credentials and add environment variables\\n\\nFollow the Google setup guide [here](https://wasp-lang.dev/docs/integrations/google) and add the environment variables to your `.env.server` file.\\n\\n### Step 4 - Make use of the Google login button in your `Login` page component\\n\\n```jsx title=\\"./src/client/auth/Login.js\\"\\nimport React from \'react\'\\nimport { Link } from \'react-router-dom\'\\n\\nimport { SignInButton as GoogleSignInButton } from \'@wasp/auth/helpers/Google\'\\nimport LoginForm from \'@wasp/auth/forms/Login\'\\n\\nconst Login = () => {\\n  return (\\n    <div>\\n      <div>\\n        <LoginForm/>\\n      </div>\\n      <div>\\n        I don\'t have an account yet (<Link to=\\"/signup\\">go to signup</Link>).\\n      </div>\\n      <div>\\n        <GoogleSignInButton/>\\n      </div>\\n    </div>\\n  )\\n}\\n\\nexport default Login\\n```\\n\\n### Step 5 - Run the app!\\n\\n## Epilogue\\n\\nNo need to move off the grid out of frustration when adding authentication and social login to your web app. [Here](https://github.com/shayneczyzewski/authExample) is a complete, minimal example if you want to jump right in, and [here](/docs/auth/overview) are the full docs for more info. With just a few simple steps above, we\'ve added authentication with best practices baked into our app so we can move on to solving problems that add value to our users!"},{"id":"/2022/10/28/farnance-hackathon-winner","metadata":{"permalink":"/wasp-docs/blog/2022/10/28/farnance-hackathon-winner","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-10-28-farnance-hackathon-winner.md","source":"@site/blog/2022-10-28-farnance-hackathon-winner.md","title":"Farnance: How Julian built a SaaS for farmers with Wasp and won a hackathon!","description":"farnance hero shot","date":"2022-10-28T00:00:00.000Z","formattedDate":"October 28, 2022","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"startups","permalink":"/wasp-docs/blog/tags/startups"},{"label":"github","permalink":"/wasp-docs/blog/tags/github"}],"readingTime":3.755,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"Farnance: How Julian built a SaaS for farmers with Wasp and won a hackathon!","authors":["matijasos"],"image":"/img/farnance/farnance-hero-shot.png","tags":["webdev","wasp","startups","github"]},"prevItem":{"title":"Feature Announcement - New auth method (Google)","permalink":"/wasp-docs/blog/2022/11/15/auth-feature-announcement"},"nextItem":{"title":"How Wasp reached 1,000 stars on GitHub (detailed stats & timeline)","permalink":"/wasp-docs/blog/2022/09/29/journey-to-1000-gh-stars"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n\\n![farnance hero shot](../static/img/farnance/farnance-hero-shot.png)\\n\\n\\n[Julian LaNeve](https://jlaneve.github.io/) is an engineer and data scientist who currently works at [Astronomer.io](http://Astronomer.io) as a Product Manager. In his free time, he enjoys playing poker, chess and [winning](https://www.smudailycampus.com/news/smu-graduate-julian-laneve-wins-100k-grand-prize-from-data-science-competition) data science competitions.\\n\\nHis project, [Farnance](https://farnance.netlify.app/), is a SaaS marketplace that allows farmers to transform their production into a digital asset on blockchain. Julian and his team developed Farnance as a part of the London Business School\u2019s annual hackathon [HackLBS 2021](https://hacklbs.devpost.com/), and ended up as winners among more than 250 participants competing for 6 prizes in total!\\n\\nRead on to learn why Julian chose Wasp to develop and deploy Farnance and what parts he enjoyed the most.\\n\\n\x3c!--truncate--\x3e\\n\\n## Finding a perfect React & Node.js hackathon setup\\n\\nJulian had previous experiences with React and Node.js and loved that he could use JavaScript across the stack, but setting up a new project and making sure it uses all the latest packages (and then also figuring out how to deploy it) was always a pain. Since the hackathon only lasted for two days, he needed a quick way to get started but still have the freedom to use his favourite stack.\\n\\n## The power of one-line auth and No-API approach\\n\\nJulian first learned about Wasp when it [launched on HN](https://news.ycombinator.com/item?id=26091956) and decided it would be a perfect tool for his case. The whole app setup, across the full stack, is covered out-of-the-box, simply by typing `wasp new farnance`, and he is ready to start writing own React & Node.js code.\\n\\nExcept on the app setup, the team saved a ton of time by not needing to implement the authentication and a typical CRUD API, since it is covered by Wasp as well. They could also deploy everything for free on Heroku and Netlify in just a few steps, which was a perfect fit for a hackathon.\\n\\n<ImgWithCaption\\n    alt=\\"Julian\'s testimonial on Discord\\"\\n    source=\\"img/farnance/julian-discord-testimonial.png\\"\\n/>\\n\\nFarnance is still running and you can [try it out here](https://farnance.netlify.app/)! The source code is also [publicly available](https://github.com/jlaneve/Farnance), although note it is running on older version of Wasp so some things are a bit different.\\n\\n## Spend more time developing features and less time reinventing the wheel\\n\\nJulian was amazed by how fast he was able to get Farnance of the ground and share a working web app with the users! He decided to go with Google\'s material-ui for an UI framework which gave his app an instant professional look, although they didn\u2019t have a dedicated designer on the team.\\n\\nWith all the common web app features (setup, auth, CRUD API) being taken care of by Wasp out-of-the-box they could invest all the time saved in developing and refining their unique features which in the end brought them victory!\\n\\n> I\u2019ve done plenty of hackathons before where I\u2019ve built small SaaS apps, and there\u2019s just so much time wasted setting up common utilities - stuff like user management, databases, routing, etc. Wasp handled all that for me and let me build out our web app in record time\\n>\\n> \u2014 Julian LaNeve - Farnance\\n\\n<ImgWithCaption\\n    alt=\\"Farnance\'s dashboard\\"\\n    source=\\"img/farnance/farnance-dashboard.png\\"\\n    caption=\\"Farnance dashboard in action!\\"\\n/>\\n\\n\\n## Start quickly, but also scale without worries\\n\\n:::note\\nHeroku used to offer free apps under certain limits. However, as of November 28, 2022, they ended support for their free tier. https://blog.heroku.com/next-chapter\\n\\nAs such, we have updated our Deployment docs with new recommendations: https://wasp-lang.dev/docs/deploying\\n:::\\n\\nSince Wasp compiler generates a full-stack React & Node.js app under the hood, there aren\u2019t any technical limitations to scaling Julian\u2019s app as it grows and gets more users in the future. By running `wasp build` inside a project folder, developers gets both frontend files and a Dockerfile for the backend, which can then be deployed as any regular web app to the platform of your choice.\\n\\nWasp provides [step-by step instructions](/docs/deploying) on how to do it with Netlify and Fly.io for free, but we plan to add even more examples and more integrated deployment experience in the coming releases!\\n\\n> Deploying the wasp app was incredibly easy - I didn\u2019t have time to stand up full infrastructure in the 2 day hackathon and don\u2019t have an infra/devops background, but I had something running on Netlify within an hour. Other projects at the hackathon struggled to do this, and putting access in the hands of the judges certainly helped get us 1st place.\\n>\\n> \u2014 Julian LaNeve - Farnance"},{"id":"/2022/09/29/journey-to-1000-gh-stars","metadata":{"permalink":"/wasp-docs/blog/2022/09/29/journey-to-1000-gh-stars","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-09-29-journey-to-1000-gh-stars.md","source":"@site/blog/2022-09-29-journey-to-1000-gh-stars.md","title":"How Wasp reached 1,000 stars on GitHub (detailed stats & timeline)","description":"Wasp is an open-source configuration language for building full-stack web apps that integrates with React & Node.js. We launched first prototype 2 years ago, currently are at 1.9k stars on GitHub and will be releasing Beta in the coming months.","date":"2022-09-29T00:00:00.000Z","formattedDate":"September 29, 2022","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"startups","permalink":"/wasp-docs/blog/tags/startups"},{"label":"github","permalink":"/wasp-docs/blog/tags/github"}],"readingTime":11.585,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"How Wasp reached 1,000 stars on GitHub (detailed stats & timeline)","authors":["matijasos"],"image":"/img/1000-gh-stars/1k_gh_stars_chart.png","tags":["webdev","wasp","startups","github"]},"prevItem":{"title":"Farnance: How Julian built a SaaS for farmers with Wasp and won a hackathon!","permalink":"/wasp-docs/blog/2022/10/28/farnance-hackathon-winner"},"nextItem":{"title":"Building an app to find an excuse for our sloppy work","permalink":"/wasp-docs/blog/2022/09/05/dev-excuses-app-tutrial"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n\\nWasp is an open-source configuration language for building full-stack web apps that integrates with React & Node.js. We launched first prototype 2 years ago, currently are at 1.9k stars on GitHub and will be releasing Beta in the coming months.\\n\\nIt was very hard for us to find and be able to learn from early inception stories of successful OSS projects and that\'s why we want to share what it looked like for Wasp.\\n\\n\\n![1k stars chart](../static/img/1000-gh-stars/1k_gh_stars_chart.png)\\n\\n\x3c!--truncate--\x3e\\n\\n## Before the stars: Is this really a problem? (1 year)\\n\\nMy co-founder and twin brother Martin and I got an initial idea for Wasp in 2018, while developing a web platform for running bioinformatics analysis in the cloud for one London-based startup.\\n\\nIt was our third or fourth time creating a full-stack app from scratch with the latest & hottest stack. This time, it was React/Node.js; for our previous projects, we went through PHP/Java/Node.js on the back-end and jQuery/Backbone/Angular on the front-end. Because Martin and I felt we were spending a lot of time relearning how to use the latest stack just to build the same features all over again (auth, CRUD, forms, async jobs, etc.), we asked ourselves: *Why not abstract these common functionalities in a stack-agnostic, higher-level language (like e.g. SQL does for databases) to never reimplement them again?*\\n\\nBefore we jumped into coding, we wanted to make sure this is a problem that actually exists and that we understand it well (enough). In our previous startup we found Customer Development (aka talking to users) extremely helpful, so we decided to do it again for Wasp.\\n\\nIn a month or so we conducted 25 problem interviews, probing around \u201cWhat is your biggest challenge with web app development?\u201d After we compiled the results, we identified the following four problems as the most significant ones and decided to focus on them in our v1:\\n\\n- It is hard to **quickly start** a new web app and make sure **the best practices are being followed**.\\n- There is a lot of duplication/boilerplate in **managing the state** across front-end, back-end, and the database.\\n- A lot of **common features are re-implemented** for every new app.\\n- Developers are overwhelmed by the **increasing tool complexity** and don\'t want to be responsible for managing it.\\n\\nWe also clustered the answers we got by topics, so we could dive deeper and identify the areas that got the most attention:\\n<ImgWithCaption\\n    alt=\\"Start and setup of a web app - problems\\"\\n    source=\\"img/1000-gh-stars/wasp-cust-dev-start-and-setup.png\\"\\n    caption=\\"Interviewee problems regarding starting and setting up a new web app.\\"\\n/>\\nThe reason why we stopped at 25 was that the answers started repeating themselves. We felt that we identified the initial patterns and were ready to move on.\\n\\n## 0-180 \u2b50\ufe0f: First Contact (7 months)\\nAfter confirming and clarifying the problem with other developers, Martin and I felt we finally deserved to do some coding. (Ok, I admit, we had actually already started, but the interviews made us feel better about it \ud83d\ude00). We created a new repo on GitHub and started setting up the tooling & playing around with the concept.\\n\\nFor the next couple of months, we treated Wasp as a side project/experiment and didn\u2019t do any marketing. However, we were well aware of how crucial external feedback is. So, once we built a very rudimentary code generation functionality, we also created a project page that we could share with others to explain what we\u2019re working on and ask for feedback.\\n\\nAt that point, we came up with the first \u201creal\u201d name for Wasp - **STIC: Specification To Implementation Compiler**, as the big vision for Wasp was to be a stack-agnostic, specification language from which we could generate the actual code in e.g. React & Node.js or even some other stack.\\n\\n<ImgWithCaption\\n    alt=\\"STIC - first project page\\"\\n    source=\\"img/1000-gh-stars/stic-project-page.png\\"\\n    caption=\\"Our first page for Wasp! Not the best at explaining what Wasp does, though.\\"\\n/>\\n\\n### Baby steps on Reddit and Hacker News\\n\\nOur preferred way of distributing STIC project page was through relevant subreddits - r/webdev, r/coding, r/javascript, r/Haskell, r/ProgrammingLanguages, \u2026. \\n\\n[This](https://www.reddit.com/r/javascript/comments/f38h1t/askjs_we_are_developing_a_declarative_dsl_for/) was the first Reddit post we\u2019ve ever made about Wasp:\\n\\n<ImgWithCaption\\n    alt=\\"First Wasp post on Reddit\\"\\n    source=\\"img/1000-gh-stars/wasp-reddit-first-post.png\\"\\n    caption=\\"Our first Reddit post! We managed to get some feedback before we got banned.\\"\\n/>\\n\\nOne important thing we learned is that Reddit doesn\u2019t like self-promotion. Sometimes, even if you\u2019re only asking for feedback, the mods (and bots) will see it as self-promo and ban your post. It depends a lot on the mods, though. Reaching out to them and asking for explanation sometimes helps, but not very often. All subreddits have their own rules and guidelines that describe when or how it is OK to post about your project (e.g., /r/webdev has \u201cShowoff Saturdays\u201d), and we tried to follow them as best as we could.\\n\\nAfter Reddit, we also launched on HN. This was our first ever launch there! We scored 20 points and received a few motivating comments:\\n\\n<ImgWithCaption\\n    alt=\\"First Wasp post on Reddit\\"\\n    source=\\"img/1000-gh-stars/first-hn-launch.png\\"\\n/>\\n\\n### Listening to users\\nMartin and I also followed up with the people we had previously interviewed about their problems in web dev. We showed them STIC project page and asked for comments. From all the feedback we captured, we identified the following issues:\\n\\n- **Developers were not familiar with a term \u201cDSL.\u201d** Almost all of us use a DSL on a daily basis (e.g., SQL, HCL (Terraform), HTML), but it\u2019s not a popular term.\\n- **Developers feared learning a new programming language**. Although our goal was never to replace e.g. Java or Typescript but to make Wasp work alongside it, we discovered that we had failed to communicate it well. Our messaging made developers feel they have to drop all their previous knowledge and start from scratch if they want to use Wasp.\\n- **Nobody could try Wasp yet + there wasn\u2019t any documentation besides the project page**. Our code was public, but we didn\u2019t have a build/distribution system yet. Only a devoted Haskell developer could build it from the source. This made it hard for developers to buy into the high-level vision, as there was nothing they could hold onto. Web frameworks/languages are very \u201ctactile\u201d \u2014 it\u2019s hard to judge one without trying it out.\\n\\n## 180-300 \u2b50\ufe0f : Anybody can try Wasp out + Docs = Alpha! (3 months)\\nAfter processing this feedback, we realized that the next step for us was to get Wasp into the condition where developers can easily try it out without needing any extra knowledge or facing the trouble of compiling from the source. That meant polishing things a bit, adding a few crucial features, and writing our first documentation, so that users would know how to use it.\\n\\nTo write our docs, we picked [Docusaurus](https://docusaurus.io/) \u2014 an OSS writing platform made by Facebook. We saw several other OSS projects using it for their docs + its ability to import React in your markdown was amazing. Docusaurus gave us a lot of initial structure, design and features (e.g., search), saving us from reinventing the wheel.\\n\\n<ImgWithCaption\\n    alt=\\"First Wasp docs\\"\\n    source=\\"img/1000-gh-stars/first-docs.png\\"\\n    caption=\\"Martin made sure to add a huge Alpha warning sign :D\\"\\n/>\\n\\nOur M.O. at the time was to focus pretty much exclusively on one thing, either development or community. Since Wasp team consisted of only Martin and me, it was really hard to do multiple things at once. After the docs were out and Wasp was ready to be easily downloaded, we called this version \u201cAlpha\u201d and switched once again into the \u201ccommunity\u201d mode.\\n\\n## 300-570 \u2b50\ufe0f : Big break on Reddit and Product Hunt (2 months)\\n\\nOnce Alpha was out, we [launched again on HackerNews](https://news.ycombinator.com/submitted?id=matijash) and drew a bit of attention (34 upvotes and 3 comments). However, that was little compared to our Reddit launches, where we scored 263 upvotes on [r/javascript](https://www.reddit.com/r/javascript/comments/jvv1yg/together_with_my_brother_ive_been_working_on_wasp/) and 365 upvotes on [r/reactjs](https://www.reddit.com/r/reactjs/comments/jx5fyg/together_with_my_brother_ive_been_working_on_wasp/):\\n\\n<ImgWithCaption\\n    alt=\\"Big break on Reddit\\"\\n    source=\\"img/1000-gh-stars/reddit-big-break.png\\"\\n    caption=\\"They love me! [insert Tobey Maguire as Spiderman]\\"\\n/>\\n\\nCompared to the volume of attention and feedback we\u2019ve been previously receiving, this was a big surprise for us! Here are some of the changes in messaging that we made for the Reddit launches:\\n\\n- **Put prefix \u201cdeclarative\u201d in front of the \u201clanguage\u201d** to convey that it\u2019s not a regular programming language like Python or Javascript but rather something much more lightweight and specialized.\\n- **Emphasized that Wasp is not a standalone language that will replace your current stack** but rather a \u201cglue\u201d between your React & Node.js code, allowing you to keep using your favourite stack.\\n- **Focused on the benefits like \u201cless boilerplate,\u201d** which is a well known pain in web development.\\n\\n:::tip Docs made the difference\\n \\nOnce we added the docs, we noticed a peculiar thing: **developers became much less trigger-happy to criticize the project, especially in a non-constructive way**. Our feeling was the majority of developers who were checking Wasp out still didn\u2019t read the docs in detail (or at all), but the sheer existence of them made them feel there is more content they should go through before passing the final judgment.\\n\\n:::\\n\\n### Winning #1 Product of The Day on Product Hunt\\n\\nAfter HN and Reddit, we continued with the \u201cAlpha launch\u201d mindset and set ourselves to launch Wasp on Product Hunt. It was our first time ever launching on PH, so we didn\u2019t know what to expect. We googled some advice, did maybe a week of preparation (i.e., wrote the copy, asked a few friends to share their experiences with Wasp once we\u2019re live), and that was it.\\n\\nWe launched [Wasp on PH on Dec 6, 2020](https://www.producthunt.com/products/wasp-lang-alpha#wasp-lang-alpha) and it ended up as Product of the day! That gave us a boost in stars and overall traction. Another benefit of PH was that Wasp also ended up in their daily newsletter, which supposedly has over a million subscribers. All this gave us quite a boost and visibility increase.\\n\\n<ImgWithCaption\\n    alt=\\"Product Hunt launch\\"\\n    source=\\"img/1000-gh-stars/ph-launch.png\\"\\n/>\\n\\n## 570-1000 \u2b50\ufe0f : Wasp joins YC + \u201cOfficial\u201d HN launch (2.5 months)\\n\\nSoon after Product Hunt, Wasp joined Y Combinator for their W21 batch. We had applied two times before and always made it to the interviews, but did not get in. This time, the traction tipped the scales in our favour. (You can read more about our journey to YC [here](https://wasp-lang.dev/blog/2021/02/23/journey-to-ycombinator).)\\n\\nFor the first month of YC, there was a lot of admin and setup work to deal with alongside the regular program. That added a third dimension to our existing two areas of effort. Once we went past that, we could again put more focus on product and community development. \\n\\nOur next milestone was to launch Wasp on Hacker News, but this time \u201cofficially\u201d as a YC-backed company. **Hacker News provides a lot of [good tips](https://news.ycombinator.com/yli.html) on how to successfully launch and 80% of the advice applies even if your product isn\u2019t backed by YC**. I wish I had known about it before. The gist of the advice is to write in a clear and succinct way and to avoid buzzwords, superlatives, and salesy tone above all. Consider HN readers as your peers and explain what you do in a way you would talk to a friend over a drink. It really works that way.\\n\\nWe went through the several iterations of the text, sweated over how it\u2019s gonna go, and when the day finally came \u2014 we launched! It went beyond all our expectations. With 222 points and 79 comments, **our HN launch was one of the most successful launches (#9) out of 300+ companies in the W21 batch.** Many developers and VCs that checked our launch afterwards were surprised how much positive feedback Wasp received, especially given how honest and direct HN audience can be.\\n\\n**HN launch brought us about 200 stars right away**, and the rest came in the following weeks. As it was February and the YC program was nearing its end, we  needed to shift gears again and focus on fundraising. This put all the other efforts on the back burner. (You can read about our fundraising learnings from 250+ meetings in 98 days [here](https://wasp-lang.dev/blog/2021/11/22/fundraising-learnings).) But the interest of the community remained and even without much activity from our side they kept coming and trying Wasp out.\\n\\n<ImgWithCaption\\n    alt=\\"YC HN launch\\"\\n    source=\\"img/1000-gh-stars/yc-hn-launch.png\\"\\n/>\\n\\n## Conclusion: understanding users > number of stars\\n\\nOur primary goal was never to reach X stars, but rather to understand how we can make Wasp more helpful so that developers would want to use it for their projects. As you could read above, even well before we started a repository we made sure to talk to developers and learn about their problems.\\n\\nWe also kept continually improving how we present Wasp - had we not pivoted our message from *\u201cWasp is a new programming language\u201d* to *\u201cWasp is a simple config language that works alongside React & Node.js\u201d* we wouldn\u2019t have been where we are today.\\n\\nOn the other hand, stars have become an unofficial \u201ccurrency\u201d of GitHub and developers and VCs alike consider it when evaluating a project. They shouldn\u2019t be disregarded and you should make it easy for users who like your product to express their support by starring your repo (like I\u2019m doing right [here](https://github.com/wasp-lang/wasp)), but that should always be a second order of concern.\\n\\n## Good luck!\\n\\nI hope you found this helpful and that we shed some light on how things can look like in the early stages of an OSS project. Also, keep in mind this was our singular experience and that every story is different, so take everything with a grain of salt and pick only what makes sense for you and your product.\\n\\nWe wish you the best of luck and feel free to reach out if you\'ll have any questions!"},{"id":"/2022/09/05/dev-excuses-app-tutrial","metadata":{"permalink":"/wasp-docs/blog/2022/09/05/dev-excuses-app-tutrial","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-09-05-dev-excuses-app-tutrial.md","source":"@site/blog/2022-09-05-dev-excuses-app-tutrial.md","title":"Building an app to find an excuse for our sloppy work","description":"We\u2019ll build a web app to solve every developer\'s most common problem \u2013 finding an excuse to justify our messy work! And will do it with a single config file that covers the full-stack app architecture plus several dozen lines of code. In the quickest possible way, so we can\u2019t excuse ourselves from building it!","date":"2022-09-05T00:00:00.000Z","formattedDate":"September 5, 2022","tags":[{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"}],"readingTime":7.445,"hasTruncateMarker":true,"authors":[{"name":"Maksym Khamrovskyi","title":"DevRel @ Wasp","key":"maksym36ua"}],"frontMatter":{"title":"Building an app to find an excuse for our sloppy work","authors":["maksym36ua"],"tags":["wasp"]},"prevItem":{"title":"How Wasp reached 1,000 stars on GitHub (detailed stats & timeline)","permalink":"/wasp-docs/blog/2022/09/29/journey-to-1000-gh-stars"},"nextItem":{"title":"How to get started with Haskell in 2022 (the straightforward way)","permalink":"/wasp-docs/blog/2022/09/02/how-to-get-started-with-haskell-in-2022"}},"content":"import InBlogCta from \'./components/InBlogCta\';\\n\\nWe\u2019ll build a web app to solve every developer\'s most common problem \u2013 finding an excuse to justify our messy work! And will do it with a single config file that covers the full-stack app architecture plus several dozen lines of code. In the quickest possible way, so we can\u2019t excuse ourselves from building it!\\n\\n![Best excuse of all time](../static/img/compiling.png)\\n\\nBest excuse of all time! [Taken from here.](https://xkcd.com/303/)\\n\\n\x3c!--truncate--\x3e\\n\\n## The requirements were unclear.\\n\\nWe\u2019ll use Michele Gerarduzzi\u2019s [open-source project](https://github.com/michelegera/devexcuses-api). It provides a simple API and a solid number of predefined excuses. A perfect fit for our needs. Let\u2019s define the requirements for the project: \\n\\n- The app should be able to pull excuses data from a public API. \\n- Save the ones you liked (and your boss doesn\'t) to the database for future reference.\\n- Building an app shouldn\u2019t take more than 15 minutes.\\n- Use modern web dev technologies (NodeJS + React)\\n\\nAs a result \u2013 we\u2019ll get a simple and fun pet project. You can find the complete codebase [here](https://github.com/wasp-lang/wasp/tree/590a08bb14284835c9785d416980da61fe9e0db0/examples/tutorials/ItWaspsOnMyMachine). \\n\\n![Final result](../static/img/final-excuse-app.png)\\n\\n\\n## There\u2019s an issue with the third party library.\\n\\nSetting up a backbone for the project is the most frustrating part of building any application. \\n\\nWe are installing dependencies, tying up the back-end and front-end, setting up a database, managing connection strings, and so on. Avoiding this part will save us a ton of time and effort. So let\u2019s find ourselves an excuse to skip the initial project setup.\\n\\nIdeally \u2013 use a framework that will create a project infrastructure quickly with the best defaults so that we\u2019ll focus on the business logic. A perfect candidate is [Wasp](https://wasp-lang.dev/). It\u2019s an open-source, declarative DSL for building web apps in React and Node.js with no boilerplate\\n\\nHow it works: developer starts from a single config file that specifies the app architecture. Routes, CRUD API, auth, and so on. Then adds React/Node.js code for the specific business logic. Behind the scenes, Wasp compiler will produce the entire source code of the app - back-end, front-end, deployment template, database migrations and everything else you\u2019ve used to have in any other full-stack app. \\n\\n![Wasp architecture](../static/img/wasp-compilation.png)\\n\\nSo let\u2019s jump right in.\\n\\n\\n## Maybe something\'s wrong with the environment.\\n\\nWasp intentionally works with the LTS Node.js version since it guarantees stability and active maintenance. As for now, it\u2019s Node 16 and NPM 8. If you need another Node version for some other project \u2013 there\u2019s a possibility to [use NVM](https://wasp-lang.dev/docs#1-requirements) to manage multiple Node versions on your computer at the same time.\\n\\nInstalling Wasp on Linux (for Mac/Windows, please [check the docs](https://wasp-lang.dev/docs#2-installation)):\\n```\\ncurl -sSL https://get.wasp-lang.dev/installer.sh | sh\\n```\\n\\nNow let\u2019s create a new web app named ItWaspsOnMyMachine.\\n```\\nwasp new ItWaspsOnMyMachine\\n```\\n\\nChanging the working directory:\\n```\\ncd ItWaspsOnMyMachine\\n```\\n\\nStarting the app:\\n```\\nwasp start\\n```\\n\\nNow your default browser should open up with a simple predefined text message. That\u2019s it! \ud83e\udd73 We\u2019ve built and run a NodeJS + React application. And for now \u2013 the codebase consists of only two files! `main.wasp` is the config file that defines the application\u2019s functionality. And `MainPage.js` is the front-end.\\n\\n![Initial page](../static/img/init-page.png)\\n\\n\\n## That worked perfectly when I developed it.\\n\\n\\n**1) Let\u2019s add some additional configuration to our `main.wasp` file. So it will look like this:**\\n\\n```js title=\\"main.wasp | Defining Excuse entity, queries and action\\"\\n\\n// Main declaration, defines a new web app.\\napp ItWaspsOnMyMachine {\\n  // Wasp compiler configuration\\n  wasp: {\\n    version: \\"^0.6.0\\"\\n  },\\n\\n  // Used as a browser tab title.                                  \\n  title: \\"It Wasps On My Machine\\",\\n\\n  head: [\\n    // Adding Tailwind to make our UI prettier\\n    \\"<script src=\'https://cdn.tailwindcss.com\'><\/script>\\"\\n  ],\\n\\n  dependencies: [ \\n    // Adding Axios for making HTTP requests                                          \\n    (\\"axios\\", \\"^0.21.1\\")\\n  ]\\n}\\n\\n// Render page MainPage on url `/` (default url).\\nroute RootRoute { path: \\"/\\", to: MainPage }                 \\n\\n// ReactJS implementation of our page located in `src/client/MainPage.js` as a default export.\\npage MainPage {                                             \\n  component: import Main from \\"@client/MainPage.js\\"\\n}\\n\\n// Prisma database entity\\nentity Excuse {=psl                                          \\n    id          Int     @id @default(autoincrement())\\n    text        String\\npsl=}\\n\\n// Query declaration to get a new excuse\\nquery getExcuse {                                           \\n  fn: import { getExcuse } from \\"@server/queries.js\\",\\n  entities: [Excuse]\\n}\\n\\n// Query declaration to get all excuses\\nquery getAllSavedExcuses {                                  \\n  fn: import { getAllSavedExcuses } from \\"@server/queries.js\\",\\n  entities: [Excuse]\\n}\\n\\n// Action to save current excuse\\naction saveExcuse {                                         \\n  fn: import { saveExcuse } from \\"@server/actions.js\\",\\n  entities: [Excuse]\\n}\\n```\\n\\nWe\u2019ve added Tailwind to make our UI more pretty and Axios for making API requests. \\n\\nAlso, we\u2019ve declared a database entity called `Excuse`, queries, and action. The `Excuse` entity consists of the entity\u2019s ID and the text. \\n\\n`Queries` are here when we need to fetch/read something, while `actions` are here when we need to change/update data. Both query and action declaration consists of two lines \u2013 a reference to the file that contains implementation and a data model to operate on. You can find more info [in the docs](/docs/data-model/operations/overview). So let\u2019s proceed with queries/actions.\\n\\n\\n**2) Create two files: \u201cactions.js\u201d and \u201cqueries.js\u201d in the `src/server` folder.**\\n\\n```js title=\\"src/server/actions.js | Defining an action\\"\\nexport const saveExcuse = async (excuse, context) => {\\n  return context.entities.Excuse.create({\\n    data: { text: excuse.text }\\n  })\\n}\\n```\\n\\n```js title=\\"src/server/queries.js | Defining queries\\"\\nimport axios from \'axios\';\\n\\nexport const getExcuse = async () => {\\n  const response = await axios.get(\'https://api.devexcus.es/\')\\n  return response.data\\n}\\n\\nexport const getAllSavedExcuses = async (_args, context) => {\\n  return context.entities.Excuse.findMany()\\n}\\n```\\n\\nLet\u2019s add `saveExcuse()` action to our `actions.js` file. This action will save the text of our excuse to the database. Then let\u2019s create two queries in the `queries.js` file. First, one `getExcuse` will call an external API and fetch a new excuse. The second one, named `getAllSavedExcuses`, will pull all the excuses we\u2019ve saved to our database. \\n\\nThat\u2019s it! We finished our back-end. \ud83c\udf89 Now, let\u2019s use those queries/actions on our UI.\\n\\n\\n**3) Let\u2019s erase everything we had in the `MainPage.js` file and substitute it with our new UI.**\\n\\n```js title=\\"src/client/MainPage.js | Updating the UI\\"\\nimport React, { useState } from \'react\'\\nimport { useQuery } from \'@wasp/queries\'\\nimport getExcuse from \'@wasp/queries/getExcuse\'\\nimport getAllSavedExcuses from \'@wasp/queries/getAllSavedExcuses\'\\nimport saveExcuse from \'@wasp/actions/saveExcuse\'\\n\\nconst MainPage = () => {\\n  const [currentExcuse, setCurrentExcuse] = useState({ text: \\"\\" })\\n  const { data: excuses } = useQuery(getAllSavedExcuses)\\n\\n  const handleGetExcuse = async () => {\\n    try {\\n      setCurrentExcuse(await getExcuse())\\n    } catch (err) {\\n      window.alert(\'Error while getting the excuse: \' + err.message)\\n    }\\n  }\\n\\n  const handleSaveExcuse = async () => {\\n    if (currentExcuse.text) {\\n      try {\\n        await saveExcuse(currentExcuse)\\n      } catch (err) {\\n        window.alert(\'Error while saving the excuse: \' + err.message)\\n      }\\n    }\\n  }\\n\\n  return (\\n    <div className=\\"grid grid-cols-2 text-3xl\\">\\n      <div>\\n          <button onClick={handleGetExcuse} className=\\"mx-2 my-1 p-2 bg-blue-600 hover:bg-blue-400 text-white rounded\\"> Get excuse </button>\\n          <button onClick={handleSaveExcuse} className=\\"mx-2 my-1 p-2 bg-blue-600 hover:bg-blue-400 text-white rounded\\"> Save excuse </button>\\n        <Excuse excuse={currentExcuse} />\\n      </div>\\n      <div>\\n        <div className=\\"px-6 py-2 bg-blue-600 text-white\\"> Saved excuses: </div>\\n        {excuses && <ExcuseList excuses={excuses} />}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst ExcuseList = (props) => { \\n  return props.excuses?.length ?  props.excuses.map((excuse, idx) => <Excuse excuse={excuse} key={idx} />) : \'No saved excuses\'\\n}\\n\\nconst Excuse = ({ excuse }) => {\\n  return (\\n    <div className=\\"px-6 py-2\\">\\n      {excuse.text}\\n    </div>\\n  )\\n}\\n\\nexport default MainPage\\n```\\n\\nOur page consists of three components. `MainPage`, `ExcuseList` and `Excuse`. It may seem at first that this file is pretty complex. It\u2019s not, so let\u2019s look a bit closer. \\n\\n`Excuse` is just a div with an excuse text, `ExcuseList` checks if there are any excuses. If the list is empty \u2013 show a message `No saved excuses`. In other case \u2013 excuses will be displayed. \\n\\n`MainPage` contains info about the current excuses and the list of already saved excuses. Two buttons click handlers `handleGetExcuse` and `handleSaveExcuse`. Plus, the markup itself with some Tailwind flavor. \\n\\n\\n**4) Before starting an app \u2013 we need to execute database migration because we changed the DB schema by adding new entities. If you\u2019ve had something running in the terminal \u2013 stop it and run:**\\n\\n```\\nwasp db migrate-dev\\n```\\n\\nYou\u2019ll be prompted to enter a name for the migration. Something like `init` will be ok. Now we can start the application!\\n\\n```\\nwasp start\\n```\\n\\n![Final empty result](../static/img/final-result.png)\\n\\nNow you can click the \u201cGet excuse\u201d button to receive an excuse. And save the ones you like into the DB with the \u201cSave excuse\u201d button. Our final project should look like this:\\n\\n![Final result](../static/img/final-excuse-app.png)\\n\\n\\n## It would have taken twice as long to build it properly.\\n\\nNow we can think of some additional improvements. For example:\\n \\n- 1) Add a unique constraint to Entity\u2019s ID so we won\u2019t be able to save duplicated excuses. \\n- 2) Add exceptions and edge cases handling. \\n- 3) Make the markup prettier.\\n- 4) Optimize and polish the code \\n\\nSo, we\u2019ve been able to build a full-stack application with a database and external API call in a couple of minutes. And now we have a box full of excuses for all our development needs. \\n\\n![Box of excuses for the win!](../static/img/accessible-website-excuse.jpg)\\n\\n<InBlogCta />"},{"id":"/2022/09/02/how-to-get-started-with-haskell-in-2022","metadata":{"permalink":"/wasp-docs/blog/2022/09/02/how-to-get-started-with-haskell-in-2022","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-09-02-how-to-get-started-with-haskell-in-2022.md","source":"@site/blog/2022-09-02-how-to-get-started-with-haskell-in-2022.md","title":"How to get started with Haskell in 2022 (the straightforward way)","description":"Haskell is a unique and beautiful language that is worth learning, if for nothing else, then just for the concepts it introduces and their potential to expand your view on programming.","date":"2022-09-02T00:00:00.000Z","formattedDate":"September 2, 2022","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"haskell","permalink":"/wasp-docs/blog/tags/haskell"},{"label":"language","permalink":"/wasp-docs/blog/tags/language"}],"readingTime":6.795,"hasTruncateMarker":true,"authors":[{"name":"Martin Sosic","title":"Co-founder & CTO @ Wasp","url":"https://github.com/martinsos","email":"martin@wasp-lang.dev","imageURL":"https://github.com/martinsos.png","key":"martinsos"}],"frontMatter":{"title":"How to get started with Haskell in 2022 (the straightforward way)","authors":["martinsos"],"tags":["webdev","haskell","language"]},"prevItem":{"title":"Building an app to find an excuse for our sloppy work","permalink":"/wasp-docs/blog/2022/09/05/dev-excuses-app-tutrial"},"nextItem":{"title":"How and why I got started with Haskell","permalink":"/wasp-docs/blog/2022/08/26/how-and-why-i-got-started-with-haskell"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n\\nHaskell is a unique and beautiful language that is worth learning, if for nothing else, then just for the concepts it introduces and their potential to expand your view on programming.\\n\\nI have been programming in Haskell on and off since 2011 and professionally for the past 2 years, building a [compiler](https://github.com/wasp-lang/wasp). While in that time Haskell has become much more beginner-friendly, I keep seeing beginners who are overwhelmed by numerous popular options for build tools, installers, introductory educational resources, and similar. [Haskell\u2019s homepage](https://www.haskell.org/) getting a call from the previous decade to give them their UX back :D also doesn\u2019t help!\\n\\nThat is why I decided to write this opinionated and practical post that will tell you exactly how to get started with Haskell in 2022 in the most standard / common way. Instead of worrying about decisions that you are not equipped to make at the moment (e.g. \u201cwhat is the best build tool?\u201d), you can focus on enjoying learning Haskell :)!\\n\\n\x3c!--truncate--\x3e\\n\\n## TLDR / Super opinionated summary\\n\\n1. For setup, use [GHCup](https://www.haskell.org/ghcup/). Install GHC, HLS, and cabal.\\n2. As a build tool, use [cabal](https://cabal.readthedocs.io/).\\n3. For editor, use VS Code with [Haskell extension](https://marketplace.visualstudio.com/items?itemName=haskell.haskell). Or, use emacs/vim/....\\n4. Join [r/haskell](https://www.reddit.com/r/haskell/). Feel free to ask for help!\\n5. To learn the basics of Haskell, read the [LYAH](http://learnyouahaskell.com/) book and [build a blog generator in Haskell](https://lhbg-book.link/). Focus on getting through stuff instead of understanding everything fully; you will come back to it later again.\\n\\n## 1. Setup: Use GHCup for seamless installation\\n\\n[GHCup](https://www.haskell.org/ghcup/#) is a universal installer for Haskell. It will install everything you need to program in Haskell and will help you manage those installations in the future (update, switch versions, and similar). It is simple to use and works the same way on Linux, macOS, and Windows. It gives you a single central place/method to take care of your Haskell installation so that you don\u2019t have to deal with OS-specific issues.\\n\\nTo install it, follow instructions at [GHCup](https://www.haskell.org/ghcup/#). Then, use it to install the Haskell Toolchain (aka stuff that you need to program in Haskell). \\n\\nHaskell Toolchain consists of:\\n\\n1. GHC -> Haskell compiler\\n2. HLS -> Haskell Language Server -> your code editor will use this to provide you with a great experience while editing Haskell code\\n3. cabal -> Haskell build tool -> you will use this to organize your Haskell projects, build them, run them, define dependencies, etc.\\n4. Stack -> cabal alternative, which you won\u2019t need for now since we\u2019ll go with cabal as our build tool of choice\\n\\n## 2. Build tool: Use cabal\\n\\nThere are two popular build tools for Haskell: [cabal](https://cabal.readthedocs.io/) and [Stack](https://docs.haskellstack.org/). Both are widely used and have their pros and cons. So, one of the hard choices beginners often face is which one to use.\\n\\nSome time ago, cabal was somewhat hard to use (complex, \u201cdependency hell\u201d). That\u2019s why Stack was created: a user-friendly build tool that solves some of the common issues of cabal. (Interestingly, Stack uses cabal\u2019s core library as its backend!) However, as Stack was being developed, cabal advanced, too. Many of its issues have been solved, making it a viable choice for beginners.\\n\\nIn 2022, I recommend `cabal` to beginners. I find it a bit easier to understand when starting out (no resolvers), it works well out of the box with GHCup and the rest of the ecosystem, and it seems to be better maintained lately. \\n\\n## 3. Editor: VS Code is a safe bet\\n\\nHLS (Haskell Language Server) brings all the cool IDE features to your editor. So, as long as your editor has a decent Haskell language extension that utilizes HLS, you are good.\\n\\nThe safest bet is to go with **Visual Studio Code** \u2014 it has a great [Haskell extension](https://marketplace.visualstudio.com/items?itemName=haskell.haskell) that usually works out of the box. A lot of Haskell programmers also use Emacs and Vim. I can confirm they also have good support for Haskell. \\n\\n## 4. Community: r/haskell and more\\n\\nHaskell community is a great place to ask for help and learn about new developments in the  ecosystem. I prefer [r/haskell](https://www.reddit.com/r/haskell/) -> it tracks all the newest events and no question goes unanswered. There is also [Haskell Discourse](https://discourse.haskell.org/), where a lot of discussions happen, including the more official ones. A lot of Haskellers are still active on [IRC](https://wiki.haskell.org/IRC_channel), but I find it too complex and outdated to use.\\n\\n*Check [https://www.haskell.org/community](https://www.haskell.org/community) for a full list of Haskell communities.*\\n\\n## 5. Learning: You don\u2019t need a math degree, just grab a book\\n\\nThere is a common myth going around that you need a special knowledge of math (PhD in category theory!) to be able to program in Haskell properly. From my experience, this is as far from the truth as it can be. It is certainly not needed, and I seriously doubt it helps even if you have it. Maybe for some very advanced Haskell stuff, but certainly not for junior/intermediate level.\\n\\nInstead, learning Haskell is the same as learning other languages -> you need a healthy mix of theory and practice. The main difference is that there will be more unusual/new concepts than you are used to, which will require some additional effort. But these new concepts are also what makes learning Haskell so fun!\\n\\nI recommend starting with a book for beginners, [LYAH](http://learnyouahaskell.com/). It has an online version that you can read for free, or you can buy a printed version if you like physical books.\\n\\nIf you don\'t like LYAH, consider other popular books for beginners (none of them are free though):\\n\\n1. [Haskell Programming from first principles](https://haskellbook.com/)\\n2. [Get Programming with Haskell](https://www.manning.com/books/get-programming-with-haskell)\\n3. [Programming in Haskell](https://www.amazon.com/Programming-Haskell-Graham-Hutton/dp/1316626229)\\n\\nWhatever book you go with, don\u2019t get stuck for too long on concepts that are confusing to you, especially towards the end of the book. Some concepts will just need time to click; don\u2019t expect to grasp it all on the first try. Whatever you do grasp from the first read will likely be more than enough to get going with your first projects in Haskell. You can always come back to those complex concepts later and understand them better. Also, don\u2019t be shy to ask the community -> there are many Haskellers out there happy to support you in your learning!\\n:::note\\nWhen I say \\"don\'t get stuck\\", I don\'t mean you should skip the difficult concept after the first hurdle. No, you should spend some hours experimenting, looking at it from different angles, playing with it, trying to crack it. But you shouldn\'t spend days trying to understand the same concept (e.g. function as a monad) and then feel defeated due to not grasping it 100%. Instead, if you put proper effort but stuff is not completely clicking, tap yourself on the back and move on for now.\\n:::\\n\\nOnce you take the first pass through the book, I recommend doing a project or two. You can come up with an idea yourself, or you can follow one of the books that guide you through it. \\n\\nFor example:\\n\\n1. [Learn Haskell by building a blog generator](https://lhbg-book.link/) -> free, starts from 0 knowledge, and could even be used as the very first resource, instead of e.g. LYAH.\\n2. [The Simple Haskell Handbook](https://marcosampellegrini.com/simple-haskell-book) -> not free, expects you to know the basics of Haskell already\\n\\nOnce you have more experience with projects, I would recommend re-reading your beginner book of choice. This time, you can skip the parts you already know and focus on what was confusing before. You will likely have a much easier time grasping those harder concepts.\\n\\np.s. If you are looking for a bit of extra motivation, check the blog post my teammate Shayne recently wrote about [his journey with Haskell](https://wasp-lang.dev/blog/2022/08/26/how-and-why-i-got-started-with-haskell). He started in late 2021 and has already made huge progress!\\n\\n---\\n\\n*Good luck with Haskell! If you have Haskell questions for me or the rest of the Wasp team, drop me a line at `\u201cmartin\u201d ++ \u201c@\u201d ++ concat [\u201dwasp\u201d, \u201c-\u201d, \u201clang\u201d] <> \u201c.dev\u201d` , or write to #haskell channel in [Wasp-lang Discord server](https://discord.gg/rzdnErX).*"},{"id":"/2022/08/26/how-and-why-i-got-started-with-haskell","metadata":{"permalink":"/wasp-docs/blog/2022/08/26/how-and-why-i-got-started-with-haskell","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-08-26-how-and-why-i-got-started-with-haskell.md","source":"@site/blog/2022-08-26-how-and-why-i-got-started-with-haskell.md","title":"How and why I got started with Haskell","description":"I have been programming professionally for over a decade, using a variety of languages day-to-day including Ada, C, Java, Ruby, Elixir, and JavaScript. I\u2019ve also tried some obscure ones, albeit less frequently and for different purposes: MIPS assembly language and OCaml for academic work (I\u2019m a BS, MS, and PhD dropout in CS), and Zig for some side projects. In short, I like learning new languages (at least at a surface level) and have been exposed to different programming paradigms, including functional.","date":"2022-08-26T00:00:00.000Z","formattedDate":"August 26, 2022","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"haskell","permalink":"/wasp-docs/blog/tags/haskell"},{"label":"language","permalink":"/wasp-docs/blog/tags/language"}],"readingTime":7.575,"hasTruncateMarker":true,"authors":[{"name":"Shayne Czyzewski","title":"Founding Engineer @ Wasp","url":"https://github.com/shayneczyzewski","imageURL":"https://github.com/shayneczyzewski.png","key":"shayneczyzewski"}],"frontMatter":{"title":"How and why I got started with Haskell","authors":["shayneczyzewski"],"image":"/img/filip-headshot-min.jpeg","tags":["webdev","haskell","language"]},"prevItem":{"title":"How to get started with Haskell in 2022 (the straightforward way)","permalink":"/wasp-docs/blog/2022/09/02/how-to-get-started-with-haskell-in-2022"},"nextItem":{"title":"How to communicate why your startup is worth joining","permalink":"/wasp-docs/blog/2022/08/15/how-to-communicate-why-your-startup-is-worth-joining"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n\\nI have been programming professionally for over a decade, using a variety of languages day-to-day including Ada, C, Java, Ruby, Elixir, and JavaScript. I\u2019ve also tried some obscure ones, albeit less frequently and for different purposes: MIPS assembly language and OCaml for academic work (I\u2019m a BS, MS, and PhD dropout in CS), and Zig for some side projects. In short, I like learning new languages (at least at a surface level) and have been exposed to different programming paradigms, including functional.\\n\\nYet, I have never done Haskell. I\u2019ve wanted to learn it since my college days, but never got the time. In late 2021, though, my curiosity took over. I wanted to see for myself if the mystique and the Kool-Aid hype (or hate) around it are justified. :P So, I decided I\u2019d start learning it on the side and also look for a company that uses it as my next gig. That\u2019s how my Haskell journey started, and [how I got into Wasp](https://wasp-lang.dev/blog/2021/12/21/shayne-intro) a few months later.\\n\\n\x3c!--truncate--\x3e\\n\\n## Why learn Haskell?\\n\\nHaskell seems to have an aura of superiority around it. Many niche and heavily academically-inspired languages do. These languages seem to be used by the enlightened minds and allow you to quickly write complex programs in a fraction of the time with significantly less code. Lisp is amongst these languages, too. Yet, nobody uses them for anything real \u2014 only toy projects. (While stroking their long, grey beards under a tree, ruminating on the philosophy of computer science.) At least, that\u2019s the impression I got in college and at work. So, what makes Haskell interesting to learn, let alone want to use professionally?\\n\\n**First, it is functional as it gets.** While I have used lambdas and functional concepts like `map` in non-functional languages, the fact that these were my *only* choice was really interesting to me. After years of extensive OO usage, I\u2019ve come to appreciate this epigram by Alan Perlis. I think it captures a mindset shift between the two paradigms:\\n\\n> \u201cIt is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.\u201d \u2014 Alan Perlis\\n>\\n\\nIn OO, you create lots of classes with lots of methods. In functional, you have far fewer data structures (mostly list) with a lot more functions. So basically more functions to operate on fewer nouns, whereas OO is lots of nouns, each with many bespoke methods. (The first comment on [this Stack Overflow thread](https://stackoverflow.com/questions/6016271/why-is-it-better-to-have-100-functions-operate-on-one-data-structure-than-10-fun) explains it really well.)\\n\\nBesides, I liked the idea of referential transparency when writing pure functions. It means that you get the same result back every time you invoke a function, without fear of unknown side effects. (But the language does offer the flexibility to have side effects like IO, via Monads.) I also liked having only immutable data structures \u2014 they make reasoning about the system and data flow easier. There were many things like these two that I liked. The point is that thinking functionally really changes the way you structure and solve problems, so I was curious to give it a go.\\n\\n**Second, Haskell is lazy.** While there are pros and cons to this, it feels undeniably different. Most languages are strict, in that all function arguments are evaluated before invoking a function. This is required because of side effects; to have some expectations regarding the order in which things will run. Haskell does the opposite: it delays evaluation until it\u2019s actually needed.\\n\\nOne contrived yet helpful example of laziness is infinite data structures. Below, we define `fibs` as an infinite `List` of `Integer` values, by using references to *itself*! (You can find a runnable example [here](https://replit.com/@ShayneCzyzewsk1/LazyHaskellExample?v=1#Main.hs).) \\n\\n```haskell\\nfibs :: [Integer]\\nfibs = 0 : 1 : zipWith (+) fibs (tail fibs)\\n\\ntake 10 fibs -- [0,1,1,2,3,5,8,13,21,34]\\n```\\n\\nThere\u2019s a downside to laziness, too. It makes it harder to reason about performance and resource utilization. But the idea that you can define things in a declarative way but know that they are evaluated only when needed is a pretty eye-opening way to program.\\n\\nTo sum up: Haskell is functional, lazy, and strongly statically typed. Just the trifecta that gets me out of bed in the morning! :D So, how did I go about learning it?\\n\\n## Hello Haskell!\\n\\nI started by reading the canonical Haskell newbie resource, \u201c*[Learn You a Haskell for Great Good!](http://learnyouahaskell.com/),*\u201d often abbreviated LYAH. It was very entertaining, and I learned a lot from it. At times, I wanted it to get to the point more quickly. Still, despite the amusing images and often lengthy examples, it provided me with a great conceptual foundation. I highly recommend it as your first read \u2014 it is a really well-written resource for beginners.\\n\\nAfter I was about 80% done with LYAH, I switched to a more recent but still popular book: \u201c*[Haskell Programming from First Principles](https://haskellbook.com/)*.\u201d I liked that it started with fundamentals and then moved to more complex topics, slowly but steadily developing my understanding. It was pretty long, though, and sometimes went too far into the weeds. It also had a tinge of intellectual flexing at certain points. Still, it was a good read. I\u2019d read it again if I were starting over.\\n\\nI also tried [a Haskell course from Google](https://github.com/google/haskell-trainings). Despite being brief, it explains the key concepts in a relatively complete way. If videos are your thing, it might be a solid way to get up to speed.\\n\\nIn short, skimming an intro book to get your foundation solid would be the best bet. I\u2019d also recommend trying out many different online resources when covering more intermediate topics, like Monad Transformers, for example. And don\u2019t worry if it takes a while to start feeling comfortable with things that are pretty specific to Haskell! It just takes some time, and often it is more confusing to derive/deeply understand than to just start using them at first. The understanding will come over time. (Of course, sometimes [pictures](https://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html) help!)\\n\\n## Setup and IDE support\\n\\nGetting Haskell up and running was surprisingly straightforward, even though I ran it on an M1 MacBook Air, which was considered a pretty new architecture in 2021. Since the entire toolchain was not fully ARM-compatible back then, some of the setup advice required a bit of modification. But that was no big deal: I used `ghcup`, installed HLS in VS Code, and bam! \u2014 I had Haskell up and running. It was a pretty nice experience. \\n\\nSome minor downsides I recall:\\n\\n- There doesn\u2019t seem to be a consensus on which build and package management tool to use, Cabal or Stack. However, unless you\u2019re doing something super specific, it\u2019s not an irreversible decision. At Wasp, we started with Stack but then migrated to Cabal since it better fit our setup and workflows. It was pretty seamless.\\n- One thing I do miss from other IDEs is breakpoint debugging. Technically, there\u2019s *some* support for it in Haskell, but I don\u2019t think many use it. Breakpoints and lazy evaluation don\u2019t seem to be BFFs.\\n\\n## 0-60 at work\\n\\nFor someone with experience in several different languages, it is pretty achievable to be able to solve minor bugs/features in Haskell after a few weeks of learning. At least, it was for me. I certainly struggled on best practices and such, and my code reviews involved some Haskell golfing comments for sure :) But I could make it do what I wanted it to do from the functionality perspective. Kudos to the mostly helpful compiler errors (with a bit of practice reading) and the Internet!\\n\\nHopefully, your code base demonstrates established project and Haskell patterns, so you can learn as you poke around, and your early code reviewers are supportive coworkers who can explain things as part of their suggestions. I was quite fortunate in that regard: the Wasp team values teaching and learning, and the codebase uses what is called \u201cSimple Haskell\u201d, which limits the use of excessive language extensions in the hopes to keep the core language and concepts as tight as possible. (Note: there are Haskell experts who view this as a severe limitation of the capabilities of the language, but as a newbie, I was happy they did it.)\\n\\n## So, was the juice worth the squeeze?\\n\\nLearning Haskell took considerable time and effort. It was completely different from any language I had used before. Yet, I am very happy I embarked on this journey. Even if you do not intend to get a job using Haskell, I still think learning it is worthwhile just to expand your programming point of view and master functional concepts. And for a select set of project types (like writing a compiler for a full-stack web DSL), I feel it really will make you more productive over time. Give an intro to Haskell tutorial or video a try some weekend and let me know what you think! I\u2019m at shayne at wasp-lang dot dev dot com."},{"id":"/2022/08/15/how-to-communicate-why-your-startup-is-worth-joining","metadata":{"permalink":"/wasp-docs/blog/2022/08/15/how-to-communicate-why-your-startup-is-worth-joining","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-08-15-how-to-communicate-why-your-startup-is-worth-joining.md","source":"@site/blog/2022-08-15-how-to-communicate-why-your-startup-is-worth-joining.md","title":"How to communicate why your startup is worth joining","description":"Except for a handful of companies who send people to Mars or develop AGI, most startups don\u2019t seem to offer a good reason to join them. You go to their websites and all you see is vague, baseless, overly generic mission-schmission/values-schvalues HR nonsense that supposedly should turn you into a raving fan of whatever they\u2019re doing and make you hit that \u201cJoin\u201d button until their servers crash. Well\u2026","date":"2022-08-15T00:00:00.000Z","formattedDate":"August 15, 2022","tags":[{"label":"startups","permalink":"/wasp-docs/blog/tags/startups"},{"label":"hiring","permalink":"/wasp-docs/blog/tags/hiring"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"}],"readingTime":30.055,"hasTruncateMarker":true,"authors":[{"name":"Vasili Shynkarenka","title":"Content @ Wasp","url":"https://github.com/flreln","imageURL":"https://github.com/flreln.png","key":"flreln"}],"frontMatter":{"title":"How to communicate why your startup is worth joining","authors":["flreln"],"image":"/img/worth-joining/illustration-1-min-min.png","tags":["startups","hiring","wasp"]},"prevItem":{"title":"How and why I got started with Haskell","permalink":"/wasp-docs/blog/2022/08/26/how-and-why-i-got-started-with-haskell"},"nextItem":{"title":"ML code generation vs. coding by hand - what we think programming is going to look like","permalink":"/wasp-docs/blog/2022/06/24/ML-code-gen-vs-coding-by-hand-future"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n\\nExcept for a handful of companies who send people to Mars or develop AGI, most startups don\u2019t seem to offer a good reason to join them. You go to their websites and all you see is vague, baseless, overly generic mission-schmission/values-schvalues HR nonsense that supposedly should turn you into a raving fan of whatever they\u2019re doing and make you hit that \u201cJoin\u201d button until their servers crash. Well\u2026\\n\\nSome people think that\u2019s because most startups aren\u2019t worth joining. I disagree. This argument generalizes one\u2019s own reasons for joining a startup onto every other human being out there, which is unlikely to be true. I think most startups, no matter how ordinary, *do* have a reason to join them; *a good reason*; even *many good reasons* \u2014 they just fail to communicate them well. They\u2019re like a shy nerd on Tinder with an empty bio and no profile pic: a kind, intelligent, and thoughtful human being who, unfortunately, will be ruthlessly swiped left \u2014 not because he\u2019s a bad match but because his profile doesn\u2019t show why he\u2019s a good one.\\n\\nVisually, this \u201cTinder profile problem\u201d looks like this:\\n\\n\x3c!--truncate--\x3e\\n\\n<ImgWithCaption\\n    alt=\\"Illustration of candidates not seeing why to join a startup\\"\\n    source=\\"img/worth-joining/illustration-1-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\nNow, look what would happen if a startup communicated a bit better. Suddenly, our candidates could see a reason to join. If the reason is good, they might even swipe right.\\n\\n<ImgWithCaption\\n    alt=\\"Illustration of candidates seeing one reason to join a startup\\"\\n    source=\\"img/worth-joining/illustration-2-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\nBut most startups have *many* good reasons to join them. If only they communicated well, the outcome would be something like this:\\n\\n<ImgWithCaption\\n    alt=\\"Illustration of candidates seeing many reasons to join; one candidate already running for it\\"\\n    source=\\"img/worth-joining/illustration-3-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\nNow, you\u2019re probably wondering just what exactly those reasons are.\\n\\nHere\u2019s a rough list:\\n\\n1. The founders are interesting / fun / smart / human / you name it\\n2. The team is great\\n3. The culture is amazing\\n4. The business is doing well\\n\\nHowever, if you just copy this list and paste it on your jobs page, you will accomplish nothing. The candidates will never believe you. What you need to do instead is to *supply them with a system of concretes (facts) from which their minds will form these abstract conclusions.*\\n\\nFor example:\\n\\n- Instead of declaring that \u201cthe founders are reflective, thoughtful, and persistent,\u201d show them how so, like Sarah from Canny does by writing comprehensive year-in-review blog posts for [four years in a row](https://canny.io/blog/year-four-in-review/).\\n- Instead of proclaiming that \u201cthe founders are humble and can have fun,\u201d show them how so, like Michael from Fibery did by becoming a hero of [this hilarious page](https://fibery.io/remote). (No businessy founder would ever agree to make this public. Michael did.)\\n- Instead of purporting that \u201cthe team is great\u201d or \u201cyou\u2019ll work alongside very smart people\u201d (God, I hate that one!), show them who exactly those people are, as PostHog does [here](https://posthog.com/handbook/company/team) and Wasp does [here](https://wasp-lang.dev/blog/2021/12/21/shayne-intro) and [here](https://wasp-lang.dev/blog/2022/05/31/filip-intro).\\n\\nIn the rest of the post, I\u2019ll go through the four broad reasons to join a startup one by one and show real-life examples of communicating them well. In the end, I will explain how these four reasons, communicated well, fuse into two compelling messages that will interest any candidate.\\n\\nOne last thing. For the sake of clarity and comprehension, I will write in the second person. Instead of saying \u201ccandidates would never believe them,\u201d I will say \u201cyou would never believe them.\u201d It\u2019s much easier to read and understand.\\n\\n## **Possible reasons why your startup is worth joining, and how to communicate them well**\\n\\n### **1. FOUNDERS \u2014 or, the founders are interesting / fun / smart / human / you name it**\\n\\nMost startups have curious, interesting, ambitious, terribly smart founders; the kind most of us would love to work for if we had a chance. Sadly, only a few leverage this asset. In most cases, all you get is a small round pic with a fancy title and a few abstract, high-level sentences that cause no excitement whatsoever. What a shame!\\n\\n#### **How Canny commmunicates who their founders are**\\n\\n##### **Founder Stories blog category**\\n\\nThe first notable thing Canny does is the [Founder Stories category](https://canny.io/blog/founder-stories/) in their blog. By quickly skimming the posts, you can understand that Sarah and Andrew (the founders):\\n\\n- Accept their mistakes, talk about them, and learn from them. Even if the issue is sensitive, like firing people. ([Reflections from the last 2 years as a founder](https://canny.io/blog/reflections-two-year-founder/), [First hire to first fire](https://canny.io/blog/hire-fire/).)\\n- Are reflective, thoughtful, and persistent people. ([How we built a $1m ARR SaaS startup](https://canny.io/blog/how-we-built-a-1m-arr-saas-startup/), [Year four in review: Overcoming the unexpected](https://canny.io/blog/year-four-in-review/).)\\n- Have very definite, clear values. But, more importantly, stand up to them, even if that means losing revenue. ([Saying no to big customers](https://canny.io/blog/saying-no-big-customers/).)\\n\\nIf they just pinned this list of virtues to their Jobs page, you would never believe them. Instead, Sarah and Andrew show what actions they take, how they work, how they think, *how they live* \u2014 and you make up their own mind about what kind of people Sarah and Andrew are from seeing all that. The difference is enormous.\\n\\nNote their writing style. They don\u2019t claim to be know-it-alls with titles like \u201cHow *to* bootstrap your startup.\u201d Instead, they write \u201cHow *we* Bootstrapped *our* SaaS Startup to Ramen Profitability.\u201d They cover only what they know instead of overgeneralizing. This shows both expertise and humility.\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of Canny\'s Founder Stories blog category\\"\\n    source=\\"img/worth-joining/canny-founder-stories-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n##### **Personal Instagram**\\n\\nThe second thing Sarah and Andrew do well to communicate who they are is their [Instagram](https://www.instagram.com/carryoncode/). They don\u2019t post glamorous keynote appearances, as many entrepreneurs do. They share the actual day-to-day working life \u2014 both the fun and the struggle. It gives you a good idea of what they\u2019re after in life. (Not keynotes.) That\u2019s why it works, and that\u2019s why people love it.\\n\\n<ImgWithCaption\\n    alt=\\"A photo from Sarah and Andrew\'s personal Instagram\\"\\n    source=\\"img/worth-joining/canny-instagram-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n*Side note: Sarah explains how she develops the Canny brand in [this post](https://canny.io/blog/building-your-brand-with-storytelling/). If you want to build a good one, give it a read. She also wrote about how they attract top talent. You can read it [here](https://canny.io/blog/startup-attract-top-talent/).*\\n\\n#### **How Fibery communicates who their founder is**\\n\\n##### **Startup Diary blog post series**\\n\\nWhile you can get a pretty good idea of Michael (the founder) from the hilarious \u201c[Remote](https://fibery.io/remote)\u201d page Fibery shipped last year, his [Startup Diary post series](https://fibery.io/blog/startup-diary) offers an even better insight into his soul. In these monthly posts, Michael honestly shares everything that\u2019s going on with Fibery, including the good, the bad, and the ugly: firing people for poor performance, losing important customers, and failing to reach product-market fit. The fact that he\u2019s already written 45 of those (as of Aug 2022) is also telling. And he\u2019s not a native English speaker. If he can do that, why can\u2019t you?\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of Fibery\'s Startup Diary blog category\\"\\n    source=\\"img/worth-joining/fibery-startup-diary-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n##### **Crazy challenges**\\n\\nBesides writing the Startup Diary, Michael also embarks on crazy challenges like [writing 100 posts about products](https://fibery.io/blog/100-posts-about-products). Only a passionate, driven person would commit to such a thing. You cannot help but respect him for it. (Before this challenge, he wrote 100 Medium posts in 100 days in 2018. You can read them [here](https://mdubakov.medium.com/). Just scroll a few screens to reach the old stuff.)\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of Fibery\'s 100 posts about products blog category\\"\\n    source=\\"img/worth-joining/fibery-challenges-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\nIf you look carefully, you\u2019ll notice that Michael\u2019s thinking about building a company is different from Sarah\u2019s. For example, he despises the gentle, soothing \u201cOh don\u2019t worry that it didn\u2019t work out; you did such a good work!\u201d approach, which is ubiquitous in the modern startup world. Instead, he states that [dissatisfaction leads to progress](https://fibery.io/blog/dissatisfaction-leads-to-progress/), referring to the famous [\u201cNot quite my tempo\u201d](https://youtu.be/xDAsABdkWSc) scene from Whiplash. Does that make you like him more than Sarah?\\n\\nIt depends. If you believe that being soft and balanced is better, you\u2019ll go with Sarah; if you believe that real progress comes only from working yourself to the bone, you\u2019ll go with Michael (or Elon). The important thing is that both founders have their own, unique viewpoints of how things should be done, and that they communicate these viewpoints as-is instead of chopping their legs off to fit the latest Procrustean fad.\\n\\n##### **In-depth, original blog posts about the industry**\\n\\nSome entrepreneurs say that doing a startup is like \u201cjumping off a cliff and building your wings on the way down.\u201d Some of it might be true. But if you want *reasonable* people to jump with you, you better tell them that you have a degree in engineering and know how to assemble wings in a free fall. Otherwise, the only team you\u2019ll recruit is a suicide squad looking for a splashy hit.\\n\\nTo communicate his expertise, Michael writes in-depth, original, theoretical posts about the nature of knowledge management and organizational productivity. These posts are gems, both literally and metaphorically. (They\u2019re filed under the [Gems category](https://fibery.io/blog/gems) in the [Fibery blog](https://fibery.io/blog/).)\\n\\nFor example:\\n\\n- [Fibery.io Vision v.1: Getting Started](https://fibery.io/blog/fibery-vision-v1/)\\n- [The Next Wave of Work Management Software](https://fibery.io/blog/the-next-wave-of-work-management-software/)\\n- [Augmenting Organizational Intelligence](https://fibery.io/blog/augmenting-organizational-intelligence/)\\n- [Use Networks to Prioritize Product Features](https://fibery.io/blog/use-networks-to-prioritize-product-features/)\\n\\nAfter reading these articles, you understand not only that Michael really knows how to build wings while falling off the cliff, but that he has already jumped a few times. (Prior to Fibery, Michael had worked on knowledge management for more than a decade. He also had built a successful project management software, [Targetprocess](https://www.apptio.com/products/targetprocess/).) You know that he\u2019s an expert who can be trusted.\\n\\nInterestingly, even though Michael writes differently from Sarah, they both leverage what they\u2019re good at. Sarah does not try to produce treatises on software development philosophy, and Michael doesn\u2019t gush out with his personal learnings from building a startup. That, I think, is the right way to do it.\\n\\n#### **How PostHog communicates who their founders are**\\n\\nPostHog\u2019s founders James and Tim don\u2019t write 100 posts in 100 days or run a personal Instagram. But they\u2019ve come up with something else to communicate what kind of people they are. And it\u2019s something unique.\\n\\n##### **Well-written, concise bio**\\n\\nFirst, both founders have decent [profiles](https://posthog.com/handbook/company/team) in the company handbook. These bios are short, clear, and humane. They\u2019re also very specific. Where else have you seen the name of the CEO\u2019s cat?\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of James Hawkins\' bio in the PostHog Handbook\\"\\n    source=\\"img/worth-joining/posthog-james-bio-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n##### **Personal README files**\\n\\nSecond, both James and Tim have an extensive README file ([one](https://posthog.com/handbook/company/team/james-hawkins), [two](https://posthog.com/handbook/company/team/tim-glaser)) on how to work with them. These files give you an insight into their productivity habits, interests, and quirks. In fact, after reading them, you will likely have a better idea of the founders than you\u2019d usually get from working at a company for a month!\\n\\nFor instance, James\u2019s file has sections like:\\n\\n- **Short bio.** Includes very specific details like: \u201cI tend to work 9am to 5pm with an hour for lunch, then I have a gap to have dinner with my family, then 9pm to around 11pm ish.\u201d\\n- ***Very clear* areas of responsibility.** No need to wonder what the hell the CEO is doing anymore!\\n- **Quirks.** These are remarkably humble and open-minded, like:\\n    - \u201cIf I haven\u2019t responded to something that you\u2019ve sent me, that\u2019s probably because I\u2019ve read it and don\u2019t feel particularly strongly - so just make a call on what to do if you don\u2019t hear back in a reasonable time frame.\u201d\\n    - \u201cI\u2019m a little disorganized. I compensate for this by making sure the teams I work on have this skill. Often I think this actually helps me prioritize the things that really matter.\u201d\\n    - Explaining these quirks is an ingenious move. Besides explaining how to work with James, this section communicates that he\u2019s profoundly self-aware and willing to accept and leverage his weaknesses. These qualities are very rare and incredibly valuable.\\n- **What I value.** In stark contrast to most HR nonsense, these values are very clear, very specific, and written in English rather than HRese. (I just came up with this term: it means \u201clegalese but for HR.\u201d) Here are two examples:\\n    - \u201cProactivity. Do not ask me for permission to do things - I wouldn\u2019t have hired you if I didn\u2019t trust you. I\u2019d rather 9 things get done well and 1 thing I disagree with than we don\u2019t get anything done at all.\u201d\\n    - \u201cDirectness impresses me. If you don\u2019t like something please just say so. It makes for much healthier relationships.\u201d\\n\\nIn addition to that, there\u2019s also: How I can help you, How you can help me, My goals until end December 2022 (very specific!), Personal strategy, Execution todo (including \u201c1 bike ride a week\u201d!) and Archived todo.\\n\\nIn summary, this README page is a gem. I wish more founders had them.\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of James Hawkins\' README in the PostHog Handbook\\"\\n    source=\\"img/worth-joining/posthog-james-readme-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n#### **How we at Wasp communicate who our founders are**\\n\\n##### **\u201cWho we are\u201d section of every job description page**\\n\\nMatija and Martin (the founders of Wasp) embedded a concise description of who they are right into each [job description page](https://www.notion.so/402274568afa4d7eb7f428f8fa2c0816) in Notion. They knew that this is the first company artifact many candidates will see. So they saved candidates time and effort on digging up who the hell started Wasp.\\n\\nNote the language and substance of this list. When you read it, you immediately get a sense of who Matija and Martin are as people \u2014 fun, easygoing, no-corporate-bullshit kinda guys. Now imagine it said something \u201cmore normal,\u201d like: \u201cThe company was founded by seasoned entrepreneurs\u2026\u201d What impression would that make?\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of Wasp\'s job description page\\"\\n    source=\\"img/worth-joining/wasp-who-we-are-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n### **2. TEAM \u2014 or, the team is great**\\n\\nIt is startling how little most startups tell you about their teams. Often all you get is a chessboard of faces and titles, which gives you no idea who these people are *as people* or how working with them will feel like*.* Given how crucial a reason \u201cgreat team\u201d is for most candidates, improving how you communicate it seems like a low-hanging fruit.\\n\\n#### **How Canny communicates who is on their team**\\n\\n##### **Decent team page**\\n\\nThe Canny\u2019s difference starts with a team page. It has a dense summary of who each team member is as a person and includes high-quality, lively photos of everybody.\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of Canny\'s Team page\\"\\n    source=\\"img/worth-joining/canny-team-bios-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\nLook how specific those bios are. In most cases, all you get here is a generic \u201cdeveloper\u201d or \u201cmarketer\u201d without any personal details. Bios of robots, not people. No wonder nothing comes to mind, except perhaps for Agent Smith. But Canny\u2019s bios are different. When you read them, you can actually imagine the person! They\u2019re Neos in the world of Smiths.\\n\\n##### **Remarkable \u201cWhy work at Canny\u201d blog post**\\n\\nFrom there, it gets only better. Canny\u2019s chief weapon for explaining their team is a blog post, the \u201c[Why work at Canny](https://canny.io/blog/work-at-canny/)\u201d blog post. Sarah wrote it back in the summer of 2021. It is full of quotes from team members and photos of their workdays and vacations. *Real photos of real people*. No wonder the comments section under the post abounds with raving fans willing to join the team straight away!\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of comments under the Canny\'s Why work at Canny blog post\\"\\n    source=\\"img/worth-joining/canny-why-work-post-comments-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\nPerhaps the best thing about this post is how little work it takes to create one. I imagine that collecting the data took some time, but the actual writing (it\u2019s an 11-min read) took no more than a week. A week of work for a candidate magnet of such tremendous power? Sounds like a deal.\\n\\n*P.s. Sarah writes a lot more about their team in her yearly review posts, but I decided not to elaborate on those for the sake of clarity. You can check them out here: [year 1](https://canny.io/blog/lessons-learned-bootstrapping-saas/), [year 2](https://canny.io/blog/year-two-lessons-bootstrapping/), [year 3](https://canny.io/blog/year-three-lessons-bootstrapped-startup/), and [year 4](https://canny.io/blog/year-four-in-review/).*\\n\\n#### **How Fibery communicates who is on their team**\\n\\n##### **Weird About Us page**\\n\\nUnlike Canny and PostHog\u2019s, Fibery\u2019s [About Us](https://fibery.io/about-us) page doesn\u2019t reveal much info about each team member. You will find no bios or README files there. But it clearly tells you one thing: the team is a bunch of weirdos. So, if weird is your thing, you\u2019ll be attracted to Fibery like a moth to a flame. (Side note: Fibery managed to clearly explain their vision in one paragraph. This is rare.)\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of Fibery\'s About Us page\\"\\n    source=\\"img/worth-joining/fibery-about-us-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n##### **Team-related parts of Startup Diary**\\n\\nI\u2019ve already mentioned Michael\u2019s [Startup Diary](https://fibery.io/blog/startup-diary) monthly blog series. What I didn\u2019t say is that each post communicates something about the team: who did what that month, random Slack posts (links, quotes, tweets, and images), etc. If someone new joined that month, Michael writes a few paragraphs explaining who that person is, where they come from, what they\u2019re going to do at Fibery, and even attaches a photo. Like [Chris](https://fibery.io/blog/chronicles-36/).\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of Fibery\'s Startup Diary blog post\\"\\n    source=\\"img/worth-joining/fibery-chris-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n#### **How PostHog communicates who is on their team**\\n\\n##### **Team section in the company handbook**\\n\\nAt PostHog, every team member has a well-written, few-paragraphs-long bio and a stylish illustration on the [Team section](https://posthog.com/handbook/company/team) of the [PostHog\u2019s Handbook](https://posthog.com/handbook/). (Which is a work of art worthy of its own blog post, by the way.) Many team members have their own README files, like the founders do. Check out Lottie Coxon\u2019s, PostHog\u2019s Graphic Designer\u2019s README [here](https://posthog.com/handbook/company/team/lottie-coxon), and some others [here](https://posthog.com/handbook/company/team/yakko-majuri) and [here](https://posthog.com/handbook/company/team/karl-aksel-puulmann). Even a quick read through these bios and READMEs gives you a good idea of who PostHog has on board.\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of PostHog\'s team section in the handbook\\"\\n    source=\\"img/worth-joining/posthog-team-1-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n<ImgWithCaption\\n    alt=\\"Another screenshot of PostHog\'s team section in the handbook\\"\\n    source=\\"img/worth-joining/posthog-team-2-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n##### **Day-in-life videos from employees**\\n\\nIn addition to bios and READMEs, PostHog has [a day-in-life video](https://youtu.be/xlODCLrZyvM) of Lottie, their graphic designer. It communicates a lot more information about what kind of person she is and how working at PostHog feels like than her bio. I wish they had more of those.\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot from PostHog\'s graphic designer day-in-life video\\"\\n    source=\\"img/worth-joining/posthog-lottie-video-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\nFinally, PostHog\u2019s handbook offers two more sections where candidates can learn even more about the team: [Culture](https://posthog.com/handbook/company/culture) and [Team structure](https://posthog.com/handbook/people/team-structure/team-structure#reporting-structure). All are worth a read, and each tells you something new about the company and the team, nurturing your liking and respect for these people. Definitely worth stealing.\\n\\n#### **How we at Wasp communicate who is on our team**\\n\\n##### **\u201cMeet the team\u201d blog posts**\\n\\nTo help candidates understand who they will be working with, we at Wasp write a blog post about each new hire:\\n\\n- [Meet the team - Filip Sodi\u0107, Founding Engineer](https://wasp-lang.dev/blog/2022/05/31/filip-intro)\\n- [Meet the team - Shayne Czyzewski, Founding Engineer](https://wasp-lang.dev/blog/2021/12/21/shayne-intro)\\n\\nThe posts are brief enough to be read in one sitting. Yet, they are very informative. Basically, each post is an interview, presented as an article. We hope they give candidates a good idea of who they\'ll be spending half of their waking time with.\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of Wasp\'s Meet the team blog post\\"\\n    source=\\"img/worth-joining/wasp-meet-the-team-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n### **3. CULTURE \u2014 or, the culture is amazing**\\n\\nWhile researchers still argue about the ultimate definition, most of us understand culture as \u201cwhat working here feels like\u201d and/or \u201chow we do things here.\u201d We also understand how crucial it is for those looking for work. It seems glaringly obvious that startups should work hard on communicating their culture. Yet, most companies don\u2019t. Or, even worse, they flood their websites with meaningless HR fluff, which only scares interesting people away. In short, communicating culture well is another low-hanging fruit waiting to be picked.\\n\\n#### **How Canny communicates their culture**\\n\\nCanny does an outstanding job at communicating their culture. The primary tool they employ is, once again, their [blog](https://canny.io/blog/founder-stories/). (Note how multifunctional it is: founders, expertise, team, and now culture.) The posts in the Founder Stories category convey very well what working at Canny feels like. Here are a few examples.\\n\\n##### **\u201cWhy work at Canny\u201d blog post**\\n\\nI\u2019ll risk repeating myself, but [this post](https://canny.io/blog/work-at-canny/) so beautifully explains Canny\u2019s culture that I couldn\u2019t resist. It mentions why and how they work remotely, how they do team retreats (with photos and a [video](https://youtu.be/u4yOS1cuMSQ) from Lisbon!), and how they had fun together playing weird Zoom games when travel was not an option due to Covid.\\n\\nPay attention to the imagery. It communicates a lot more information than any lengthy, elaborate description would. Indeed, a picture is often worth a thousand words.\\n\\n<ImgWithCaption\\n    alt=\\"A photo of Canny\'s two team members hacking in Denver\\"\\n    source=\\"img/worth-joining/canny-hacking-in-denver-min.jpeg\\"\\n    caption=\\"\\"\\n/>\\n\\n##### **\u201cLessons from a year of team retreats\u201d blog post**\\n\\nInstead of saying that \u201cteam is our priority\u201d or \u201cwe invest in our people,\u201d Sarah [shows](https://canny.io/blog/lessons-from-team-retreats/) what they\u2019ve done to support their team. \\n\\nAgain, note how specific the imagery is.\\n\\n<ImgWithCaption\\n    alt=\\"A photo from Canny\'s Lessons from a year of team retreats blog post\\"\\n    source=\\"img/worth-joining/canny-year-of-retreats-min.jpeg\\"\\n    caption=\\"\\"\\n/>\\n\\nInterestingly, Sarah\u2019s post isn\u2019t framed as \u201chey we do many team retreats, we\u2019re awesome, come work for us.\u201d If they wrote that, the reader would feel uneasy. They would sense bragging. That\u2019s why the explicit message in the post is what Canny learned doing team retreats, not that they\u2019ve done many. This explicit message, however, *implies* that they indeed have done many retreats! It sends a message that Canny cares for their employees without explicitly saying so. This is what true mastery looks like.\\n\\n##### **\u201cThe end of our digital nomad journey\u201d blog post**\\n\\nAlthough [this post](https://canny.io/blog/end-digital-nomad-journey/) describes Sarah and Andrew\u2019s personal nomad experience, Sarah managed to reveal Canny\u2019s culture through it. To do that, she described how the team worked on Canny during those nomad years. She also wrote about their communication struggles, routines, and a lot more. And, again, look at how effectively her seemingly imperfect screenshots and photos transmit the vibe!\\n\\n<ImgWithCaption\\n    alt=\\"A photo from Canny\'s The end of our digital nomad journey blog post\\"\\n    source=\\"img/worth-joining/canny-end-of-nomad-min.jpeg\\"\\n    caption=\\"\\"\\n/>\\n\\n<ImgWithCaption\\n    alt=\\"Another photo from Canny\'s The end of our digital nomad journey blog post\\"\\n    source=\\"img/worth-joining/canny-end-of-nomad-2-min.jpeg\\"\\n    caption=\\"\\"\\n/>\\n\\n#### **How Fibery communicates their culture**\\n\\nWhile Fibery\u2019s culture is different from Canny\u2019s, they also communicate it well. Their primary tool is a weird, quirky [website](https://fibery.io/) full of special projects that give you a sense of how they do things at Fibery and what working there feels like.\\n\\n##### **Anxiety page**\\n\\nThe first project is Fibery\u2019s [/anxiety page](https://fibery.io/anxiety). Launched in 2019, it mocks every serious enterprise software out there with puns like \u201cYet another collaboration tool\u201d as the page title, \u201cMistake\u201d as a sign-up button text, and, my favorite, \u201cTry\u2014Suffer\u2014Quit\u201d page structure.\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of Fibery\'s /anxiety page\\"\\n    source=\\"img/worth-joining/fibery-anxiety-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\nOne day three years ago, someone [submitted](https://news.ycombinator.com/item?id=21643683) this page to Hacker News. The post surged to the top of the frontpage, stayed there for many hours, and got 705 upvotes and 145 comments from people all over the world relating to Fibery\u2019s culture. Why? Because it felt real.\\n\\nHere\u2019s a glimpse of what people wrote in the comments:\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of Hacker News comments on Fibery\'s /anxiety page\\"\\n    source=\\"img/worth-joining/fibery-hn-1-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n<ImgWithCaption\\n    alt=\\"Another screenshot of Hacker News comments on Fibery\'s /anxiety page\\"\\n    source=\\"img/worth-joining/fibery-hn-2-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n##### **Remote page**\\n\\nThe second special project Fibery did to communicate their culture is the [/remote page](https://fibery.io/remote). It shows what working from home is *really* like. It\u2019s the funniest thing I\u2019ve ever seen done by a software startup. (Have you ever seen a CEO being licked by a dog?) It also shows how the Fibery team works and even how they use Fibery to build Fibery. Like Canny\u2019s \u201cLessons from a year of team retreats\u201d blog post, it does so implicitly. A true masterpiece.\\n\\n##### **Weird, humorous site**\\n\\nBroadly, the whole [site](https://fibery.io/) screams that Fibery is a place for misfits, rebels, and trouble makers; the place where such people will be valued and will feel like home; the place built around brutal honesty and spicy humor.\\n\\nThe \u201cWhat (non-)customers say\u201d section is worth a mention. Over my nine years in startups, I haven\u2019t seen a site that a) lists *bad* customer reviews; and b) uses \ud83d\udca9 emoji as a filter. Again, this is telling. It says a lot about who they are as people: humble, real, and fond of humor.\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of Fibery\'s About Us page, What non-customers say section\\"\\n    source=\\"img/worth-joining/fibery-what-customers-say-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n#### **How PostHog communicates their culture**\\n\\n##### **Comprehensive company handbook covering all-things culture**\\n\\nPostHog\u2019s way of communicating their culture is the most explicit of all four examples, yet very effective. Their primary tool is the [PostHog Handbook](https://posthog.com/handbook), which covers virtually *every* aspect of what working at PostHog feels like: interviews, onboarding, training, management, communication, and even firing. (They call it [offboarding](https://posthog.com/handbook/people/offboarding).)\\n\\nThe handbook goes all the way up to the [high-level strategy](https://posthog.com/handbook/strategy/strategy), which is very clear. Notably, PostHog\u2019s strategy section not only puts forth ambitious goals but actually explains how exactly the company will get there.\\n\\n[The values section](https://posthog.com/handbook/company/values) is *very* specific; perhaps the most specific I\u2019ve ever seen. PostHog does not merely list their values as meaningless abstractions but supports them with evidence. Some values have many paragraphs of examples demonstrating how the team follows them.\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of the Values section in the PostHog\'s handbook\\"\\n    source=\\"img/worth-joining/posthog-values-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\nThey also have a specific [Culture page](https://posthog.com/handbook/company/culture) with [a 5-minute video from the CEO](https://youtu.be/rRwzJiljpSA) explaining how they designed PostHog for remote work from day one, which nicely complements the text.\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot from James Hawkins\'s video\\"\\n    source=\\"img/worth-joining/posthog-james-video-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\nIn summary, if Canny\u2019s weapon of choice is the blog and Fibery\u2019s is the website, then PostHog\u2019s is definitely the handbook. It\u2019s a work of art.\\n\\n#### **How we at Wasp communicate our culture**\\n\\n##### **Easygoing vibe from memes, copy, and imagery**\\n\\nUnlike Posthog, we at Wasp don\u2019t (yet) have a dedicated Culture page. We are too small for that. But that doesn\u2019t stop us from showing what working at Wasp feels like. We just use different tools.\\n\\nOur [Twitter](https://twitter.com/WaspLang), [blog](https://wasp-lang.dev/blog), and [monthly updates](https://us4.campaign-archive.com/home/?u=8139c7de74df98aa17054b235&id=f0c6ba5f1d) abound with memes, GIFs, and hilarious imagery. Plus, we write them in a humorous, lighthearted, easygoing style. By just scrolling through these things for a few minutes, candidates can understand that we aren\u2019t some corporate bros. And if they like working on interesting things *while having fun*, they won\u2019t help but feel an inkling to reach out.\\n\\n<ImgWithCaption\\n    alt=\\"A funny image from Wasp\'s blog post about GitHub Copilot\\"\\n    source=\\"img/worth-joining/wasp-vibe-blog-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n<ImgWithCaption\\n    alt=\\"A photo of Wasp\'s team packing t-shirts for users\\"\\n    source=\\"img/worth-joining/wasp-vibe-tshirts-min.jpeg\\"\\n    caption=\\"\\"\\n/>\\n\\n### **4. PROGRESS \u2014 or, the business is doing well**\\n\\nWhen you just closed an $80 million Series B or signed Facebook as a customer, communicating progress is easy. You just state these facts. However, most companies need to attract great people way before Series B. In fact, it is these very people who\u2019re going to get you there. As most startups are secretive about how things are going, communicating that things are going *somehow* \u2014 no matter how negligible your progress in contrast to the big guys \u2014 becomes quite an advantage. It immediately de-risks the opportunity in the candidate\u2019s eyes. So, if EXPERTISE is about convincing candidates that you know how to build the wings, PROGRESS is about showing them the half-built carcass on your way down. Both are important if you want great people to jump off the cliff with you.\\n\\n#### **How Canny communicates their progress**\\n\\nTo give candidates a sense that things are moving, that this company is not some long slog but a place where progress is made every day, that they can become a part of something that\u2019s growing and, therefore, can grow themselves, to do all that, Canny does two things.\\n\\n##### **\u201cYear in review\u201d blog posts**\\n\\nThe first one is their \u201cYear in review\u201d blog post series. Such comprehensive, thoughtful reviews are rare in the startup world. What is even rarer is when these posts span over four consecutive years. It sends a message that the founders are persistent and devoted to making this company successful.\\n\\nBelow are all Canny\u2019s year-in-review posts in a sequential order:\\n\\n- [Year in review: Lessons learned from bootstrapping our SaaS startup](https://canny.io/blog/lessons-learned-bootstrapping-saas/)\\n- [Year in review: Lessons from our second year of bootstrapping Canny](https://canny.io/blog/year-two-lessons-bootstrapping/)\\n- [Year three in review: Lessons from growing our bootstrapped startup](https://canny.io/blog/year-three-lessons-bootstrapped-startup/)\\n- [Year four in review: Overcoming the unexpected](https://canny.io/blog/year-four-in-review/)\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of Canny\'s Year in review blog post\\"\\n    source=\\"img/worth-joining/canny-year-in-review-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n##### **Important revenue milestones blog posts**\\n\\nIn addition to year-in-review posts, Sarah writes about hitting notable revenue milestones. Like with yearly reviews, such transparency is rare. It attracts attention, causes liking, and builds trust.\\n\\nFor example:\\n\\n- [$0 to $3,500: How we Bootstrapped our SaaS Startup to Ramen Profitability](https://canny.io/blog/saas-startup-ramen-profitability/)\\n- [$3,5k to $1m: How we built a $1m ARR SaaS startup](https://canny.io/blog/how-we-built-a-1m-arr-saas-startup/)\\n- [$1m to $2m: How we\u2019re moving our SaaS upmarket to enterprise sales](https://canny.io/blog/moving-upmarket/)\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of Canny\'s How we built a $1m ARR SaaS startup blog post\\"\\n    source=\\"img/worth-joining/canny-million-arr-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n##### **Short tweets with progress summary**\\n\\nFinally, Sarah occasionally tweets short summaries of their progress, like [this one](https://twitter.com/sarahhum/status/1461378442256072712). These tweets work like ads. Over time, a candidate\u2019s brain fuses them into a broader idea like \u201cCanny is growing\u201d or \u201cCanny is doing well.\u201d Then, once a candidate decides to change jobs, it nudges the candidate to consider Canny.\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of Sarah\u2019s tweet with progress update\\"\\n    source=\\"img/worth-joining/canny-sarah-tweet-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n#### **How Fibery communicates their progress**\\n\\n##### **Startup Diary blog posts**\\n\\nThe most notable thing Fibery does to communicate their progress is the [Startup Diary](https://fibery.io/blog/startup-diary) blog posts series written by the founder, Michael, every month, *for the past 45 months.* It\u2019s the longest series of monthly updates I know. In these posts, Michael honestly shares everything that\u2019s going on with the company: the good, the bad, and the ugly.\\n\\nBelow are just a few examples, selected by me. You can study all Fibery\u2019s monthly updates here.\\n\\n- [#2 Slow September 2018](https://fibery.io/blog/chronicles-2/) \u2014 Fibery startup progress in September 2018. Slow month with not so many news. First positive feedback. Company name selection.\\n- [#6 Planning Private Beta in January 2019](https://fibery.io/blog/chronicles-6/) \u2014 Fibery startup progress in January 2019: Private beta goals, selecting a market positioning (hard), apps re-design.\\n- [#10 Burn in May 2019](https://fibery.io/blog/chronicles-10/) \u2014 Several people burned out, new features are delivered, public release will be sooner (we hope) (despite ill fortune).\\n- [#16 Crazy November 2019](https://fibery.io/blog/chronicles-16/) \u2014 Fibery 1.0 is silently launched. Silence is hard to keep. HackerNews front page. Twitter madness. 3000 registered accounts.\\n- [#17 Fragmented December 2019](https://fibery.io/blog/chronicles-17/) \u2014 Public announcements moved to January. +Lena. Tons of feedback. First money! Hype is over. We consider rising a ~$4M round.\\n- [#35 Raised $3.1M in July 2021](https://fibery.io/blog/chronicles-35/) \u2014 TLDR: We closed $3.1M seed round. Building a second brain for teams. Fibery mission. Building in Public. Automation rules. Documents and Rich Text history.\\n- [#36 20k MRR in August 2021](https://fibery.io/blog/chronicles-36/) \u2014 Special Startup Diary edition. 20k MRR & 15 new customers! +Chris. +Sales agency. 4 case studies. Airtable integration & notify people action.\\n- [($30K MRR) #42 Connecting the dots in April 2022](https://fibery.io/blog/chronicles-42/) \u2014 TLDR: \ud83c\uddfa\ud83c\udde6 Ukrainian war affected our performance. $30K MRR \ud83d\udc0c. 69 reviews in G2 \u2764\ufe0f. Marketing for customer-built products is hard \ud83e\udd49. 12 customer stories \ud83d\udc7b. 2 hours downtime \ud83e\udd72. New navigation \u26f5\ufe0f. My Space \ud83d\udd12.\\n\\nImagine a candidate who is considering two or more similar startups. Guess what might convince them to go with Fibery? Progress. Or, more exactly, an understanding that Fibery is *persistently* making progress and, therefore, has a decent chance to become successful. Delivered through these very updates.\\n\\n*Last year, Michael (Fibery\u2019s CEO) started writing year-in-review posts too. I didn\u2019t mention them because there\u2019s just one post for now. You can read his 2021 review [here](https://fibery.io/blog/fibery-2021/).*\\n\\n##### **Open Startup page with metrics**\\n\\nThe second tool that Fibery employs to share their progress is the [/open-startup page](https://fibery.io/open-startup). Like monthly updates, it gives candidates a good idea of how the business is doing. This understanding, however, comes from a different source: pure numbers. And numbers often speak louder than words.\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of Fibery\'s Open startup page\\"\\n    source=\\"img/worth-joining/fibery-open-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n#### **How PostHog communicates their progress**\\n\\n##### **Story page in the handbook**\\n\\nIn the PostHog\u2019s handbook, they have a page called [Story](https://posthog.com/handbook/company/story). It succinctly shows the milestones the company has hit so far. For each milestone, they offer a clear and concise explanation of what happened, sometimes no longer than a sentence. As a result, candidates can get a good idea of how things are going *in less than a minute.* That\u2019s something to aspire to.\\n\\nHere\u2019s the section titles:\\n\\n- Jan 2020: The start\\n- Feb 2020: Launch\\n- Apr 2020: $3M Seed round\\n- May 2020: First 1,000 users\\n- Oct 2020: Billions of events supported\\n- Nov 2020: Building a platform\\n- Dec 2020: $9M Series A\\n- Jun 2021: $15M Series B\\n- Sep 2021: Product Market fit achieved for PostHog Scale\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of PostHog\'s Story page\\"\\n    source=\\"img/worth-joining/posthog-story-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n#### **How we at Wasp communicate our progress**\\n\\n##### **Blog posts covering big milestones (YC, $1.5m seed)**\\n\\nFor each milestone, Matija and Martin (Wasp founders) write a blog post describing not only what they accomplished but also *how* they did it.\\n\\nFor example, when Wasp got into YC, they didn\u2019t just post the news on Twitter. They wrote a blog about [their journey to Y Combinator](https://wasp-lang.dev/blog/2021/02/23/journey-to-ycombinator). It got thousands of views.\\n\\nSame with fundraising. When Wasp closed a $1.5m seed, Matija documented and shared their fundraising learnings in [a blog post](https://wasp-lang.dev/blog/2021/11/22/fundraising-learnings). It ended up on the HN frontpage. (Incidentally, this post communicates something important about the founders. It takes persistence to run 250+ meetings in 98 days.)\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of Wasp\'s fundraising learnings blog post\\"\\n    source=\\"img/worth-joining/wasp-fundraising-learnings-post-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n##### **Monthly newsletter with updates**\\n\\nTo keep the momentum, Matija also writes [a monthly newsletter](https://us4.campaign-archive.com/home/?u=8139c7de74df98aa17054b235&id=f0c6ba5f1d). It\u2019s similar to Michael\u2019s Startup Diary in substance, but has a different style. Wasp style. (Which, again, communicates our culture.)\\n\\nLike PostHog\u2019s Story page, Wasp\u2019s monthly updates give candidates a bird\u2019s eye view over everything that\u2019s happened in the past two years. To anyone interested in connecting the dots, this page is a gem.\\n\\n<ImgWithCaption\\n    alt=\\"A screenshot of Wasp\'s monthly newsletter archives\\"\\n    source=\\"img/worth-joining/wasp-monthly-newsletter-min.png\\"\\n    caption=\\"\\"\\n/>\\n\\n## **So, why should people join your startup?**\\n\\n*The founders are interesting / fun / smart / human / you name it*\\n\\n*The team is great*\\n\\n*The culture is amazing*\\n\\n*The business is doing well*\\n\\nBy communicating all these reasons well, what Canny, Fibery, PostHog, and (we hope!) Wasp really end up transmitting is two powerful messages:\\n\\n- The company is likely to succeed\\n- Working there will be awesome\\n\\nThese two messages are the real answer to \u201cwhy people should join your company.\u201d The trick, however, and the reason why I wrote this post, is that you can only transmit them indirectly. You can\u2019t say \u201cour founders are great.\u201d You need to provide candidates with many-many facts about the founders, which their minds will then fuse into this abstract conclusion. Ditto for expertise, team, culture, and progress. Eventually, these first-level abstractions will blend into still broader ones: \u201cthe company is likely to succeed\u201d and \u201cworking there will be awesome.\u201d\\n\\nThus, there\u2019s no single, ultimate answer to \u201cwhy people should join your company.\u201d There\u2019s only a complex system of concrete, specific units of information from which candidates make the answer themselves. In other words, you can\u2019t teach them why your company is likely to succeed and why working here will be awesome. But you can outline the facts and let them learn for themselves. I hope this post shows how to do that outlining well, and I hope you will apply this knowledge to bring talented people onboard and build great things."},{"id":"/2022/06/24/ML-code-gen-vs-coding-by-hand-future","metadata":{"permalink":"/wasp-docs/blog/2022/06/24/ML-code-gen-vs-coding-by-hand-future","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-06-24-ML-code-gen-vs-coding-by-hand-future.md","source":"@site/blog/2022-06-24-ML-code-gen-vs-coding-by-hand-future.md","title":"ML code generation vs. coding by hand - what we think programming is going to look like","description":"We are working on a config language / DSL for building web apps that integrates with React & Node.js. A number of times we\'ve been asked \u201cWhy are you bothering creating a new language for web app development? Isn\u2019t Github Copilot\\\\ soon going to be generating all the code for developers anyhow?*\u201d.","date":"2022-06-24T00:00:00.000Z","formattedDate":"June 24, 2022","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"ML","permalink":"/wasp-docs/blog/tags/ml"},{"label":"language","permalink":"/wasp-docs/blog/tags/language"}],"readingTime":10.975,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"ML code generation vs. coding by hand - what we think programming is going to look like","authors":["matijasos"],"image":"/img/language-lifecycle-copilot.png","tags":["webdev","wasp","ML","language"]},"prevItem":{"title":"How to communicate why your startup is worth joining","permalink":"/wasp-docs/blog/2022/08/15/how-to-communicate-why-your-startup-is-worth-joining"},"nextItem":{"title":"Feature Announcement - Wasp Jobs","permalink":"/wasp-docs/blog/2022/06/15/jobs-feature-announcement"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n\\nWe are working on a config language / DSL for building web apps that integrates with React & Node.js. A number of times we\'ve been asked \u201c*Why are you bothering creating a new language for web app development? Isn\u2019t Github Copilot\\\\* soon going to be generating all the code for developers anyhow?*\u201d.\\n\\nThis is on our take on the situation and what we think things might look like in the future.\\n\\n\x3c!--truncate--\x3e\\n\\n:::danger Trending post!\\n\\nThis post was trending on HackerNews - you can see the discussion [here](https://news.ycombinator.com/item?id=32098144).\\n\\n:::\\n\\n## Why (ML) code generation?\\n\\nIn order to make development faster, we came up with IDE autocompletion - e.g. if you are using React and start typing `componentDid`, IDE will automatically offer to complete it to `componentDidMount()` or `componentDidLoad()`. Besides saving keystrokes, maybe even more valuable is being able to see what methods/properties are available to us within a current scope. IDE being aware of the project structure and code hierarchy also makes refactoring much easier.\\n\\n**Although that\u2019s already great, how do we take it to the next level?** Traditional IDE support is based on rules written by humans and if we e.g. wanted to make IDE capable of implementing common functions for us, there would be just too many of them to catalogize and maintain by hand.\\n\\nIf there was only a way for a computer to analyze all the code we\u2019ve written so far and learn by itself how to autocomplete our code and what to do about humanity in general, instead of us doing all the hard work ...\\n\\nDelicious and moist cake aside, we actually have this working! Thanks to the latest advances in machine learning, IDEs can now do some really cool things like proposing the full implementation of a function, based on its name and the accompanying comments:\\n\\n<ImgWithCaption\\n    alt=\\"Copilot example - text sentiment\\"\\n    source=\\"img/copilot-example-sentiment.gif\\"\\n    caption=\\"GitHub Copilot generating a whole function body based on its signature and the comments on top of it.\\"\\n/>\\n\\nThis is pretty amazing! The example above is powered by [Github Copilot](https://copilot.github.com/) - it\u2019s essentially a neural network trained on a huge amount of publicly available code. I will not get into the technical details of how it works under the hood, but there are [lots](https://betterprogramming.pub/ai-review-github-copilot-d43afde51a5a#:~:text=They%20fine%2Dtuned%20the%20Codex,code%20it\'s%20been%20trained%20on.) [of great](https://www.fast.ai/2021/07/19/copilot/) [articles](https://arxiv.org/abs/2107.03374) covering the science behind it.\\n\\n**Seeing this, questions arise - what does this mean for the future of programming**? Is this just IDE autocompletion on steroids or something more? Do we need to keep bothering with manually writing code, if we can just type in the comments what we want and that\u2019s it?\\n\\n## Who maintains the code once it\u2019s generated?\\n\\nWhen thinking about how ML code generation affects the overall development process, there is one thing to consider that often doesn\u2019t immediately spring to mind when looking at the impressive Copilot examples.\\n\\n:::note\\nFor the purposes of this post, I will not delve into the questions of code quality, [security](https://www.theinsaneapp.com/2021/09/github-copilot-generated-40-percent-insecure-code.html), [legal & privacy issues](https://fosspost.org/github-copilot/), pricing, and others of similar character that are often brought up in these early days of ML code generation. Let\u2019s just assume all this is sorted out and see what happens next.\\n:::\\n\\n**The question is - what happens with the code once it is generated? Who is responsible for it and who will maintain and refactor it in the future?**\\n\\n<ImgWithCaption\\n    alt=\\"Devs still need to maintain generated code\\"\\n    source=\\"img/always-has-been-copilot.png\\"\\n/>\\n\\nAlthough ML code generation helps with getting the initial code written, it cannot do much beyond that - if that code is to be maintained and changed in the future (and if anyone uses the product, it is), the developer still needs to fully own and understand it.\\n\\nImagine all we had was an assembly language, but IDE completion worked really well for it, and you could say \u201cimplement a function that sorts an array, ascending\u201d and it would produce the required code perfectly. Would that still be something you\u2019d like to return to in the future once you need to change your sort to descending \ud83d\ude05\xa0? \\n\\nIn other words, it means Copilot and similar solutions do not reduce the code complexity nor the amount of knowledge required to build features, they just help write the initial code faster, and bring the knowledge/examples closer to the code (which is really helpful). If a developer accepts the generated code blindly, they are just creating tech debt and pushing it forward.\\n\\n## Meet the big A - Abstraction \ud83d\udc46\\n\\nIf Github Copilot and others cannot solve all our troubles of learning how to code and understanding in detail how session management via JWT works, what can? \\n\\nAbstraction - that\u2019s how programmers have been dealing with the code repetition and reducing complexity for decades - by creating libraries, frameworks, and languages. It is how we advanced from vanilla JS and direct DOM manipulation to jQuery and finally to UI libraries such as React and Vue.\\n\\nIntroducing abstractions inevitably means giving up on a certain amount of power and flexibility (e.g. when summing numbers in Python you don\u2019t get to exactly specify which CPU registers are going to be used for it), but the point is that, if done right, you don\u2019t need nor want such power in the majority of the cases.\\n\\n<ImgWithCaption\\n    alt=\\"Abstraction equals less responsibility\\"\\n    source=\\"img/uncle-ben-great-power.jpg\\"\\n    caption=\\"What Uncle Ben actually meant: avoiding responsibility is the main benefit of abstraction! (Peter totally missed the point, unfortunately, and became Spiderman instead of learning how to code)\\"\\n/>\\n\\n**The only way not to be responsible for a piece of code is that it doesn\u2019t exist in the first place**. \\n\\nBecause as soon as pixels on the screen change their color it\u2019s something you have to worry about, and that is why the main benefit of all frameworks, languages, etc. is *less code* == *less decisions* == *less responsibility.*\\n\\nThe only way to have less code is to make less decisions and provide fewer details to the computer on how to do a certain task - ideally, we\u2019d just state what we want and we wouldn\u2019t even care about how it is done, as long as it\u2019s within the time/memory/cost boundaries we have (so we might need to state those as well).\\n\\nLet\u2019s take a look at the very common (and everyone\u2019s favorite) feature in the world of web apps - authentication (yaay \u2620\ufe0f\xa0\ud83d\udd2b)! The typical code for it will look something like this:\\n\\n```js title=\\"Auth on the backend in Node.js - example\\"\\nimport jwt from \'jsonwebtoken\'\\nimport SecurePassword from \'secure-password\'\\nimport util from \'util\'\\n\\nimport prisma from \'../dbClient.js\'\\nimport { handleRejection } from \'../utils.js\'\\nimport config from \'../config.js\'\\n\\nconst jwtSign = util.promisify(jwt.sign)\\nconst jwtVerify = util.promisify(jwt.verify)\\n\\nconst JWT_SECRET = config.auth.jwtSecret\\n\\nexport const sign = (id, options) => jwtSign({ id }, JWT_SECRET, options)\\nexport const verify = (token) => jwtVerify(token, JWT_SECRET)\\n\\nconst auth = handleRejection(async (req, res, next) => {\\n  const authHeader = req.get(\'Authorization\')\\n  if (!authHeader) {\\n    return next()\\n  }\\n\\n  if (authHeader.startsWith(\'Bearer \')) {\\n    const token = authHeader.substring(7, authHeader.length)\\n\\n    let userIdFromToken\\n    try {\\n      userIdFromToken = (await verify(token)).id\\n    } catch (error) {\\n      if ([\'TokenExpiredError\', \'JsonWebTokenError\', \'NotBeforeError\'].includes(error.name)) {\\n        return res.status(401).send()\\n      } else {\\n        throw error\\n      }\\n    }\\n\\n    const user = await prisma.user.findUnique({ where: { id: userIdFromToken } })\\n    if (!user) {\\n      return res.status(401).send()\\n    }\\n\\n    const { password, ...userView } = user\\n\\n    req.user = userView\\n  } else {\\n    return res.status(401).send()\\n  }\\n\\n  next()\\n})\\n\\nconst SP = new SecurePassword()\\n\\nexport const hashPassword = async (password) => {\\n  const hashedPwdBuffer = await SP.hash(Buffer.from(password))\\n  return hashedPwdBuffer.toString(\\"base64\\")\\n}\\n\\nexport const verifyPassword = async (hashedPassword, password) => {\\n  try {\\n    return await SP.verify(Buffer.from(password), Buffer.from(hashedPassword, \\"base64\\"))\\n  } catch (error) {\\n    console.error(error)\\n    return false\\n  }\\n}\\n```\\n\\nAnd this is just a portion of the backend code (and for the username & password method only)! As you can see, we have quite a lot of flexibility here and get to do/specify things like:\\n\\n- choose the implementation method for auth (e.g. session or JWT-based)\\n- choose the exact npm packages we want to use for the token (if going with JWT) and password management\\n- parse the auth header and specify for each value (`Authorization`, `Bearer`, \u2026) how to respond\\n- choose the return code (e.g. 401, 403) for each possible outcome\\n- choose how the password is decoded/encoded (base64)\\n\\nOn one hand, it\u2019s really cool to have that level of control and flexibility in our code, but on the other hand, it\u2019s quite a lot of decisions (== mistakes) to be made, especially for something as common as authentication!\\n\\nIf somebody later asks \u201c*so why exactly did you choose secure-password npm package, or why exactly base64 encoding?*\u201d it\u2019s something we should probably answer with something else rather than \u201c*well, there was that SO post from 2012 that seemed pretty legit, it had almost 50 upvotes. Hmm, can\u2019t find it now though. Plus, it has \u2018secure\u2019 in the name, that sounds good, right?*\u201d\\n\\nAnother thing to keep in mind is that we should also track how things change over time, and make sure that after a couple of years we\u2019re still using the best practices and that the packages are regularly updated.\\n\\nIf we try to apply the principles from above (less code, less detailed instructions, stating **what** we want instead of **how** it needs to be done), the code for auth might look something like this: \\n\\n```wasp\\nauth: {\\n    userEntity: User,\\n    externalAuthEntity: SocialLogin,\\n    methods: {\\n      usernameAndPassword: {},\\n      google: {}\\n    },\\n    onAuthFailedRedirectTo: \\"/login\\",\\n    onAuthSucceededRedirectTo: \\"/dashboard\\"\\n  }\\n```\\nBased on this, the computer/compiler could take care of all the stuff mentioned above, and then depending on the level of abstraction, provide some sort of interface (e.g. form components, or functions) to \u201chook\u201d in with our own e.g. React/Node.js code (btw this is how it actually [works in Wasp](/docs/auth/overview)).\\n\\nWe don\u2019t need to care what exact packages or encryption methods are used beneath the hood - it is the responsibility we trust with the authors and maintainers of the abstraction layer, just like we trust that Python knows the best how to sum two numbers on the assembly level and that it is kept in sync with the latest advancements in the field. The same happens when we rely on the built-in data structures or count on the garbage collector to manage our program\u2019s memory well.\\n\\n## But my beautiful generated codez \ud83d\ude3f\ud83d\udcbb! What happens with it then?\\n\\nDon\u2019t worry, it\u2019s all still here and you can generate all the code you wish! The main point to understand here is that ML code generation and framework/language development complement rather than replace each other and are here to stay, which is ultimately a huge win for the developer community - they will keep making our lives easier and allow us to do more fun stuff (instead of implementing auth or CRUD API for the n-th time)!\\n\\nI see the evolution here as a cycle (or an upward spiral in fact, but that\u2019s beyond my drawing capabilities):\\n\\n1. **language/framework exists**, is mainstream, and a lot of people use it\\n2. **patterns start emerging** (e.g. implementing auth, or making an API call) \u2192 ML captures them, offers via autocomplete\\n3. **some of those patterns mature** and become stable \u2192 candidates for abstraction\\n4. **new, more abstract, language/framework** emerges\\n5. **back to step 1**.\\n\\n<ImgWithCaption\\n    alt=\\"Language evolution lifecycle\\"\\n    source=\\"img/language-lifecycle-copilot.png\\"\\n    caption=\\"It\u2019s the circle of (language) life, and it moves us all - Ingonyama nengw\' enamabala, \u2026\\"\\n/>\\n\\n## Conclusion\\n\\nThis means we are winning on both sides - when the language is mainstream we can benefit from ML code generation, helping us write the code faster. On the other hand, when the patterns of code we don\u2019t want to repeat/deal with emerge and become stable we get a whole new language or framework that allows us to write even less code and care about fewer implementation details!\\n\\n<ImgWithCaption\\n    alt=\\"Fizz Buzz with Copilot - stop\\"\\n    source=\\"img/fizz-buzz-copilot-stop.gif\\"\\n    caption=\\"The future is now, old man.\\"\\n/>\\n\\n\\n\\\\**Not to be biased, there are also other solutions offering similar functionality - e.g. [TabNine](https://www.tabnine.com/), [Webstorm has its own](https://www.jetbrains.com/help/webstorm/auto-completing-code.html#ml_completion), [Kite](https://www.kite.com/), [GPT Code Clippy (OSS attempt)](https://github.com/CodedotAl/gpt-code-clippy) et al., but Github Copilot recently made the biggest splash.*\\n\\n### Writing that informed this post\\n- [Is GitHub Copilot a blessing, or a curse? (fast.ai)](https://www.fast.ai/2021/07/19/copilot/) - an objective and extremely well-written overview of GitHub Copilot with real-world examples\\n- [6 Reasons Why You Should Avoid GitHub Copilot and \u201cFly Solo\u201d Instead](https://betterprogramming.pub/6-reasons-why-you-should-avoid-github-copilot-and-fly-solo-instead-8a948665433f) - brings up and questions the potential downsides of ML code generation and Github Copilot\\n- [Github Copilot Wants to Play Chess Instead of Code](https://dagshub.com/blog/github-copilot-not-code/) - a fresh approach to GitHub Copilot where it is used as a conversation partner instead of writing code!\\n- [Conversational Programming](https://jessmart.in/articles/copilot) - a forward looking post that proposes a future where AI will serve as a \\"sparring partner\\" and help us reach the optimal solution through iterations \\n\\n### Thanks to the reviewers\\n\\n[Jeremy Howard](https://twitter.com/jeremyphoward), [Maxi Contieri](https://twitter.com/mcsee1), [Mario Kostelac](https://twitter.com/mariokostelac), [Vladimir Blagojevic](https://twitter.com/vladblagoje), [Ido Nov](https://twitter.com/idonov8), [Krystian Safjan](https://github.com/izikeros), [Favour Kelvin](https://twitter.com/fakela6), [Filip Sodic](https://twitter.com/filipsodic), [Shayne Czyzewski](https://twitter.com/shayneczyzewski) and [Martin Sosic](https://twitter.com/MartinSosic) - thank you for your generous comments, ideas and suggestions! You made this post better and made sure I don\'t go overboard with memes :)."},{"id":"/2022/06/15/jobs-feature-announcement","metadata":{"permalink":"/wasp-docs/blog/2022/06/15/jobs-feature-announcement","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-06-15-jobs-feature-announcement.md","source":"@site/blog/2022-06-15-jobs-feature-announcement.md","title":"Feature Announcement - Wasp Jobs","description":"<img alt=\\"You get a job!\\"","date":"2022-06-15T00:00:00.000Z","formattedDate":"June 15, 2022","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"feature","permalink":"/wasp-docs/blog/tags/feature"},{"label":"jobs","permalink":"/wasp-docs/blog/tags/jobs"}],"readingTime":6.01,"hasTruncateMarker":true,"authors":[{"name":"Shayne Czyzewski","title":"Founding Engineer @ Wasp","url":"https://github.com/shayneczyzewski","imageURL":"https://github.com/shayneczyzewski.png","key":"shayneczyzewski"}],"frontMatter":{"title":"Feature Announcement - Wasp Jobs","authors":["shayneczyzewski"],"image":"/img/jobs-snippet2.png","tags":["webdev","wasp","feature","jobs"]},"prevItem":{"title":"ML code generation vs. coding by hand - what we think programming is going to look like","permalink":"/wasp-docs/blog/2022/06/24/ML-code-gen-vs-coding-by-hand-future"},"nextItem":{"title":"How to win a hackathon. Brief manual.","permalink":"/wasp-docs/blog/2022/06/01/gitpod-hackathon-guide"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n<p align=\\"center\\">\\n  <img alt=\\"You get a job!\\"\\n      src={useBaseUrl(\'img/jobs-oprah.gif\')}\\n      width=\\"300px\\"\\n  />\\n</p>\\n\\n\x3c!--truncate--\x3e\\n\\n<WaspIntro />\\n<InBlogCta />\\n\\n## **Storytime**\\n\\n<p align=\\"center\\">\\n  <img alt=\\"Storytime\\"\\n      src={useBaseUrl(\'img/jobs-storytime.gif\')}\\n      width=\\"300px\\"\\n  />\\n</p>\\n\\nImagine you are working on the next unicorn SaaS web app and need to send a user an email, manipulate an uploaded image via an external API call, or recalculate some internal metrics every night. (Or, maybe you\u2019re doing some fancy blockchain thing for that frothy investment multiple; :D whatever it is, just envision an operation that may take a significant amount of time and/or fail.) How would you implement this?\\n\\n<p align=\\"center\\">\\n  <img alt=\\"Spinning!\\"\\n      src={useBaseUrl(\'img/jobs-spinner.gif\')}\\n      width=\\"30px\\"\\n  />\\n</p>\\n\\nYou wouldn\u2019t want the server to delay sending its HTTP response until those are done (unless you are one of those people who love seeing the Mac spinning icon), so you\'ll need something out-of-band from the normal request-response flow. Even in an event-loop-based system like Node.js, just calling an async function isn\'t ideal since you will need to handle failures, retries, and throttling, amongst other concerns. And sometimes we need to schedule tasks to run in the future, or repeatedly, so we need a completely different toolset.\\n\\nThe typical solution here is to use a job queue of some kind. They are not impossible to set up, of course, but there is a fair amount of boilerplate involved, some operational expertise/overhead required, and moving from one system to another when you outgrow it is usually a challenge. These are the exact areas where we feel Wasp can provide real value, so we are happy to introduce Wasp Jobs to help out with this!\\n\\n```js title=src/server/workers/github.js\\nimport axios from \'axios\'\\nimport { upsertMetric } from \'./utils.js\'\\n\\nexport async function workerFunction() {\\n  const response = await axios.get(\'https://api.github.com/repos/wasp-lang/wasp\')\\n\\n  const metrics = [\\n    { name: \'Wasp GitHub Stars\', value: response.data.stargazers_count },\\n    { name: \'Wasp GitHub Language\', value: response.data.language },\\n    { name: \'Wasp GitHub Forks\', value: response.data.forks },\\n    { name: \'Wasp GitHub Open Issues\', value: response.data.open_issues },\\n  ]\\n\\n  await Promise.all(metrics.map(upsertMetric))\\n\\n  return metrics\\n}\\n```\\n\\nWasp allows you to write a regular async JavaScript function (like the one above that gathers GitHub metrics and stores them in the DB) and have it run within the context of a job queue system, which we call an executor. You can manually submit work to be done on the server, or specify a cron schedule to have your job automatically invoked. And, best of all, as we add more job executors in the future, you can change where it runs on a single line in your .wasp file.\\n\\n## Most jobs have a boss. Our first job executor is a... pg-boss. \ud83d\ude05\\n\\n<p align=\\"center\\">\\n  <figure>\\n    <img alt=\\"Eeek\\"\\n        src={useBaseUrl(\'img/jobs-eyes.gif\')}\\n    />\\n    <figcaption>Me trying to lay off the job-related puns. Ok, ok, I\u2019ll quit. Ahhh!</figcaption>\\n  </figure>\\n</p>\\n\\nIn my prior life as a Ruby on Rails developer, the decision of how to implement jobs was pretty simple. You had Active Job at your disposal, and for backends, you would use something like Sidekiq or Delayed Job. In a similarly paved path, Python developers would have likely looked first to Celery.\\n\\nIn the JavaScript world, [Bull](https://github.com/OptimalBits/bull) is quite popular these days. However, we decided to use [pg-boss](https://github.com/timgit/pg-boss), as it too provides persistence, delayed jobs, and schedules (plus many other features). But critically, pg-boss uses PostgreSQL instead of Redis (like Bull) for storage and coordination, and this was important since we did not want to introduce any new infrastructure dependencies to our existing production stack.\\n\\nBut isn\u2019t a database as a queue an anti-pattern, you may ask? Well, historically I\u2019d probably say yes. However, PostgreSQL 9.5 added SKIP LOCKED, which it specifically mentions can aid in avoiding lock contention with multiple consumer queue-like workloads [[https://www.postgresql.org/docs/9.5/sql-select.html#SQL-FOR-UPDATE-SHARE](https://www.postgresql.org/docs/9.5/sql-select.html#SQL-FOR-UPDATE-SHARE)]. So for the low-volume background job workloads that many apps have, we feel using a database as a queue is a great compromise and starting point for many users from a benefit vs. complexity perspective.\\n\\nHowever, we will also continue to expand the number of job execution runtimes we support. Let us know in [Discord](https://discord.gg/rzdnErX) what you\u2019d like to see next!\\n\\n## Real Example - Updating Waspleau\\n\\nIf you are a regular reader of this blog (thank you, you deserve a raise! \ud83d\ude0a), you may recall we created an example app of a metrics dashboard called [Waspleau](https://wasp-lang.dev/blog/2022/01/27/waspleau) that used workers in the background to make periodic HTTP calls for data. In that example, we didn\u2019t yet have access to recurring jobs in Wasp, so we used Bull for scheduled jobs instead. To set up our queue-related logic we had to have this huge `setupFn` wiring it all up; but now, we can remove all that code and simply use jobs instead! Here is what the new DSL looks like:\\n\\n```wasp title=main.wasp\\n// A cron job for fetching GitHub stats\\njob getGithubStats {\\n  executor: PgBoss,\\n  perform: {\\n    fn: import { workerFunction } from \\"@server/workers/github.js\\"\\n  },\\n  schedule: {\\n    cron: \\"*/10 * * * *\\"\\n  }\\n}\\n\\n// A cron job to measure how long a webpage takes to load\\njob calcPageLoadTime {\\n  executor: PgBoss,\\n  perform: {\\n    fn: import { workerFunction } from \\"@server/workers/loadTime.js\\"\\n  },\\n  schedule: {\\n    cron: \\"*/5 * * * *\\",\\n    args: {=json {\\n      \\"url\\": \\"https://wasp-lang.dev\\",\\n      \\"name\\": \\"wasp-lang.dev Load Time\\"\\n    } json=}\\n  }\\n}\\n```\\n\\nAnd here is an example of how you can reference and invoke jobs on the server. *Note: We did not even need to do this step since jobs with a schedule are automatically configured to run at the desired time.*\\n```js title=src/server/serverSetup.js\\n/**\\n* These Jobs are automatically scheduled by Wasp.\\n* However, let\'s kick them off on server setup to ensure we have data right away.\\n*/\\nimport { github } from \'@wasp/jobs/getGithubStats.js\'\\nimport { loadTime } from \'@wasp/jobs/calcPageLoadTime.js\'\\n\\nexport default async function () {\\n  await github.submit()\\n  await loadTime.submit({\\n    url: \\"https://wasp-lang.dev\\",\\n    name: \\"wasp-lang.dev Load Time\\"\\n  })\\n}\\n```\\n\\nAnd voila, it is really that simple. Wasp takes care of setting up pg-boss and hooking up all your job callbacks, leaving you to focus on what matters- your own code. Here is a visual of what is happening behind the scenes:\\n\\n![Architecture](../static/img/jobs-arch.png)\\n\\nFor those interested, check out the [full diff here](https://github.com/wasp-lang/wasp/commit/1721371fc73f4485ca0046aafea2ee3fc0be41cf#diff-e158328e137176b595ad01641ba68faf82dbb88ccc5be3597009bb576fcd6505) and weep with joy for all those boilerplate lines of code we fired! We were also able to ax Redis from our infrastructure!\\n\\n## Looks neat! What\u2019s next?\\n\\nFirst off, please check out our docs for [Jobs](/docs/advanced/jobs). There, you will find all the info you need to start using them. Next, if you want to see the code for this example in full, you can find it here: [https://github.com/wasp-lang/wasp/tree/release/examples/waspleau](https://github.com/wasp-lang/wasp/tree/release/examples/waspleau)\\n\\nIn the future, we plan to add more job executors, including support for polyglot workers (imagine running your Python ML function from Wasp!). We are also open to any other ideas on how jobs can become more useful to you (like client-side access to server-side jobs, or client-side jobs using similar abstractions?). Let us know what you think!\\n\\n<hr />\\n\\n<small>Special thanks to Tim Jones for his hard work building an amazing OSS library, <a href=\\"https://github.com/timgit/pg-boss\\" target=\\"_blank\\">pg-boss</a>, and for reviewing this post. Please consider supporting that project if it solves your needs!</small>"},{"id":"/2022/06/01/gitpod-hackathon-guide","metadata":{"permalink":"/wasp-docs/blog/2022/06/01/gitpod-hackathon-guide","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-06-01-gitpod-hackathon-guide.md","source":"@site/blog/2022-06-01-gitpod-hackathon-guide.md","title":"How to win a hackathon. Brief manual.","description":"Wasp app deploye to Gitpod","date":"2022-06-01T00:00:00.000Z","formattedDate":"June 1, 2022","tags":[{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"gitpod","permalink":"/wasp-docs/blog/tags/gitpod"},{"label":"hackathon","permalink":"/wasp-docs/blog/tags/hackathon"}],"readingTime":3.815,"hasTruncateMarker":true,"authors":[{"name":"Maksym Khamrovskyi","title":"DevRel @ Wasp","key":"maksym36ua"}],"frontMatter":{"title":"How to win a hackathon. Brief manual.","authors":["maksym36ua"],"tags":["wasp","gitpod","hackathon"]},"prevItem":{"title":"Feature Announcement - Wasp Jobs","permalink":"/wasp-docs/blog/2022/06/15/jobs-feature-announcement"},"nextItem":{"title":"Meet the team - Filip Sodi\u0107, Founding Engineer","permalink":"/wasp-docs/blog/2022/05/31/filip-intro"}},"content":"import InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./\\\\_wasp-intro.md\';\\n\\n![Wasp app deploye to Gitpod](../static/img/gitpod-hackathon-preview.png)\\n\\n> _\\"All good thoughts and ideas mean nothing without the proper tools to achieve them.\\"_<br/> >_Jason Statham_\\n\\n**TL;DR:** Wasp allows you to build and deploy a full-stack JS web app with a single config file. [Gitpod](https://gitpod.io/) spins up fresh, automated developer environments in the cloud, in seconds. A perfect tandem to win a hackathon and enjoy free pizza even before other teams even started to set up their coding env and realized they need to update their node version.\\n\\n\x3c!--truncate--\x3e\\n\\n<WaspIntro />\\n<InBlogCta />\\n\\n## Intro:\\n\\nUsually, every hackathon starts from similar activities:<br/>\\n\\n1. **setting up a local dev environment**, especially if all the team members use different operating systems. There are always issues with the SDK/packages/compiler, etc.<br/>\\n2. **building project backbone** (folder structure, basic services, CRUD APIs, and so on).\\n\\nBoth of them are time-consuming, boring, and cause issues.\\n\\n![Dealing with routine might be frustrating](../static/img/I-quit.gif)\\n\\nThankfully, those issues can be avoided! Gitpod allows you to spin up a clean, already pre-set dev environment. And Wasp enables you to build a full-stack JS web app with a single config file (alongside your React and Node.js code). But first things first.\\n\\n![Pennywise luring into his openspace](../static/img/hackathon-pennywise.jpg)\\n\\n## Dev environment setup:\\n\\nGitpod spins up a bespoke dev environment in the cloud for any git branch (once you configured it for your project), on-demand. So you can start coding right away. Build, debug, commit and push your code in seconds, without any local SDK issues. After you\u2019ve finished \u2013 you can host your app after a couple of clicks and share the project with your teammate. You can even make changes to the same project simultaneously, leveraging a pair programming approach.\\n\\nSince Gitpod is a cloud-based workspace \u2013 spinning up a new application takes a couple of clicks.\\n\\n1. Fork https://github.com/gitpod-io/template-wasp and give it a meaningful name, e.g. \u201cMy Awesome Recipes App\u201d -> this is now a repo for your new web app.<br/>\\n2. In your newly created repo, check the Readme and click the \u201cOpen in Gitpod\u201d button<br/>\\n3. Login via Github<br/>\\n4. Allow pop-ups<br/>\\n5. That\u2019s it! Enjoy your fresh cloud-based dev environment!<br/>\\n\\n![Pennywise luring to take part in hackathon](../static/img/gitpod-roadmap.png)\\n\\nAn optional thing might be enabling the \u201cShare\u201d option to make the app accessible from the external internet.\\n\\n![How to share a workspace](../static/img/gitpod-share.jpg)\\n\\nYou can pick up one of the following IDE\u2019s, switch between light/dark themes and you can even install all your favorite extensions.\\n\\n![Gitpod IDE types](../static/img/gitpod-ide.jpg)\\n\\nSo, eventually, the workflow can look like this: someone from the team forks the template repo and shares it with others. Teammates open this repo in Gitpod, creating their own dev branches.\\n\\nVoila! \ud83e\udd73\\n\\nThe whole team is ready to code in a matter of seconds. After the team is done with the development, someone can pull all the changes, share the project, and present it to the judges.\\n\\nNo need to fix local issues, ensure the Node version is aligned, or configure the deployment pipeline for DigitalOcean. Gitpod does all development preparations. The only thing the team has to do \u2013 is to implement the idea ASAP. And here Wasp comes into play!\\n\\n## Building project backbone:\\n\\nOk, we\u2019ve successfully set up a shared dev environment. It\u2019s time to create a production-ready web app with just a few lines of code. Based on your needs \u2013 you can declare separate pages, routes, database models, etc. - it\u2019s super easy and intuitive!\\n\\nThe ideal case would be to:<br/>\\n\\n1. Check out the language overview: https://wasp-lang.dev/docs/general/language <br/>\\n2. Follow a 20-minutes tutorial on how to build a To-Do app with Wasp: https://wasp-lang.dev/docs/tutorial/create <br/>\\n\\nIt may seem a bit inconvenient: why spend time on learning, when you already can start building something meaningful? The short answer is: time-saving. Wasp\u2019s main point is to set you free from building time-consuming boilerplate. So even if you\u2019ll spend half of an hour learning the basics \u2013 you\u2019ll still be able to outrun other hackathon participants. While they will be copy-pasting CRUD API methods \u2013 you\u2019ll be building business logic.\\n\\nAnd 20 minutes is time well spent to become more productive. Setting up each team member\'s environment locally likely takes more than 20 minutes if you don\'t use Gitpod.\\n\\n## To wrap up:\\n\\nWe think that Wasp + Gitpod is a powerful toolset for speedrunning any hackathon. No matter how complex or ambitious your project is. If it\u2019s built with Node and React \u2013 nothing can stop you from winning. Good luck, have fun, and enjoy that pizza \ud83c\udf55!"},{"id":"/2022/05/31/filip-intro","metadata":{"permalink":"/wasp-docs/blog/2022/05/31/filip-intro","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-05-31-filip-intro.md","source":"@site/blog/2022-05-31-filip-intro.md","title":"Meet the team - Filip Sodi\u0107, Founding Engineer","description":"Welcome Filip!","date":"2022-05-31T00:00:00.000Z","formattedDate":"May 31, 2022","tags":[{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"new-hire","permalink":"/wasp-docs/blog/tags/new-hire"}],"readingTime":5.09,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"Meet the team - Filip Sodi\u0107, Founding Engineer","authors":["matijasos"],"image":"/img/filip-intro-banner.png","tags":["wasp","new-hire"]},"prevItem":{"title":"How to win a hackathon. Brief manual.","permalink":"/wasp-docs/blog/2022/06/01/gitpod-hackathon-guide"},"nextItem":{"title":"Build a metrics dashboard with background jobs in Wasp - Say hello to Waspleau!","permalink":"/wasp-docs/blog/2022/01/27/waspleau"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\n\\n![Welcome Filip!](../static/img/filip-intro-banner.png)\\n\\nFind Filip on [GitHub](https://github.com/sodic).\\n\\n\x3c!--truncate--\x3e\\n\\n<WaspIntro />\\n<InBlogCta />\\n\\n**We are immensely excited to welcome Filip, our latest Founding Software\\nEngineer!** Filip is an experienced engineer and a passionate computer\\nscientist - his two biggest passions are building compilers/designing\\nprogramming languages and web development (what a lucky coincidence, right?\\n;)). Before joining Wasp, Filip earned his stripes in various domains, ranging\\nfrom bioinformatics and the betting industry to route optimisation software.\\nWelcome to the team, Filip - we can\'t wait to see what you build!\\n\\n#### Let\u2019s start with two truths and a lie about yourself.\\n\\n- I found out about Wasp through a friend/former colleague and still haven\u2019t\\n  bought him a drink to say thanks.\\n- I\u2019ve designed and implemented my own Turing-complete functional programming\\n  language that compiles to JavaScript.\\n- I wasted nearly 30 hours customizing my setup to maximize productivity and\\n  probably ended up in a less productive state.\\n\\n#### Which statement was the lie above? Any interesting stories to share?\\n\\nThe last one was a lie. I wish it were only 30 hours :)\\n\\nI did design [a programming language](https://sodic.github.io/func). It is\\nTuring-complete but still far from being practical. For one, it can\u2019t print\\nstuff to the screen (or perform any other side effects).\\n\\nI never did buy that drink. He\u2019s not letting me forget about it, though.\\n\\n#### Why did you join Wasp? What did you do before?\\n\\nI\'ve wanted to work on a project where I\'d get a chance to design a language\\nand build a compiler for quite some time now. While I did develop my own\\nlanguage on the side (and even graduated with it), I thought getting paid for\\ndoing something similar this early in my career was pretty far-fetched.\\n\\nAlmost all my paid work had something to do with the web, whether on the\\nclient-side or the server-side. I enjoy nearly all parts of web development\\n(yes, even styling websites with CSS :), but one thing I\'ve always found\\nannoying was dealing with all the boilerplate. Whenever I start building\\nsomething, I spend most of my time implementing the same repetitive stuff\\n(e.g., authentication, databases, SPA routing, API routes, etc.) and relearning\\nall the best practices that come with it.\\n\\nAnd then, one day, a friend of mine mentioned Wasp - a DSL aiming to eliminate\\nboilerplate from web apps. The product was a perfect fit based on everything I\\nknow and want to do! Also, I shared a college advisor with the founders (Martin\\nand Matija) and only heard great things about them.\\n\\nThe whole thing sounded almost too good to be true, so joining them to work on\\nWasp was an easy decision.\\n\\n#### What is your favorite language?\\n\\nI don\u2019t have many favorite things, especially when it comes to technology.\\nAfter going through several cycles of falling in love with a\\nlanguage/framework/tool before becoming annoyed by its shortcomings and\\nlimitations, I made peace with the fact that everything\u2019s a tradeoff. I\u2019ll\\ngenerally choose a language depending on:\\n- the problem at hand\\n- its current position in the aforementioned cycle :)\\n\\nWith that said, I\'m currently most excited about properly learning Haskell. It\\nalways looked interesting and exotic. I\'ve gotten a few opportunities to play\\nwith the language through university courses and on my own but never really had\\nan excuse to use it in my day-to-day.\\n\\n#### What are you most excited about in Wasp?\\n\\nFrom a developer\u2019s perspective, I\u2019m definitely most excited about designing the\\nDSL and working on the compiler.\\n\\nFrom a product standpoint, I love the idea of never again having to implement\\nan authentication system.\\n\\n#### What\u2019s a feature or project you\u2019re most proud of that you worked on in the past three months?\\n\\n[Definitely this thing](https://www.youtube.com/watch?v=dQw4w9WgXcQ).\\n\\n#### How did you start coding?\\n\\nNo exciting story to tell here, I\u2019m afraid.\\n\\nI enrolled in computer science college and first started programming as a part\\nof my regular \u201cIntroduction to programming\u201d course.\\n\\nBefore then, I didn\u2019t really know what programming was. In fact, I  wanted to\\nstudy electrical engineering. Unluckily for most but luckily for me, our\\ncollege does not let you choose your major (i.e., electrical engineering or\\ncomputing) right away. Instead, they make you go through a shared year of\\nuniversal (and some not-so-universal) courses, only allowing you to specialize\\nat the start of your second year. Thanks to this quirk, I had a chance to\\nencounter programming, change my mind, and enroll in computer science.\\n\\n#### Your dev setup?\\n\\nAs far as hardware goes, it\u2019s pretty basic. I use a regular laptop that\u2019s\\nstarting to show signs of age (ASUS N550JX), a cheap Lenovo mouse, and my\\nlaptop\u2019s integrated keyboard.\\n\\nThe software setup is a bit more interesting. I\u2019m usually on Manjaro Linux with\\nthe i3 tiling window manager. I jump between editors depending on what I\u2019m\\ndoing. It\u2019s sometimes Vim, but mainly something more powerful that comes with\\nVim emulation (e.g., VS Code or JetBrains IDEs). My preferred shell is zsh\\n(sorry Frane).\\n\\n#### `camelCase` or `snake_case`?\\n\\nNoPreference\\n\\n#### What is your current favorite gem, library, tool, or anything else that helps you with your work? Why?\\n\\nThat would have to be [ranger](https://github.com/ranger/ranger)!\\n\\nRanger is a terminal file manager I use daily, mainly because it makes my work\\nin the shell much faster. It also gives me a consistent interface for moving\\naround, previewing files, and interacting with the file system. In other words,\\nmy workflow doesn\'t have to change much regardless of where I am (Mac, Linux\\nDesktop, or Linux server).\\n\\n#### One piece of advice you\u2019d give to budding developers?\\n\\nIt\u2019s easy to get stuck in an endless loop of polishing and fine-tuning your\\nprojects because you think they aren\u2019t ready yet. Good enough sometimes truly\\nis good enough and things can often be considered done before _you_ consider\\nthem done.\\n\\nI still occasionally need to give this advice to myself :).\\n\\n####  Lastly, where can people find or connect with you online?\\n\\nGitHub: [https://github.com/sodic](https://github.com/sodic)\\n\\nLinkedIn: [https://www.linkedin.com/in/filipsodic/](https://www.linkedin.com/in/filipsodic/)"},{"id":"/2022/01/27/waspleau","metadata":{"permalink":"/wasp-docs/blog/2022/01/27/waspleau","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2022-01-27-waspleau.md","source":"@site/blog/2022-01-27-waspleau.md","title":"Build a metrics dashboard with background jobs in Wasp - Say hello to Waspleau!","description":"Hello, Waspleau","date":"2022-01-27T00:00:00.000Z","formattedDate":"January 27, 2022","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"}],"readingTime":4.55,"hasTruncateMarker":true,"authors":[{"name":"Shayne Czyzewski","title":"Founding Engineer @ Wasp","url":"https://github.com/shayneczyzewski","imageURL":"https://github.com/shayneczyzewski.png","key":"shayneczyzewski"}],"frontMatter":{"title":"Build a metrics dashboard with background jobs in Wasp - Say hello to Waspleau!","authors":["shayneczyzewski"],"image":"/img/waspleau-screenshot.png","tags":["webdev","wasp"]},"prevItem":{"title":"Meet the team - Filip Sodi\u0107, Founding Engineer","permalink":"/wasp-docs/blog/2022/05/31/filip-intro"},"nextItem":{"title":"Meet the team - Shayne Czyzewski, Founding Engineer","permalink":"/wasp-docs/blog/2021/12/21/shayne-intro"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n![Hello, Waspleau](../static/img/waspleau-screenshot.png)\\n\\n<p align=\\"center\\">\\n  <Link to={\'https://waspleau-app-client.fly.dev/\'}>See Waspleau here!</Link> | <Link to={\'https://github.com/wasp-lang/wasp/blob/release/examples/waspleau\'}>See the code</Link>\\n</p>\\n\\nWe\'ve built a dashboard powered by a job queue using Wasp!\\n\\n\x3c!--truncate--\x3e\\n\\n<WaspIntro />\\n<InBlogCta />\\n\\n![Measure all the metrics!](../static/img/waspleau-metrics.png)\\n\\n## Hello, Waspleau!\\n\\nLet\u2019s face it - metrics are all around us. Wouldn\u2019t it be great if there was a quick and easy way to build a nice-looking metrics dashboard from data pulled in by HTTP calls to many different sources, cache the data in-memory, and periodically update it via background jobs? Why yes, yes it would... so we made an example Wasp app called Waspleau that does just that!\\n\\nHere is what it looks like live: https://waspleau-app-client.fly.dev/ There is also a screenshot at the top of this post for those who refrain from clicking on any unknown web links for fear of being **Rickrolled**. Respect.\\n\\n## \u201cShow me the code\u201d\\n\\nSo, what do we need to get started? First, we need a way to schedule and run jobs; for this, we decided to use [Bull](https://github.com/OptimalBits/bull). Ok, let\u2019s wire it up. This should be easy, right? We can add external NPM dependencies in our Wasp files like so:\\n\\n```wasp title=\\"main.wasp\\"\\napp waspleau {\\n  title: \\"Waspleau\\",\\n\\n  dependencies: [\\n    (\\"bull\\", \\"4.1.1\\"),\\n    (\\"axios\\", \\"^0.21.1\\")\\n  ]\\n}\\n```\\n\\nBut where do we declare our queue and processing callback functions in Wasp? Uh oh...\\n\\n![Sad](../static/img/waspleau-sad.png)\\n\\n### `server.setupFn` for queue setup\\n\\nThankfully, Waspleau can leverage a powerful and flexible [hook supplied by Wasp](https://wasp-lang.dev/docs/language/basic-elements#setupfn) called `server.setupFn`. This declares a JavaScript function that will be executed on server start. Yahoo! This means we can do things like the following:\\n\\n```wasp title=\\"main.wasp\\"\\napp waspleau {\\n  ...\\n\\n  server: {\\n    setupFn: import serverSetup from \\"@server/serverSetup.js\\"\\n  }\\n}\\n```\\n\\n```js title=\\"src/server/serverSetup.js\\"\\nimport Queue from \'bull\'\\n\\nconst queue = new Queue(\'waspleau\', process.env.REDIS_URL || \'redis://127.0.0.1:6379\',\\n  { defaultJobOptions: { removeOnComplete: true } }\\n)\\n\\nqueue.process(\'*\', async (job) => { ... })\\n\\nexport default async () => {\\n  // To initially populate the queue, we can do:\\n  await queue.add({ ... }) // first run, one-off job\\n  await queue.add({ ... }, { repeat: { cron: \'*/10 * * * *\' } }) // recurring job\\n}\\n```\\n\\n### Abstracting workers and job processing\\n\\nAwesome, we can now enqueue and process background jobs, but how can we make it easy to create many different kinds of jobs and schedule them to run at different intervals? For Waspleau, we created our own type of worker object convention to help standardize and simplify adding more:\\n\\n```js title=\\"src/server/workers/template.js\\"\\nconst workerFunction = async (opts) => {\\n  return [\\n    { name: \'Metric 1 name\', value: \'foo\', updatedAt: ... },\\n    { name: \'Metric 2 name\', value: \'bar\', updatedAt: ... },\\n  ]\\n}\\n\\nexport const workerTemplate = { name: \'Job Name\', fn: workerFunction, schedule: \'*/10 * * * *\' }\\n```\\n\\nWith this `workerFunction` setup, we can return one or more metrics per worker type. Waspleau can easily use any module that exports this shape. Here is a real example from the demo that makes HTTP calls to GitHub\u2019s API with Axios:\\n\\n```js title=\\"src/server/workers/github.js\\"\\nimport axios from \'axios\'\\n\\nconst workerFunction = async (opts) => {\\n  console.log(\'github.js workerFunction\')\\n\\n  const now = Date.now()\\n\\n  try {\\n    const response = await axios.get(\'https://api.github.com/repos/wasp-lang/wasp\')\\n\\n    return [\\n      { name: \'Wasp GitHub Stars\', value: response.data.stargazers_count, updatedAt: now },\\n      { name: \'Wasp GitHub Language\', value: response.data.language, updatedAt: now },\\n      { name: \'Wasp GitHub Forks\', value: response.data.forks, updatedAt: now },\\n      { name: \'Wasp GitHub Open Issues\', value: response.data.open_issues, updatedAt: now },\\n    ]\\n  } catch (error) {\\n    console.error(error)\\n    return []\\n  }\\n}\\n\\nexport const githubWorker = { name: \'GitHub API\', fn: workerFunction, schedule: \'*/10 * * * *\' }\\n```\\n\\n_Note: Please see the [actual serverSetup.js file](https://github.com/wasp-lang/wasp/blob/release/examples/waspleau/src/server/serverSetup.js) for how we use this abstraction in practice._\\n\\n### Server \u2192 client\\n\\nWe now have jobs running and data updating at regular intervals, nice, but we still need a way to send that data down the wire. Here, we expose the in-memory data from our `server.setupFn` module so our queries can also use it:\\n\\n```wasp title=\\"main.wasp\\"\\n...\\n\\nquery dashboard {\\n  fn: import { refreshDashboardData } from \\"@server/dashboard.js\\"\\n}\\n```\\n\\n```js title=\\"src/server/dashboard.js\\"\\nimport { getDashboardData } from \'./serverSetup.js\'\\n\\nexport const refreshDashboardData = async (_args, _context) => {\\n  return getDashboardData()\\n}\\n```\\n\\n```js title=\\"src/server/serverSetup.js\\"\\n...\\n\\nconst dashboardData = {} // This is updated in the queue process callback\\nexport const getDashboardData = () => Object.values(dashboardData).flat()\\n```\\n\\nFrom there, we can request it on the frontend in React components as usual and also set a one-minute client-side refetch interval just for good measure:\\n\\n```js title=\\"src/client/MainPage.js\\"\\n...\\n\\nconst { data: dashboardData, isFetching, error } = useQuery(refreshDashboardData, null, { refetchInterval: 60 * 1000 })\\n\\n...\\n```\\n\\n## Congratulations, let\u2019s dance!\\n\\nWhew, we did it! If you\u2019d like to deploy your own customized version of this dashboard, please clone [our repo](https://github.com/wasp-lang/wasp) and check out the Waspleau example [README.md](https://github.com/wasp-lang/wasp/blob/release/examples/waspleau/README.md) for tips on getting started. You can also [check out our docs](https://wasp-lang.dev/docs) to dive deeper into anything.\\n\\n![Rickroll](../static/img/waspleau-rickroll.gif)\\n\\n_Still got ya! :D_\\n\\n## 2022 is going to be exciting \ud83d\ude80\\n\\nWhile this functionality currently exists outside of Wasp, keep an eye on our roadmap as we head toward 1.0. We will be busy adding lots of great features to our Wasp DSL in the coming months that will supercharge your web development experience! Thanks for reading, and please feel free to connect with us in [Discord](https://discord.gg/rzdnErX) about using Wasp on your next project."},{"id":"/2021/12/21/shayne-intro","metadata":{"permalink":"/wasp-docs/blog/2021/12/21/shayne-intro","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2021-12-21-shayne-intro.md","source":"@site/blog/2021-12-21-shayne-intro.md","title":"Meet the team - Shayne Czyzewski, Founding Engineer","description":"Welcome Shayne!","date":"2021-12-21T00:00:00.000Z","formattedDate":"December 21, 2021","tags":[{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"},{"label":"new-hire","permalink":"/wasp-docs/blog/tags/new-hire"}],"readingTime":3.47,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"Meet the team - Shayne Czyzewski, Founding Engineer","authors":["matijasos"],"image":"/img/shayne-intro-banner.png","tags":["wasp","new-hire"]},"prevItem":{"title":"Build a metrics dashboard with background jobs in Wasp - Say hello to Waspleau!","permalink":"/wasp-docs/blog/2022/01/27/waspleau"},"nextItem":{"title":"How we built a Trello clone with Wasp - Waspello!","permalink":"/wasp-docs/blog/2021/12/02/waspello"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\n\\n![Welcome Shayne!](../static/img/shayne-intro-banner.png)\\n\\nFind Shayne on [Twitter](https://twitter.com/shayneczyzewski) and [GitHub](https://github.com/shayneczyzewski).\\n\\n\x3c!--truncate--\x3e\\n\\n<WaspIntro />\\n<InBlogCta />\\n\\n**We are super excited to introduce Shayne, the first person to join the Wasp team!** Shayne is a battle-tested veteran engineer, with experiences ranging from leading teams at high-growth startups to working at enterprise giants such as Red Hat and NetApp. Along with that, he is super nice and incredibly pleasant to work with - we are beyond thrilled that he chose Wasp for his next adventure with him and can\'t wait for you to [meet him in our Discord community](https://discord.gg/rzdnErX)!\\n\\n#### Why did you join Wasp?\\n\\nI have always been excited about high-quality dev tooling and web frameworks, and I am also interested in Haskell/compilers. The technology, problem space, and team were just too compelling to pass up. I was also excited to be on the ground floor of a YC startup, where I can have a significant impact and help build a broad, welcoming, open-source community of Wasp developers.\\n\\n#### What did you do before?\\n\\nI have been a professional developer for over a decade, mostly in backend web development, with experience from Lockheed Martin, Morgan Stanley, NetApp, and Red Hat. Most recently, I was the head of engineering at an edtech company called LearnPlatform, where we were handling a quarter of a billion incoming events per day with the goal of understanding and improving student access to technology that works best for them.\\n\\n#### What is your favorite language/framework?\\n\\nMy favorite framework is probably Ruby on Rails, for the elegance of ideas and seamless implementation. I never had an actual favorite programming language, as I enjoy different aspects of Ruby, Elixir, JavaScript, C#, and others. My least favorite has always been Java. My current favorite language is fast becoming Haskell. :)\\n\\nThe most interesting niche programming language I have used professionally was Ada at Lockheed Martin. We used it to build distributed, real-time, full-motion flight simulators for the military (think multi-million dollar, hyperrealistic multiplayer video games).\\n\\n#### What are you most excited about in Wasp?\\n\\nAs web developers, I think we have gotten accustomed to a certain level of complexity that is not associated with the problem we are solving but the boilerplate of the process. This lack of nuance between accidental and essential complexity has recently led to less than ideal low-code approaches. Wasp, in my view, takes the better approach of a higher-level DSL to abstract some of the typical details using best practices, leaving you to focus on your problem by writing actual code that produces a real web app without any vendor lock-in. That is pretty amazing to me!\\n\\n#### How did you start coding?\\n\\nProbably by creating some basic LAMP apps in the late 90s while in high school. Growing up, our parents wanted us to have summer jobs to earn money we could spend during the rest of the year. I quickly found that freelance web development on Elance, and similar sites, was more enjoyable and profitable than the alternatives available to 15-year-olds. From then on, I was hooked.\\n\\n#### What is your dev setup?\\n\\nMacBook Air M1 with an external Dell display, Magic Trackpad, and a split mechanical keyboard from UHK (Ultimate Hacking Keyboard).\\n\\n#### `camelCase` or `snake_case`?\\n\\nI default to whatever the language or codebase conventions are. Visually, I prefer snake case, though (and definitely spaces over tabs). ;)\\n\\n#### What\'s one piece of advice you\'d give to an aspiring developer?\\n\\nOne of the biggest differentiators I have found between good and great engineers is that the great ones possess a continuous desire to learn and grow. They view challenges as fun opportunities to expand their knowledge and skills, recognizing that they always have room for improvement. The corollary is that impostor syndrome is real and never goes away, so try not to be too hard on yourself along the way!\\n\\n*This post was the first of several new hire announcements in the months to come, so stay tuned and reach out if you want to work with Martin, Shayne, and myself!*\\n\\n<InBlogCta />"},{"id":"/2021/12/02/waspello","metadata":{"permalink":"/wasp-docs/blog/2021/12/02/waspello","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2021-12-02-waspello.md","source":"@site/blog/2021-12-02-waspello.md","title":"How we built a Trello clone with Wasp - Waspello!","description":"Enter Waspello","date":"2021-12-02T00:00:00.000Z","formattedDate":"December 2, 2021","tags":[{"label":"webdev","permalink":"/wasp-docs/blog/tags/webdev"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"}],"readingTime":9.225,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"How we built a Trello clone with Wasp - Waspello!","authors":["matijasos"],"tags":["webdev","wasp"]},"prevItem":{"title":"Meet the team - Shayne Czyzewski, Founding Engineer","permalink":"/wasp-docs/blog/2021/12/21/shayne-intro"},"nextItem":{"title":"Our fundraising learnings - 250+ meetings in 98 days to the oversubscribed round","permalink":"/wasp-docs/blog/2021/11/22/fundraising-learnings"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\nimport ImgWithCaption from \'./components/ImgWithCaption\'\\n\\n![Enter Waspello](../static/img/waspello-screenshot.png)\\n\\n<p align=\\"center\\">\\n    <Link to={\'https://waspello.netlify.app/\'}>Try Waspello here!</Link> | <Link to={\'https://github.com/wasp-lang/wasp/blob/release/examples/waspello/main.wasp\'}>See the code</Link>\\n</p>\\n\\nWe\'ve built a Trello clone using Wasp! Read on to learn how it went and how you can contribute. \\n\\n\x3c!--truncate--\x3e\\n\\n<WaspIntro />\\n<InBlogCta />\\n\\n## Why Trello?\\n\\nWhile building Wasp, our goal is to use it as much as we can to build our projects and play with it, so we can learn what works and what we should do next. This is why Trello was a great choice of app to build with Wasp - it is one of the most well-known full-stack web apps, it\'s very simple and intuitive to use  but also covers a good portion of features used by today\'s modern web apps.\\n\\nSo let\'s dig in and see and how it went - what works, what doesn\'t and, what\'s missing/coming next!\\n\\n## What works?\\n\\n### It\'s alive \u26a1\ud83e\udd16 !!\\nThe good news is all the basic functionality is here - Waspello users can signup/log in which brings them to their project board where they can perform CRUD operations on lists and cards - create them, edit them, move them around, etc. Let\'s see it in action:\\n\\n![Waspello in action](../static/img/waspello-in-action.gif)\\n<p align=\\"center\\" class=\\"image-caption\\">\\n    Waspello in action!\\n</p>\\n\\nAs you can see things work, but not everything is perfect (e.g. there is a delay when creating/moving a card) - we\'ll examine why is that so a bit later.\\n\\n### Under the hood \ud83d\ude98 \ud83d\udd27\\nHere is a simple visual overview of Waspello\'s code anatomy (which applies to every Wasp app):\\n\\n![Waspello code anatomy](../static/img/waspello-code-anatomy.png)\\n<p align=\\"center\\" class=\\"image-caption\\">\\n    Waspello code anatomy\\n</p>\\n\\nLet\'s now dig in a bit deeper and shortly examine each of the concepts Wasp supports (page, query, entity, ...) and learn through code samples how to use it to implement Waspello.\\n\\n#### Entities\\n\\nIt all starts with a data model definition (called `entity` in Wasp), which is defined via Prisma Schema Language:\\n\\n```js title=\\"main.wasp | Defining entities via Prisma Schema Language\\"\\n// Entities\\n\\nentity User {=psl\\n    id          Int     @id @default(autoincrement())\\n    username    String  @unique\\n    password    String\\n    lists       List[]\\n    cards       Card[]\\npsl=}\\n\\nentity List {=psl\\n    id          Int     @id @default(autoincrement())\\n    name        String\\n    pos         Float\\n\\n    // List has a single author.\\n    user        User    @relation(fields: [userId], references: [id])\\n    userId      Int\\n\\n    cards       Card[]\\npsl=}\\n\\nentity Card {=psl\\n    id          Int     @id @default(autoincrement())\\n    title       String\\n    pos         Float\\n\\n    // Card belongs to a single list.\\n    list        List    @relation(fields: [listId], references: [id])\\n    listId      Int\\n\\n    // Card has a single author.\\n    author      User    @relation(fields: [authorId], references: [id])\\n    authorId    Int\\npsl=}\\n```\\n\\nThose three entities are all we need! Wasp uses Prisma to create a database schema underneath and allows the developer to query it through its generated SDK.\\n\\n#### Queries and Actions (Operations)\\nAfter we\'ve defined our data models, the next step is to do something with them! We can read/create/update/delete an entity and that is what `query` and `action` mechanisms are for. Below follows an example from the Waspello code that demonstrates how it works.\\n\\nThe first step is to declare to Wasp there will be a query, point to the actual function containing the query logic, and state from which entities it will be reading information:\\n```js title=\\"main.wasp | Declaration of a query in Wasp\\"\\nquery getListsAndCards {\\n    // Points to the function which contains query logic.\\n    fn: import { getListsAndCards } from \\"@server/queries.js\\",\\n\\n    // This query depends on List and Card entities.\\n    // If any of them changes this query will get re-fetched (cache invalidation).\\n    entities: [List, Card]\\n}\\n```\\n\\nThe main point of this declaration is for Wasp to be aware of the query and thus be able to **do a lot of heavy lifting for us - e.g. it will make the query available to the client without any extra code**, all that developer needs to do is import it in their React component. **Another big thing is cache invalidation / automatic re-fetching of the query once the data changes** (this is why it is important to declare which entities it depends on).\\n\\nThe remaining step is to write the function with the query logic:\\n```js title=\\"src/server/queries.js | Query logic, using Prisma SDK via Node.js\\"\\nexport const getListsAndCards = async (args, context) => {\\n  // Only authenticated users can execute this query.\\n  if (!context.user) { throw new HttpError(403) }\\n\\n  return context.entities.List.findMany({\\n    // We want to make sure user can access only their own cards.\\n    where: { user: { id: context.user.id } },\\n    include: { cards: true }\\n  })\\n}\\n```\\nThis is just a regular Node.js function, there are no limits on what you can return! All the stuff provided by Wasp (user data, Prisma SDK for a specific entity) comes in a `context` variable.\\n\\nThe code for actions is very similar (we just need to use `action` keyword instead of `query`) so I won\'t repeat it here. You can check out the code for `updateCard` action [here](https://github.com/wasp-lang/wasp/blob/release/examples/waspello/main.wasp#L103).\\n\\n#### Pages, routing & components\\nTo display all the nice data we have, we\'ll use React components. There are no limits to how you can use React components within Wasp, the only one is that each `page` has its root component:\\n```js title=\\"main.wasp | Declaration of a page & route in Wasp\\"\\nroute MainRoute { path: \\"/\\", to: Main }\\npage Main {\\n    authRequired: true,\\n    component: import Main from \\"@client/MainPage.js\\"\\n}\\n```\\n\\nAll pretty straightforward so far! As you can see here, Wasp also provides [authentication out-of-the-box](/docs/auth/overview).\\n\\nCurrently, the majority of the client logic of Waspello is contained in `src/client/MainPage.js` (we should break it down a little \ud83d\ude05 - [you can help us!](https://github.com/wasp-lang/wasp/issues/334)). Just to give you an idea, here\'s a quick glimpse into it:\\n\\n```js title=\\"src/client/MainPage.js | Using React component in Wasp\\"\\n// \\"Special\\" imports provided by Wasp.\\nimport { useQuery } from \'@wasp/queries\'\\nimport getListsAndCards from \'@wasp/queries/getListsAndCards\'\\nimport createList from \'@wasp/actions/createList\'\\n\\nconst MainPage = ({ user }) => {\\n  // Fetching data via useQuery.\\n  const { data: listsAndCards, isFetchingListsAndCards, errorListsAndCards }\\n    = useQuery(getListsAndCards)\\n\\n  // A lot of data transformations and sub components.\\n  ...\\n\\n  // Display lists and cards.\\n  return (\\n    ...\\n  )\\n}\\n```\\nOnce you\'ve defined a query or action as described above, you can immediately import it into your client code as shown in the code sample, by using the `@wasp` prefix in the import path. `useQuery` ensures reactivity so once the data changes the query will get re-fetched. You can find more details about it [here](/docs/data-model/operations/queries#the-usequery-hook-1).\\n\\nThis is pretty much it from the stuff that works \ud83d\ude04 ! I kinda rushed a bit through things here - for more details on all Wasp features and to build your first app with Wasp, check out our [docs](/docs/).\\n\\n## What doesn\'t work (yet)\\nThe main problem of the current implementation of Waspello is the **lack of support for optimistic UI updates in Wasp**. What this means is that currently, when an entity-related change is made (e.g. a card is moved from one list to another), we have to wait until that change is fully executed on the server until it is visible in the UI, which causes a noticeable delay.  \\nIn many cases that is not an issue, but when UI elements are all visible at once and it is expected from them to be updated immediately, then it is noticeable. This is also one of the main reasons why we chose to work on Waspello - to have a benchmark/sandbox for this feature! Due to this issue, here\'s how things currently look like:\\n\\n<ImgWithCaption alt=\\"Waspello - no optimistic UI update\\" source=\\"img/waspello-no-opt-UI-updates.gif\\" caption=\\"Without an optimistic UI update, there is a delay\\"/>\\n\\nYou can notice the delay between the moment the card is dropped on the \\"Done\\" list and the moment it becomes a part of that list. The reason is that at the moment of dropping the card on \\"Done\\" list, the API request with the change is sent to the server, and only when that change is fully processed on the server and saved to the database, the query `getListsAndCards` returns the correct info and consequently, UI is updated to the correct state.  \\nThat is why upon dropping on \\"Done\\", the card first goes back to the original list (because the change is not saved in db yet, so `useQuery(getListsAndCards)` still returns the \\"old\\" state), it waits a bit until the API request is processed successfully, and just then the change gets reflected in the UI.\\n\\n#### The solution\\nA typical approach for solving this issue is to **make the client a bit more self-confident, in a way that it doesn\'t wait for the confirmation from the server but rather immediately updates the UI, at the same time or even before the API request is fired**. If it then turns out something went wrong on the server (which typically shouldn\'t happen), it reverses the change and shows an error message. Thus the name optimistic UI update, since the client assumes in advance that everything will go well to provide a nicer UX.\\n\\n<p align=\\"center\\">\\n  <figure>\\n    <img alt=\\"Waspello - the client being brave\\"\\n        src={useBaseUrl(\'img/waspello-client-being-brave.gif\')}\\n    />\\n    <figcaption class=\\"image-caption\\">The client when performing an optimistic UI update</figcaption>\\n  </figure>\\n</p>\\n\\nThis is one of the most complex and error-prone features when developing web apps today and that is why we are super excited to tackle it in Wasp and make the experience as smooth as possible! We are currently in the \\"figuring out the solution\\" stage and you can [track/join the discussion on GitHub](https://github.com/wasp-lang/wasp/issues/63)!\\n\\n## What\'s missing (next features)\\nAlthough it looks super simple at the first glance, Trello is in fact a huge app with lots and lots of cool features hidden under the surface! Here are some of the more obvious ones that are currently not supported in Waspello:\\n- **Users can have multiple boards**, for different projects (currently we have no notion of a \\"Board\\" entity in Waspello at all, so there is implicitly only one)\\n- **Detailed card view** - when clicked on a card, a \\"full\\" view with extra options opens\\n- **Search** - user can search for a specific list/card\\n- **Collaboration** - multiple users can participate on the same board\\n\\nAnd many more - e.g. support for workspaces (next level of the hierarchy, a collection of boards), card labels, filters, ... . It is very helpful to have such a variety of features since we can use it as a testing ground for Wasp and use it as a guiding star towards Beta/1.0!\\n\\n## Become a Waspeller!\\n<p align=\\"center\\" >\\n  <figure style={{width: \'55%\'}}>\\n    <img alt=\\"Waspello propaganda\\"\\n        src={useBaseUrl(\'img/waspello-propaganda.png\')}\\n    />\\n    <figcaption class=\\"image-caption\\">Lightweight Waspello propaganda</figcaption>\\n  </figure>\\n</p>\\n\\n If you want to get involved with OSS and at the same time familiarize yourself with Wasp, this is a great way to get started - feel free to [choose one of the features listed here or add your own](https://github.com/wasp-lang/wasp/issues/337) and help us make Waspello the best demo productivity app out there!\\n\\nAlso, make sure to [join our community on Discord](https://discord.gg/rzdnErX). We\u2019re always there and are looking forward to seeing what you build!\\n\\n<InBlogCta />"},{"id":"/2021/11/22/fundraising-learnings","metadata":{"permalink":"/wasp-docs/blog/2021/11/22/fundraising-learnings","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2021-11-22-fundraising-learnings.md","source":"@site/blog/2021-11-22-fundraising-learnings.md","title":"Our fundraising learnings - 250+ meetings in 98 days to the oversubscribed round","description":"Wasp fundraise chart","date":"2021-11-22T00:00:00.000Z","formattedDate":"November 22, 2021","tags":[{"label":"startup","permalink":"/wasp-docs/blog/tags/startup"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"}],"readingTime":7.865,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"Our fundraising learnings - 250+ meetings in 98 days to the oversubscribed round","authors":["matijasos"],"tags":["startup","wasp"]},"prevItem":{"title":"How we built a Trello clone with Wasp - Waspello!","permalink":"/wasp-docs/blog/2021/12/02/waspello"},"nextItem":{"title":"Following YC, Wasp raised $1.5M Seed Round led by Lunar Ventures and HV Capital","permalink":"/wasp-docs/blog/2021/11/21/seed-round"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\n\\n![Wasp fundraise chart](../static/img/wasp-fundraise-chart.png)\\n\\nWasp was part of [Y Combinator](https://www.ycombinator.com/)\u2019s W21 batch, which took place from January of 2021 until the end of March.\\n\\nWe want to share what we learned during the process!\\n\\n\x3c!--truncate--\x3e\\n\\n<WaspIntro />\\n<InBlogCta />\\n\\n\\nAt Demo Day, our product had a solid traction (200+ projects created, 1k Github stars, good [ProductHunt](https://www.producthunt.com/posts/wasp-lang-alpha) and [HackerNews](https://news.ycombinator.com/item?id=26091956) feedback) but no monetisation yet, which is typical for open-source projects at this stage. Being based in the EU, we also didn\'t have a huge network in the Bay Area prior to the fundraise.\\n\\n:::caution\\nI will try to refrain from giving \\"general\\" advice (as our fundraise is a single data point), and focus on the stats and specific things that worked for us. Keep in mind the same might not work for you - I recommend always taking advice with a pinch of salt to see what makes the most sense in your case.\\n:::\\n\\nAs we approached our fundraise, we didn\'t really know what to expect. We had friends from the previous batch that raised a big round very quickly (even before Demo Day) and heard a couple of stories from a few other YC founders who were also quite successful, so we imagined it might go quickly for us too.\\n\\nAs you can see from the title, we had quite a journey with plenty of meetings that provided us a lot of input on how to improve our pitch, and maybe even more importantly, how to reach the right investors.\\n\\nHere are our stats:\\n- we spoke to **212 investors** \u2192 that led to **250+ meetings**\\n- **98 days** passed between the first and the last signed SAFE\\n- **171** investor passed, **24** never responded, **17** invested\\n\\nAnd here is how it all looked when laid out on a timeline:\\n![Wasp fundraise chart](../static/img/wasp-fundraise-chart.png)\\n\\nHere are some of the things that worked for us:\\n\\n## We treated fundraising as a sales process (and stuck to it)\\n![Wasp fundraise funnel](../static/img/wasp-fundraise-funnel.png)\\n\\nThis means we had a typical sales funnel - lead generation, selling (pitching) and following up:\\n- **Lead generation**: it started with Demo Day of course, from which we got 100+ leads but none of them ended up investing (more on that below). After that we mainly relied on our YC batchmates to identify relevant investors and get the intros.\\n- **Pitching**: we did a conversational pitch without the deck, but we had a Notion one-pager from which I would drop links during the conversation (to e.g. our traction chart, user testimonials etc.). It also worked well as investors would typically find it interesting and keep scrolling through as we talked, asking follow-up questions.\\n- **Following-up**: we followed up once per week. I would usually \\"batch process\\" it each Wednesday. We used Streak to identify all the leads that I haven\'t heard from in over 7 days (there is a filter for that) and then manually emailed them.\\n\\nWe started with tracking everything in Google Sheets, but with the volume of leads it soon became hard to navigate them through the funnel. Then we switched to Streak (used their fundraising template, and modified it a bit) and that worked great. The most helpful thing for me was having a CRM that is integrated with gmail, that made the process much more seamless and gave us better overview of the funnel. As soon as I would receive an email I could see in which stage the investor is, and it was also super easy to add new investors straight from gmail - it saved us from the dreaded context switching and kept us focused.\\n\\n## Our pitch became much better after ~50 meetings\\nWe kept being critical of our pitch and kept a list of questions that we felt needed more work. We called it \\"creating narratives\\", e.g. why the right time for our product is now, presenting the team, or how we plan to monetise. We talked to other companies in the same space (devtools, OSS), investigated comparatives (big companies we compared ourselves too), talked to our angels who were domain experts and used all that to build a more convincing story.\\n\\nI never intended to learn our pitch by heart, but after delivering it for 100s of times just that happened - both me and Martin (my brother and cofounder, who wasn\'t pitching but was always sitting behind me and provided feedback, especially in the beginning) knew it word by word and I realised how much more polished it sounds and how much more confident I felt compared to when we just started.\\n\\n## Our goal was to get to 100 no\'s\\nAfter about 50 meetings (and about 20 VCs having passed on us) we started feeling a bit disheartened, as things didn\'t seem to go so easy as we initially expected. Then I chatted to a friend who also recently finished their fundraise and he gave me a tour of Streak - I saw their numbers and that over 150 investors passed on them! With that I realised our 20 passes were just the beginning and that instead of chasing yeses we should actually chase no\'s :) - they are more predictable, you\'ll get plenty of them and they will clearly show your progress.\\n\\n## We had 100+ leads from Demo Day - none of them invested\\nThis is probably pretty specific for our case, but it\'s how it went. Connecting with a startup on Demo Day is a very low-cost action for investors. Also, as many investors as there are on Demo Day, there are even more of them who aren\'t.\\n\\nWhen we sorted through the connections we got, about 20% were a really good fit for us, meaning they invest in deep tech / OSS companies, have invested recently, invest in our stage etc.\\n\\nWe still met with pretty much all the interested leads, but we quickly realised that due to our product being deeply technical and the company being pre-revenue, only investors with engineering backgrounds were really interested because they could understand and get excited about what we do. That informed us to generate our leads with much narrower focus.\\n\\nWe looked at other OSS & dev tools companies in our batch, looked at who invested in them and asked for intros. Our batchmates were also in the fundraising mode, they knew how hard it can be and they wanted to help, so everything moved very quickly.\\n\\n## We learned not to spend time on non-believers\\nAs we learned to focus on the highly qualified leads, we also learned that it is very hard (impossible) to change somebody\'s mind. Plenty of investors liked u and what we do, but they were skeptical about e.g. market size or monetisation potential and made that clear from the start. Many of them were keen to keep chatting, wanted to meet our angel investors etc., but none of that helped change their mind and it was very distracting for us. I believe it is very hard to change somebody\'s worldview, especially in the seed stage when there is often no strong factual evidence to do so.\\n\\n## Passing through the \\"valley of death\\"\\nAs you can see on the chart, about two months in we barely passed $300k, and we had a whole month with no progress. At the same time, we felt that our pitch got significantly better and we were reaching investors much better suited for us. \\nIt was one of the most difficult times, seeing others close their rounds, but we decided to trust in the process and keep going until we have used all the resources we had. It was also the time our lead investor took time to do their own pretty extensive due diligence on Wasp, so although it looks like no progress was made from the outside, a lot of stuff was actually happening behind the scenes.\\n\\nSuddenly, a few things clicked together from multiple sides and our round was quickly closed, even oversubscribed! It was truly a magical feeling to start closing investors in a single day, even during the first call, when previously it took us weeks to close our first $50k check. The big factor was also that our round was getting filled up and that of course motivated investors to move faster.\\n\\n## We compared ourselves to big, successful companies\\nThis is one of the best pieces of advice we got from YC partners about fundraising. In the beginning we didn\'t understand how important this was, but once the meetings started we realised this was one of the best ways to explain the potential of our company to investors. With the innovation in technology that isn\'t easy to grasp, they needed something to hold on to understand how the business model and distribution could work, and it sounds much more doable if there is a playbook we can follow rather than us reinventing that as well. We kept working on finding a good comparable (we had a few) and explaining in which ways we are similar and why.\\n\\n## Good luck - you can do it!\\nI hope you found this helpful and that our story will motivate you to keep going once things get hard! We wish you the best of luck and also feel free to reach out if you\'ll have any questions.\\n\\n<InBlogCta />"},{"id":"/2021/11/21/seed-round","metadata":{"permalink":"/wasp-docs/blog/2021/11/21/seed-round","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2021-11-21-seed-round.md","source":"@site/blog/2021-11-21-seed-round.md","title":"Following YC, Wasp raised $1.5M Seed Round led by Lunar Ventures and HV Capital","description":"After graduating from Y Combinator\'s Winter 2021 Batch, we are super excited to announce that Wasp raised $1.5m in our first funding round! The round is led by Lunar Ventures and joined by HV Capital. Also see it in TechCrunch.","date":"2021-11-21T00:00:00.000Z","formattedDate":"November 21, 2021","tags":[{"label":"startup","permalink":"/wasp-docs/blog/tags/startup"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"}],"readingTime":4.49,"hasTruncateMarker":true,"authors":[{"name":"Matija Sosic","title":"Co-founder & CEO @ Wasp","url":"https://github.com/matijasos","email":"matija@wasp-lang.dev","imageURL":"https://github.com/matijasos.png","key":"matijasos"}],"frontMatter":{"title":"Following YC, Wasp raised $1.5M Seed Round led by Lunar Ventures and HV Capital","authors":["matijasos"],"tags":["startup","wasp"]},"prevItem":{"title":"Our fundraising learnings - 250+ meetings in 98 days to the oversubscribed round","permalink":"/wasp-docs/blog/2021/11/22/fundraising-learnings"},"nextItem":{"title":"Tutorial: `forall` in Haskell","permalink":"/wasp-docs/blog/2021/09/01/haskell-forall-tutorial"}},"content":"import Link from \'@docusaurus/Link\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\nimport InBlogCta from \'./components/InBlogCta\';\\nimport WaspIntro from \'./_wasp-intro.md\';\\n\\nAfter graduating from Y Combinator\'s Winter 2021 Batch, we are super excited to announce that Wasp raised $1.5m in our first funding round! The round is led by Lunar Ventures and joined by HV Capital. Also [see it in TechCrunch](https://techcrunch.com/2021/10/04/yc-grads-wasp-land-1-5m-seed-to-help-developers-build-web-apps-faster/).\\n\\nThe best thing about it is that the majority of our investors are either experienced engineers themselves (e.g. ex-Facebook, Twitter and Airbnb) or have a strong focus on investing in deep technology and developer companies. They share the vision we have with Wasp, understand and care about the problem we are solving.\\n\\n\x3c!--truncate--\x3e\\n\\n<WaspIntro />\\n<InBlogCta />\\n\\nBesides Lunar and HV Capital, we are thrilled to welcome on board:\\n- 468 Capital (led by Florian Leibert, founder of Mesosphere and ex-Twitter and Airbnb eng.)\\n- Charlie Songhurst\\n- Tokyo Black\\n- Acequia Capital\\n- Abstraction Capital\\n- Ben Tossell, founder of Makerpad (acq. by Zapier)\\n- Muthukrishnan Ramabadran, Senior Software Engineer at Lyft\\n- Yun-Fang, ex-Facebook engineer\\n- Marcel P. Lima from Heller House\\n- Chris Schagen, former CMO on Contentful\\n- Rahul Thathoo, Sr. Eng. Manager at Square\\n- Preetha Parthasarathy\\n- John Kobs\\n\\n## Why did we raise funding?\\n\\nAt its core, Wasp is an open-source project and we have full intention for it to stay that way. Open-source is one of the most powerful ways to write software and we want to make sure Wasp is freely accessible to every developer.\\n\\nWasp is a technically innovative and challenging project. Even though we are not building a new general programming language from scratch, there still exists an essential complexity of building a language and all the tooling around it. Wasp offers a lot of abstractions that are being introduced for the first time and there is no clear blueprint to follow, and this is why such an undertaking requires full-time attention and dedication. Hence, we plan on expanding the team with some amazing engineers to accelerate us on our journey.\\n\\n## Where are we today?\\n\\nToday, Wasp is in Alpha. That means there are many features we still have to add and many that are probably going to change. But it also means you can [try it out, build a full-stack web app](/docs) and see what it is all about. You can also join [our community](https://discord.gg/rzdnErX) and share your feedback and experience with us - we\'d be happy to hear from you!\\n\\nSince we launched our Alpha several months ago, we got some amazing feedback on [Product Hunt](https://www.producthunt.com/posts/wasp-lang-alpha) and [Hacker News](https://news.ycombinator.com/item?id=26091956).\\n\\nWe\'ve also grown a lot and recently passed 1,000 stars on [our Github repo](https://github.com/wasp-lang/wasp) - thank you!\\n\\n![Wasp GitHub Stars](../static/img/wasp-gh-stars-raise.png)\\n\\nTo date, over 250 projects have been created with Wasp in the last couple of months and some were even deployed to production - like [Farnance](https://farnance.netlify.app/) that ended up being a hackathon winner! Check out their source code [here](https://github.com/jlaneve/Farnance).\\n\\n![Farnance screenshot](../static/img/farnance-screenshot.png)\\n\\n## The team\\n\\nMartin and I have been working on Wasp for the last two years and together with our amazing contributors, who made us believe our vision is possible and made it what it is today. Having led development of several complex web apps in the past and continuously switching to the latest stack, we felt the pain and could also clearly see the patterns that we felt were mature and common enough to be worth extracting into a simpler, higher-level language.\\n\\n<p align=\\"center\\">\\n  <figure>\\n    <img alt=\\"The team\\"\\n        src={useBaseUrl(\'img/us-at-ycombinator.jpg\')}\\n    />\\n    <figcaption>Martin and I during our first YC interview. Read <Link to={useBaseUrl(\'blog/2021/02/23/journey-to-ycombinator\')}>here</Link> for more details on our journey to YC!</figcaption>\\n  </figure>\\n</p>\\n\\nIn case you couldn\'t tell from the photo and our identical glasses, we are twins (but not fraternal ones, and I\'m a couple of minutes older, which makes me CEO :D)!\\n\\nWe are coming from the background of C++, algorithm competitions and applied algorithms in bioinformatics (Martin built [edlib](https://github.com/martinsos/edlib), his first OSS project - a popular sequence alignment library used by top bioinfo companies like PacBio) and did our internships in Google and Palantir. There we first encountered the modern web stack and went on to lead development of web platforms in fintech and bioinformatics space. We also had a startup previously ([TalkBook](https://talkbook.co/home)), where we learned a lot about talking to users and building something that solves a problem they have.\\n\\n## What comes next?\\n\\nWith the funding secured, we can now fully focus on developing Wasp and the ecosystem around it. We can start planning for more [long-term features](https://github.com/wasp-lang/wasp/issues/109) that we couldn\'t fully commit to until now, and we can expand our team to move faster and bring more great people on board with new perspectives and enable them to fully employ their knowledge and creativity without any distractions.\\n\\nOur immediate focus is to bring Wasp to Beta and then 1.0 (see our high-level roadmap [here](https://wasp-lang.dev/#what-can-do)), while also building a strong foundation for our open source community. We believe community is the key to the success for Wasp and we will do everything in our power to make sure everybody feels welcome and has a fun and rewarding experience both building apps and contributing to the project. If you want to shape how millions of engineers develop the web apps of tomorrow, join our community and work with us!\\n\\nThank you for reading - we can\'t wait to see what you will build!\\n\\n<InBlogCta />"},{"id":"/2021/09/01/haskell-forall-tutorial","metadata":{"permalink":"/wasp-docs/blog/2021/09/01/haskell-forall-tutorial","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2021-09-01-haskell-forall-tutorial.md","source":"@site/blog/2021-09-01-haskell-forall-tutorial.md","title":"Tutorial: `forall` in Haskell","description":"--------","date":"2021-09-01T00:00:00.000Z","formattedDate":"September 1, 2021","tags":[{"label":"haskell","permalink":"/wasp-docs/blog/tags/haskell"},{"label":"tutorial","permalink":"/wasp-docs/blog/tags/tutorial"}],"readingTime":8.775,"hasTruncateMarker":true,"authors":[{"name":"Martin Sosic","title":"Co-founder & CTO @ Wasp","url":"https://github.com/martinsos","email":"martin@wasp-lang.dev","imageURL":"https://github.com/martinsos.png","key":"martinsos"}],"frontMatter":{"title":"Tutorial: `forall` in Haskell","authors":["martinsos"],"tags":["haskell","tutorial"]},"prevItem":{"title":"Following YC, Wasp raised $1.5M Seed Round led by Lunar Ventures and HV Capital","permalink":"/wasp-docs/blog/2021/11/21/seed-round"},"nextItem":{"title":"How to implement a Discord bot (in NodeJS) that requires new members to introduce themselves","permalink":"/wasp-docs/blog/2021/04/29/discord-bot-introduction"}},"content":"import useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\n--------\\n\\nFind out what Haskell\'s `forall` is all about.\\n\\n\x3c!--truncate--\x3e\\n\\nYou might have seen `forall` being used in Haskell like this:\\n```haskell\\nf :: forall a. [a] -> [a]\\nf xs = ys ++ ys\\n  where ys :: [a]\\n        ys = reverse xs\\n```\\nor\\n```hs\\nliftPair :: (forall x. x -> f x) -> (a, b) -> (f a, f b)\\n```\\nor\\n```hs\\ndata Showable = forall s. (Show s) => Showable s\\n```\\n\\n`forall` is something called \\"type quantifier\\", and it gives extra meaning to polymorphic type signatures (e.g. `:: a`, `:: a -> b`, `:: a -> Int`, ...).\\n\\nWhile normaly `forall` plays a role of the \\"universal quantifier\\", it can also play a role of the \\"existential quantifier\\" (depends on the situation).\\n\\nWhat does all this mean and how can `forall` be used in Haskell? Read on to find out!\\n\\nNOTE: we assume you are comfortable with basic polymorphism in Haskell.\\n\\n## Quick math/logic reminder\\n\\nIn mathematical logic, we have\\n\\n- **[universal quantifier](https://en.wikipedia.org/wiki/Universal_quantification)**\\n  - symbol: \u2200x\\n  - interpretation: \\"for all\\", \\"given any\\"\\n  - example: `\u2200x P(x)` means \\"for all x predicate P(x) is true\\".\\n- **[existential quantifier](https://en.wikipedia.org/wiki/Existential_quantification)**\\n  - symbol: \u2203x\\n  - interpretation: \\"there exists\\", \\"there is at least one\\", \\"for some\\"\\n  - example: `\u2203x P(x)` means \\"there is some x for which predicate P(x) is true\\".\\n\\n## Vanilla Haskell (no extensions)\\n\\nIn Haskell, all polymorphic type signatures are considered to be implicitly prefixed with `forall`.\\n\\nTherefore, if you have\\n```hs\\nf :: a -> a\\ng :: a -> (a -> b) -> b\\n```\\nit is really the same as\\n```hs\\nf :: forall a. a -> a\\ng :: forall a b. a -> (a -> b) -> b\\n```\\n\\nWhat `forall` here does is play the role of universal quantifier.\\nFor function `f`, it means it is saying \\"for all types, this function takes that type and returns the same type.\\".\\nOther way to put it would be \\"this funtion can be called with value of any type as its first argument, and it will return the value of that same type\\".\\n\\nSince `forall` is already implicit, writing it explicitly doesn\'t really do anything!\\n\\nNot only that, but without any extensions, you can\'t even write `forall` explicitly, you will get a syntax error, since `forall` is not a keyword in Haskell.\\n\\nSo what is the purpose of `forall` then? Well, obviously to be used with extensions :)!\\n\\nThe simplest extension is `ExplicitForAll`, which allows you to explicitly write `forall` (as we did above).\\nThis is not useful on its own though, since as we said above, explicitly writing `forall` doesn\'t change anything, it was already implicitly there.\\n\\nHowever, there are other extensions that make use of `forall` keyword, like: `ScopedTypeVariables`, `RankNTypes`, `ExistentialQuantification`.\\nAll these extensions automatically enable `ExplicitForAll` extension, which means you don\'t need to enable it yourself when using any of these.\\nThere is also `TypeApplications` extension which interacts with `forall` and in that case you might want to use `ExplicitForAll` with it.\\n\\nSince `forall` is useful only when used with extensions, let\'s take a look at how it is used in each one of those!\\n\\n## `forall` and extension [ScopedTypeVariables](https://ghc.readthedocs.io/en/latest/glasgow_exts.html#lexically-scoped-type-variables)\\n\\n`ScopedTypeVariables` enables lexical scoping of type variables by explicitly introducing them with `forall`.\\n\\nLet\'s take a look at the following example:\\n```hs\\nf :: [a] -> [a]\\nf xs = ys ++ ys\\n  where ys :: [a]\\n        ys = reverse xs\\n```\\n\\nThis code does not compile, because compiler can\'t match type of `ys` with the return type of `f`.\\nWhy though, when they are both `[a]`? Well, that is because that is not the same `a`!\\nTry changing `ys :: [a]` to `ys :: [b]` and you will get the exact same error,\\nbecause it is exactly the same code -> `a` in `ys :: [a]` and `a` in `f :: [a] -> [a]` are different `a`s and there is no connection between them.\\n`a` in `ys :: [a]` stands for \\"any type\\", not for \\"that type that is reffered to with `a` in the type signature above\\".\\n\\nThis is where `ScopedTypeVariables` comes in:\\n```hs\\n{-# LANGUAGE ScopedTypeVariables #-}\\n\\nf :: forall a. [a] -> [a]\\nf xs = ys ++ ys\\n  where ys :: [a]\\n        ys = reverse xs\\n```\\n\\n`forall` now gets special powers: the type variables bound by a forall (in our case `a`) scope over the entire definition\\nof the accompanying value declaration (in this case definition of `f`).\\n\\nThis means that any mention of type `a` in the definition of `f` now refers to that `a` from the type signature of `f`,\\nwhich is exactly what we needed, and the code example above now compiles.\\n\\n## `forall` and extension [RankNTypes](https://ghc.readthedocs.io/en/latest/glasgow_exts.html#arbitrary-rank-polymorphism)\\n\\nBasically, what `RankNTypes` does is enable you to use `forall` nested in type signatures, so that it does not apply to the whole type signature but just the part of it.\\n\\nThis enables some cool things that you were not able to do to before, for example you can specify that your function takes a polymorphic function as an argument.\\n\\nTake a look at this example:\\n```hs\\nfoo :: (forall a. a -> a) -> (Char, Bool)    -- We can do this only with RankNTypes.\\n\\nbar :: forall a. ((a -> a) -> (Char, Bool))  -- This is usual stuff, we don\'t need RankNTypes for it. Actually we can even drop `forall` since it is implicit.\\n```\\nIn `foo`, `forall` is applied only to the first argument of `foo`, which is `a -> a`, and not to the rest of the `f`\'s type signature. This can be done only with `RankNTypes` extension.\\n`bar` on the other hand has `forall` applied to the whole signature, and we could have even ommited this `forall` since it would be there implicitly anyway.\\n\\nNow, what does this mean? If we now have `specificFunc :: Int -> Int` and `polymorphicFunc :: a -> a`, `foo polymorphicFunc` will compile, while `foo specificFunc` will not! On the other hand both `bar specificFunc` and `bar polymorphicFunc` will compile.\\n\\nThis is because we specified, with `forall`, that `foo` needs a polymorphic function (function that takes value of **any** type and returns value of that same type) as the first argument, so we can\'t pass it a function like `specificFunc` that works only for `Int` -> such function is too specific.\\nOn the other hand, `bar` needs a function that takes value of **some** type and returns the value of that same type, so `specificFunc` is completely fine since it works only with `Int`, while `polymorphicFunc` is also ok although it is more general than what is needed, since compiler can easily specialize it. \\n\\nAnother example is `liftPair` function:\\n```hs\\nliftPair :: (forall x. x -> f x) -> (a, b) -> (f a, f b)\\nliftPair func (y, z) = (func y, func z)\\n```\\n```\\n>> liftPair (:[]) (1, \\"a\\")\\n([1], [\\"a\\"])\\n```\\n`liftPair` takes polymorphic function and applies it to both values in the pair.\\nThere would be no way to write its type signature without using `RankNTypes`.\\n\\n## `forall` and extension [ExistentialQuantification](https://ghc.readthedocs.io/en/latest/glasgow_exts.html#existentially-quantified-data-constructors)\\n\\n`ExistentialQuantification` enables us to use `forall` in the type signature of data constructors.\\n\\nThis is useful because it enables us to define heterogeneous data types, which then allows us to store different types in a single data collection (which normally you can\'t do in Haskell, e.g. you can\'t have different types in a list).\\n\\nFor example, if we have\\n```hs\\ndata Showable = forall s. (Show s) => Showable s\\n```\\nnow we can do\\n```hs\\nsomeShowables :: [Showable]\\nsomeShowables = [Showable \\"Hi\\", Showable 5, Showable (1, 2)]\\n\\nprintShowables :: [Showable] -> IO ()\\nprintShowables ss = mapM_ (\\\\(Showable s) -> print s) ss\\n\\nmain :: IO ()\\nmain = printShowables someShowables\\n```\\n\\nIn this example this allowed us to create a heterogeneous list, but only thing we can do with the contents of it is show them.\\n\\nWhat is interesting is that in this case, `forall` plays the role of an existential quantifier (therefore the name of extension, `ExistentialQuantification`), unlike the role of universal quantifier it normally plays.\\n\\n### GADTs\\n\\nAlternative approach to `ExistentialQuantification` is to use the `GADTs` extension, like this:\\n```hs\\n{-# LANGUAGE GADTs #-}\\ndata Showable where\\n  Showable :: (Show s) => s -> Showable\\n```\\n\\nIn this case `forall` is not needed, as it is implicit.\\n\\n\\n## `forall` and extension [TypeApplications](https://ghc.readthedocs.io/en/latest/glasgow_exts.html#visible-type-application)\\n\\n`TypeApplications` does not change how `forall` works like the extensions above do, but it does have an interesting interaction with `forall`, so we will mention it here.\\n\\n`TypeApplications` allows you to specify values of types variables in a type.\\n\\nFor example, you can do `show (read @Int \\"5\\")` to specify that `\\"5\\"` should be interpreted as an `Int`.\\n`read` has type signature `:: Read a => String -> a`, so what `@Int` does is say that that `a` in the type signature is `Int`.\\nTherefore, `read @Int :: String -> Int`.\\n\\nHow does `forall` come into play here?\\n\\nWell, if an identifier\u2019s type signature does not include an explicit `forall`, the type variable arguments appear in the left-to-right order in which the variables appear in the type. So, `foo :: Monad m => a b -> m (a c)` will have its type variables ordered as `m`, `a`, `b`, `c`, and type applications will happen in that order: if we have `foo @Maybe @Either`, `@Maybe` will apply to `m` while `@Either` will apply to `a`. However, if you want to force a different order, for example `a`, `b`, `c`, `m`, so that `@Maybe` in `foo @Maybe @Either` applies to `a`, you can refactor the signature as `foo :: forall a b c m. Monad m => a b -> m (a c)`, and now order of type variables in `forall` will be used when doing type applications!\\n\\nThis will require you to enable `ExplicitForAll` extension, if it is not already enabled.\\n\\n# Conclusion\\n\\nThis document should give a fair idea of how `forall` is used and what can be done with it, but it doesn\'t go into much depth or cover all of the ways `forall` is used in Haskell.\\n\\nFor more in-detail explanations and further investigation, here is a couple of useful resources:\\n- Great SO question/answers: https://stackoverflow.com/questions/3071136/what-does-the-forall-keyword-in-haskell-ghc-do .\\n- Docs on extensions, which in details describe how each of them works: https://ghc.readthedocs.io/en/latest/glasgow_exts.html .\\n- https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/explicit_forall.html .\\n- Article about `ST` monad that also explains a lot about `forall`: https://dl.acm.org/doi/10.1145/178243.178246 . \\n\\nThis blog post originated from the [notes I wrote in wasp-lang/haskell-handbook](https://github.com/wasp-lang/haskell-handbook/blob/35f14951b17f2174cbc269628bea157b6698a9e4/forall.md)."},{"id":"/2021/04/29/discord-bot-introduction","metadata":{"permalink":"/wasp-docs/blog/2021/04/29/discord-bot-introduction","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2021-04-29-discord-bot-introduction.md","source":"@site/blog/2021-04-29-discord-bot-introduction.md","title":"How to implement a Discord bot (in NodeJS) that requires new members to introduce themselves","description":"<img alt=\\"Guest introducing themselves and getting full-access.\\"","date":"2021-04-29T00:00:00.000Z","formattedDate":"April 29, 2021","tags":[{"label":"discord","permalink":"/wasp-docs/blog/tags/discord"},{"label":"nodejs","permalink":"/wasp-docs/blog/tags/nodejs"}],"readingTime":8.87,"hasTruncateMarker":true,"authors":[{"name":"Martin Sosic","title":"Co-founder & CTO @ Wasp","url":"https://github.com/martinsos","email":"martin@wasp-lang.dev","imageURL":"https://github.com/martinsos.png","key":"martinsos"}],"frontMatter":{"title":"How to implement a Discord bot (in NodeJS) that requires new members to introduce themselves","authors":["martinsos"],"tags":["discord","nodejs"]},"prevItem":{"title":"Tutorial: `forall` in Haskell","permalink":"/wasp-docs/blog/2021/09/01/haskell-forall-tutorial"},"nextItem":{"title":"Wasp - language for developing full-stack Javascript web apps with no boilerplate","permalink":"/wasp-docs/blog/2021/03/02/wasp-alpha"}},"content":"import useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\n<p align=\\"center\\">\\n  <figure>\\n    <img alt=\\"Guest introducing themselves and getting full-access.\\"\\n        src={useBaseUrl(\'img/discord-introduction-example.png\')}\\n    />\\n    <figcaption>A Guest user getting access by introducing themselves in the \\"introductions\\" channel.</figcaption>\\n  </figure>\\n</p>\\n\\nAt [Wasp](https://wasp-lang.dev), we have a Discord server for our community, where we talk with people interested in and using Wasp - Waspeteers!\\n\\nIn the beginning, we knew everybody in the community by their name, but as it started growing, we had a lot of people joining that never wrote anything, and the community started feeling less homey, less intimate.\\n\\nThis was when we decided to make it required for the new members to introduce themselves to gain access to the community.\\nWe knew that with this kind of barrier we would probably lose some potential new Waspeteers, but those that would go through it would be more engaged and better integrated.\\n\\nWe found no other way to accomplish this automatically but to implement our own Discord bot.\\nIn this post I will describe in detail how we did it.\\n\\n\x3c!--truncate--\x3e\\n\\n## High-level approach\\n\\nWe want the following: when a new user comes to our Discord server, they should be able to access only \\"public\\" channels, like `rules`, `contributing`, and most importantly, `introductions`, where they could introduce themselves.\\n\\nOnce they introduced themselves in the `introductions` channel, they would get access to the rest of the channels.\\n\\n<p align=\\"center\\">\\n  <figure>\\n    <img alt=\\"Channels user can see when Guest vs when full member.\\"\\n        src={useBaseUrl(\'img/wasp-guest-vs-waspeteer.png\')}\\n        height=\\"400px\\"\\n    />\\n    <figcaption>Left: what Guest sees; Right: what Waspeteer sees.</figcaption>\\n  </figure>\\n</p>\\n\\n\\nIn Discord, access control is performed via roles. There are two ways to accomplish what we need:\\n1. **Adding a role that grants access**. When they join, they have no roles. Once they introduce themselves, they are granted a role (e.g. `Member` or `Waspeteer`) that is required to access the rest of the server.\\n2. **Removing a role that forbids access**. When they join, they are automatically assigned a role `Guest`, for which we configured the non-public channels to deny access. Once they introduce themselves, the role `Guest` gets removed and they gain access to the rest of the server.\\n\\nWe decided to go with the second approach since it means we don\'t have to assign all the existing members with a new role. From now on, we will be talking about how to get this second approach working.\\n\\nTo get this going, we need to do the following:\\n1. Create role `Guest`.\\n2. Ensure that the `Guest` role has permissions to access only \\"public\\" channels.\\n   One convenient way to go about this is to disable \\"View Channels\\" permission for the role `Guest` at the level of Category, so it propagates to all the channels in it, instead of doing it for every single channel.\\n   Once you are done, use the \\"See server as a role\\" feature of Discord to confirm that you set the permissions as you wanted.\\n3. Automatically inform new members that they must introduce themselves in the `introductions` channel with `!intro <text_about_me>` to gain access to the rest of the server.\\n   This can be done via Discord\'s \\"Welcome Screen\\" feature or via one of the many existing Discord bots out there offering this functionality.\\n4. Automatically assign the `Guest` role to a new member when they join the server.\\n5. Automatically remove the `Guest` role when a member introduces themselves in the public `introductions` channel.\\n\\n#1, #2 and #3 are relatively straight-forward.\\n\\nFor the #4 (automatic assignment of the role when a new member joins the server), since Discord doesn\'t support this directly, you will need a bot to do it.\\nLuckily, many bots allow you to auto-assign roles when new members join, and I ended up using [MEE6](https://mee6.xyz/) for this.\\nI set it up so that when a new member joins, they are immediately assigned a `Guest` role.\\n\\nHowever, for the #5 (remove or assign the role on a message in a specific channel), the situation is more complicated - I couldn\'t find a single bot out there that supports this!\\nThe closest I got was with [Carl Bot](https://carl.gg/) and its \\"tags\\" feature, which allows you to write custom code, but in the end, it turned out to be too restrictive to accomplish this.\\nTherefore, I ended up implementing our own bot (Wasp Bot) that does this.\\n\\n## Implementing a Discord Bot (NodeJS)\\n\\nI decided to implement a bot in NodeJS since it is easy to get started quickly and there is a good Discord library.\\n\\nI will describe how to create it step by step below, but [here is the final code of the bot](https://github.com/wasp-lang/wasp-bot/tree/4b3858202622c7635aeb6f1d71d9ba9781eea6eb) if you want to skip ahead.\\n\\n### Defining bot on Discord and adding it to your server.\\n\\nBefore we even start implementing the bot, we will tell Discord about it first, in order to obtain the neccessary credentials that we will use in our code, and we will add the bot to our server.\\nThere are many tutorials already on how to do this, so I will keep it short.\\n\\n1. Go to Discord Developer Portal, create a new Application -> I named it `Wasp`.\\n2. Go to the \\"Bot\\" part of Application \\"Settings\\" and add a new bot. I named it `WaspBot`.\\n3. On the \\"Bot\\" page of your freshly created bot, there is a \\"TOKEN\\" part -> create a mental note about it, we will need this later when running our bot.\\n4. Go to the \\"OAuth2\\" part of Application \\"Settings\\". Here we will define which permissions our bot will have.\\n   This is done by checking the permissions we want to give it and then following the URL that will be generated based on our choices.\\n   - Check the `bot` under the \\"SCOPES\\" section.\\n   - Scroll down further to find the \\"BOT PERMISSIONS\\" section. There, check the `Manage Roles`, `View Channels`, `Read Message History`, and `Send Messages`.\\n   - Under the \\"SCOPES\\" section above, you will see a URL. Copy it into the browser and follow the steps to add the bot to your server.\\n\\n### Creating a basic bot in NodeJS\\n\\nIn a directory where your code will be, create a new npm project with `npm init` -> set the entry point to `bot.js` instead of `index.js`. This will result in a `package.json` file being generated.\\n\\nWe will need one important dependency, `discord.js`, to make it easy to work with Discord\'s API.\\nAdd it with `npm install -S discord.js`.\\n\\nNow, create `bot.js` file next to `package.json` with following content:\\n```js title=\\"bot.js\\"\\nconst Discord = require(\'discord.js\')\\n\\nconst BOT_TOKEN = process.env.BOT_TOKEN\\n\\nconst bot = new Discord.Client()\\nbot.login(BOT_TOKEN)\\n\\nbot.on(\'ready\', function (evt) {\\n  console.log(`Logged in as: ${bot.user.tag}.`)\\n})\\n```\\n\\nThis is it! Run\\n```\\nDISCORD_BOT=<TOKEN_OF_YOUR_DISCORD_BOT> node bot.js\\n```\\nand you should see output about successful login, in my case it was `Logged in as: WaspBot#1234`.\\n\\n### Detecting a valid introduction from a member\\n\\n**NOTE**: For the following part, I was using [Discord.js](https://discord.js.org/#/) docs to figure out how to do it, so if you need more details on a specific step, check them out.\\n\\nNow is the moment to define exactly how we want the introduction process to go.\\nSo, let\'s say that the correct way for new members to introduce themselves is by sending a message to the `introductions` channel that starts with `!intro ` and follows with at least 20 characters of text (to ensure the introduction is not too short).\\n`!intro` makes it easy for our bot to know when to act (in Discord, bot commands often start with `!<something>`).\\n\\nLet\'s add the needed code to `bot.js`:\\n```js title=\\"bot.js\\"\\n...\\n\\nconst INTRODUCTIONS_CHANNEL_ID = \\"<YOU_WILL_HAVE_TO_FIND_THIS_ON_DISCORD_SERVER>\\"\\n\\nbot.on(\'message\', async msg => {\\n  if (msg.content.startsWith(\'!intro \')) {\\n    if (msg.channel.id.toString() !== INTRODUCTIONS_CHANNEL_ID) {\\n      const introductionsChannelName =\\n        msg.guild.channels.resolve(INTRODUCTIONS_CHANNEL_ID).name\\n      return msg.reply(\\n        `Please use !intro command in the ${introductionsChannelName} channel!`\\n      )\\n    }\\n\\n    const introMsg = msg.content.substring(\'!intro \'.length).trim()\\n    const minMsgLength = 20\\n    if (introMsg.length < minMsgLength) {\\n      return msg.reply(\\n        `Please write introduction at least ${minMsgLength} characters long!`\\n      )\\n    }\\n\\n    return msg.reply(`Yay successful introduction!`)\\n  }\\n})\\n```\\n\\nOne thing to notice is that you will have to obtain the ID of the `introductions` channel and paste it in your code where I put the placeholder above.\\nYou can find out this ID by going to your Discord server in the Discord app, right-clicking on the `introductions` channel, and clicking on `Copy ID`. For this to work, you will first have to enable the \\"Developer Mode\\" (under \\"User Settings\\" > \\"Advanced\\").\\n\\n### Removing the \\"Guest\\" role upon successful introduction\\n\\nWhat is missing is removing the `Guest` role upon successful introduction, so let\'s do that:\\n\\n```js {4,24-35} title=\\"bot.js\\"\\n...\\n\\nconst INTRODUCTIONS_CHANNEL_ID = \\"<YOU_WILL_HAVE_TO_FIND_THIS_ON_DISCORD_SERVER>\\"\\nconst GUEST_ROLE_ID = \\"<YOU_WILL_HAVE_TO_FIND_THIS_ON_DISCORD_SERVER>\\"\\n\\nbot.on(\'message\', async msg => {\\n  if (msg.content.startsWith(\'!intro \')) {\\n    if (msg.channel.id.toString() !== INTRODUCTIONS_CHANNEL_ID) {\\n      const introductionsChannelName =\\n        msg.guild.channels.resolve(INTRODUCTIONS_CHANNEL_ID).name\\n      return msg.reply(\\n      `Please use !intro command in the ${introductionsChannelName} channel!`\\n      )\\n    }\\n\\n    const introMsg = msg.content.substring(\'!intro \'.length).trim()\\n    const minMsgLength = 20\\n    if (introMsg.length < minMsgLength) {\\n      return msg.reply(\\n        `Please write introduction at least ${minMsgLength} characters long!`\\n      )\\n    }\\n\\n    const member = msg.guild.member(msg.author)\\n    try {\\n      if (member.roles.cache.get(GUEST_ROLE_ID)) {\\n        await member.roles.remove(GUEST_ROLE_ID)\\n        return msg.reply(\\n          \'Nice getting to know you! You are no longer a guest\' +\\n          \' and have full access, welcome!\'\\n        )\\n      }\\n    } catch (error) {\\n      return msg.reply(`Error: ${error}`)\\n    }\\n  }\\n})\\n```\\n\\nSame as with the ID of the `introductions` channel, now you will also need to find out the ID of the `Guest` role (which you should have created at some point).\\nYou can do it by finding it in the server settings, under the list of roles, right-clicking on it, and then \\"Copy ID\\".\\n\\nThis is it! You can now run the bot with\\n```js\\nDISCORD_BOT=<TOKEN_OF_YOUR_DISCORD_BOT> node bot.js\\n```\\nand if you assign yourself a `Guest` role on the Discord server and then type `!intro Hi this is my introduction, I am happy to be here.` in the `introductions` channel, you should see yourself getting full access together with an appropriate message from your bot.\\n\\n### Deploying the bot\\n\\n:::note\\nHeroku used to offer free apps under certain limits. However, as of November 28, 2022, they ended support for their free tier. https://blog.heroku.com/next-chapter\\n\\nAs such, we have updated our Deployment docs with new recommendations: https://wasp-lang.dev/docs/deploying\\n:::\\n\\nWhile there are many ways to deploy the Discord bot, I will shortly describe how we did it via Heroku.\\n\\nWe created a Heroku app `wasp-discord-bot` and set up the \\"Automatic deploys\\" feature on Heroku to automatically deploy every push to the `production` branch (our bot is on Github).\\n\\nOn Heroku, we set the environment variable `DISCORD_BOT` to the token of our bot.\\n\\nFinally, we added `Procfile` to our project:\\n```yaml title=\\"Procfile\\"\\nworker: node bot.js\\n```\\n\\nThat is it! On every push to the `production` branch, our bot gets deployed."},{"id":"/2021/03/02/wasp-alpha","metadata":{"permalink":"/wasp-docs/blog/2021/03/02/wasp-alpha","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2021-03-02-wasp-alpha.md","source":"@site/blog/2021-03-02-wasp-alpha.md","title":"Wasp - language for developing full-stack Javascript web apps with no boilerplate","description":"\x3c!---","date":"2021-03-02T00:00:00.000Z","formattedDate":"March 2, 2021","tags":[{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"}],"readingTime":6.79,"hasTruncateMarker":true,"authors":[{"name":"Martin Sosic","title":"Co-founder & CTO @ Wasp","url":"https://github.com/martinsos","email":"martin@wasp-lang.dev","imageURL":"https://github.com/martinsos.png","key":"martinsos"}],"frontMatter":{"title":"Wasp - language for developing full-stack Javascript web apps with no boilerplate","authors":["martinsos"],"tags":["wasp"]},"prevItem":{"title":"How to implement a Discord bot (in NodeJS) that requires new members to introduce themselves","permalink":"/wasp-docs/blog/2021/04/29/discord-bot-introduction"},"nextItem":{"title":"Journey to YCombinator","permalink":"/wasp-docs/blog/2021/02/23/journey-to-ycombinator"}},"content":"import useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\n\x3c!---\\nSubject idea: Removing boilerplate from web development with a domain specific language.\\nSubject idea: Creating a domain specific language for developing web apps with less code.\\nSubject idea: Creating a domain specific language to remove boilerplate from web development.\\nSubject idea: Using domain specific language to do web development with no boilerplate.\\n--\x3e\\n\\n<p align=\\"center\\">\\n  <img alt=\\"Wasp logo\\"\\n      src={useBaseUrl(\'img/wasp-logo-wide.png\')}\\n      height=\\"150px\\"\\n  />\\n</p>\\n\\nFor the last year and a half, my twin brother and I have been working on [Wasp](https://wasp-lang.dev): a new programming language for developing full-stack web apps with less code.\\n\\nWasp is a **simple declarative language** that makes developing web apps easy while still allowing you to use the latest technologies like **React, Node.js, and Prisma**.\\n\\nIn this post, I will share with you why we believe Wasp could be a big thing for web development, how it works, where we are right now and what is the plan for the future!\\n\\n\x3c!--truncate--\x3e\\n\\n## Why Wasp?\\n\\nYou know how to use React, know your way around HTML/CSS/\u2026, know how to write business logic on the backend (e.g. in Node), but when you want to build an actual web app and deploy it for others to use, you drown in all the details and extra work - responsive UI, proper error handling, security, building, deployment, authentication, managing server state on the client, managing database, different environments, ....\\n\\n<p align=\\"center\\">\\n  <img alt=\\"Iceberg of web app development\\"\\n      src={useBaseUrl(\'img/iceberg-of-web-app-dev.png\')}\\n      width=\\"500px\\"\\n  />\\n</p>\\n\\nJose Aguinaga described in a fun way the unexpected complexity of web app development in his blog post [\\"How it feels to learn JavaScript in 2016\\"](https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f), which still feels relevant 4 years later. \\n\\nWe are building Wasp because even though we are both experienced developers and have worked on multiple complex web apps in various technologies (JQuery -> Backbone -> Angular -> React, own scripts / makefile -> Grunt -> Gulp -> Webpack, PHP -> Java -> Node.js, \u2026), we still feel **building web apps is harder than it should be**, due to a lot of boilerplate and repetitive work involved in the process.  \\n\\nThe main insight for us was that while the tech stack keeps advancing rapidly, the core requirements of the apps are mostly remaining the same (auth, routing, data model CRUD, ACL, \u2026).\\n\\nThat is why almost 2 years ago we started thinking about **separating web app specification** (what it should do) **from its implementation** (how it should do it).  \\nThis led us to the idea of extracting common web app features and concepts into a special specification language (Wasp), while the implementation details are still described via a modern stack (right now React, Node.js, Prisma).\\n\\nOur vision with Wasp is to create **a powerful but simple language where you can describe your web app as humanly as possible**.\\nWe want to make the top of that iceberg on the image above as pleasant as possible while making the bottom part much smaller.  \\nIn such language, with just a few words, you can specify pages and their routes, specify which type of authentication you want, define basic entities / data models, describe basic data flow, choose where you want to deploy, implement specific details in React/Node, and let Wasp take care of connecting it all, building it and deploying it.\\n\\n```css title=\\"Example of wasp code describing part of a simple full-stack web app.\\"\\napp todoApp {\\n  title: \\"ToDo App\\" /* visible in tab */\\n}\\n\\nroute \\"/\\" -> page Main\\npage Main {\\n  component: import Main from \\"@ext/Main.js\\"  /* Import your React code. */\\n}\\n\\nauth { /* full-stack auth out-of-the-box */\\n  userEntity: User,\\n  methods: {\\n    usernameAndPassword: {}\\n  }\\n}\\n\\nentity User {=psl\\n  id          Int     @id @default(autoincrement())\\n  username    String  @unique\\n  password    String\\npsl=}\\n```\\n\\nCheck [here](https://github.com/wasp-lang/wasp/blob/release/examples/tutorials/TodoApp/main.wasp) for the complete example.\\n\\n## Why a language (DSL), aren\u2019t frameworks solving this already?\\n\\nFrameworks (like e.g. Ruby on Rails or Meteor) are a big inspiration to us.\\nHowever, we want to take things one step further - by designing a language specialized for the domain of web apps (a [DSL](https://en.wikipedia.org/wiki/Domain-specific_language)) we can get rid of a lot of boilerplate and provide a cleaner & simpler developer experience.\\n\\nOn the other hand, we are not trying to replace everything with Wasp nor think that would make sense - just the opposite, Wasp acts as a \u201cglue\u201d between your React and Node.js code, saving you from the grunt work while allowing you to keep the flexibility of writing your own code.\\n**The majority of the code is still being written in React and Node.js, with Wasp serving as the backbone of your whole application.**\\n\\nAnother benefit of a DSL is that it allows Wasp to **understand the web app\u2019s requirements during the build time and reason about it** before generating the final code, and this is what we are especially excited about.\\n\\nFor example, when generating code to be deployed to production, it could pick the most appropriate architecture based on its understanding of the web app and deploy it to serverless or another type of architecture (or even a combination).\\nAnother example would be reusing your data model logic through all the parts of the stack while defining it just once in Wasp.\\n\\nDSL opens the potential for optimizations, static analysis, extensibility, and unparalleled ergonomics.\\n\\n## How does it work?\\n\\nWasp compiler compiles the .wasp/React/Node.js source code into just React/Node.js target code.  \\nCurrently, Wasp supports only Javascript, but we plan to add Typescript soon.  \\nTechnical note: Wasp compiler is implemented in Haskell.\\n\\n![Wasp compilation diagram](/img/wasp-compilation.png)\\n\\nWhile right now only React and Node.js are supported, we plan to support multiple other technologies in the future.\\n\\nGenerated code is human readable and can easily be inspected and even ejected if Wasp becomes too limiting.\\nIf not ejecting, there is no need for you to ever look at the generated code - it is generated by Wasp in the background.\\n\\nWasp is used via `wasp` CLI - to run wasp project in development, all you need to do is run `wasp start`.\\n\\n<p align=\\"center\\">\\n  <img alt=\\"Wasp CLI output\\"\\n      src={useBaseUrl(\'img/wasp-cli-output.png\')}\\n  />\\n</p>\\n\\n\\n## Where is Wasp now and where is it going?\\n\\nOur big vision is to move as much of the web app domain knowledge as possible into the Wasp language itself, giving Wasp more power and flexibility.\\n\\nUltimately, since Wasp would have such a deep understanding of the web app\'s requirements, we could generate a visual editor on top of it - allowing non-developers to participate in development alongside developers.\\n\\nAlso, Wasp wouldn\'t be tied to the specific technology but rather support multiple technologies (React/Angular/..., Node/Go/...**.\\n\\n**Wasp is currently in Alpha** and some features are still rough or missing, there are things we haven\u2019t solved yet and others that will probably change as we progress, but **you can try it out and build and deploy web apps**!\\n\\n### What Wasp currently supports:\\n - \u2705 full-stack auth (username & password)\\n - \u2705 pages & routing\\n - \u2705 blurs the line between client & server - define your server actions and queries and call them directly in your client code (RPC)!\\n - \u2705 smart caching of server actions and queries (automatic cache invalidation)\\n - \u2705 entity (data model) definition with Prisma.io\\n - \u2705 ACL on frontend\\n - \u2705 importing NPM dependencies \\n\\n### What is coming:\\n - \u23f3 ACL on backend\\n - \u23f3 one-click deployment\\n - \u23f3 more auth methods (Google, Linkedin, ...**\\n - \u23f3 tighter integration of entities with other features\\n - \u23f3 themes and layouts\\n - \u23f3 support for explicitly defined server API\\n - \u23f3 inline JS - the ability to mix JS code with Wasp code!\\n - \u23f3 Typescript support\\n - \u23f3 server-side rendering\\n - \u23f3 Visual Editor\\n - \u23f3 support for different languages on the backend\\n - \u23f3 richer wasp language with better tooling \\n\\n**You can check out our repo** at https://github.com/wasp-lang/wasp and **give it a try** at https://wasp-lang.dev/docs -> we are always looking for feedback and suggestions on how to shape Wasp!\\n\\nWe also have a **community** on [Discord](https://discord.com/invite/rzdnErX), where we chat about Wasp-related stuff - join us to see what we are up to, share your opinions or get help with your Wasp project."},{"id":"/2021/02/23/journey-to-ycombinator","metadata":{"permalink":"/wasp-docs/blog/2021/02/23/journey-to-ycombinator","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2021-02-23-journey-to-ycombinator.md","source":"@site/blog/2021-02-23-journey-to-ycombinator.md","title":"Journey to YCombinator","description":"<img alt=\\"Martin & Matija at YCombinator HQ\\"","date":"2021-02-23T00:00:00.000Z","formattedDate":"February 23, 2021","tags":[{"label":"startup","permalink":"/wasp-docs/blog/tags/startup"},{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"}],"readingTime":3.185,"hasTruncateMarker":true,"authors":[{"name":"Martin Sosic","title":"Co-founder & CTO @ Wasp","url":"https://github.com/martinsos","email":"martin@wasp-lang.dev","imageURL":"https://github.com/martinsos.png","key":"martinsos"}],"frontMatter":{"title":"Journey to YCombinator","authors":["martinsos"],"tags":["startup","wasp"]},"prevItem":{"title":"Wasp - language for developing full-stack Javascript web apps with no boilerplate","permalink":"/wasp-docs/blog/2021/03/02/wasp-alpha"},"nextItem":{"title":"Hello Wasp!","permalink":"/wasp-docs/blog/2019/09/01/hello-wasp"}},"content":"import useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\n<p align=\\"center\\">\\n  <img alt=\\"Martin & Matija at YCombinator HQ\\"\\n      src={useBaseUrl(\'img/us-at-ycombinator.jpg\')}\\n      height=\\"400px\\"\\n  />\\n</p>\\n\\nWasp became part of Winter 2021 YCombinator batch!\\n\\nHere we describe our journey and how we got in after applying for the third time.\\n\\n\x3c!--truncate--\x3e\\n\\n## The beginning\\n\\nAbout 2 years ago (start of 2019) brother and I first started thinking about the idea of a (domain specific) language that is specialized for full-stack web app development - language that removes boilerplate and makes web development simpler.\\nWe named it Wasp (Web App SPecification).\\n\\nAfter working on it for about a year as a side-project (researching the space, talking with potential users, building a prototype, learning), we realized it will take our full-time dedication to make something serious out of it, so we quit the current job and went all-in into Wasp, bootstrapping ourselves while working on it, to see how far we can get.\\n\\n## The journey to YCombinator\\n\\nDue to the nature of Wasp (open-source, web framework / language), we were aware that we will need to raise funds at some point if we want to survive.\\nWe had a startup of our own previously, and we worked in multiple startups in the past, so we already knew quite a bit about how to go about it and what to expect.\\n\\nTherefore, as soon as we went full-time into it (start of 2020), we immediately applied for YCombinator (top startup accelerator in the world). Soon, we got invited to the USA (we are from Europe) for the final on-site interview!\\n\\nWe spent weeks preparing for the interview, polishing our pitch, vision, business plan, our understanding of our users, doing mock interviews - all for those crucial 10 minutes (yes, interview lasts only 10 minutes!).\\nAt the end we didn\u2019t pass the final interview, however we got encouraging feedback that, although we are too early, we have potential and should try applying again when we make more progress.\\nThis made a lot of sense to us, since we had only a very basic prototype and little traction.\\n\\nWe decided to continue working on Wasp for some longer time and continue applying to YC and talking with other interesting accelerators/investors, and see where that gets us - if nothing else, we will learn a lot on the way :)!\\n\\nHalf a year later, after making progress on multiple sides, we went for a second interview (this time online due to Covid) and while we felt it was really close, we still didn\u2019t get in - they wanted to see more traction, more proof that people want it.\\n\\nFinally, by the autumn of 2020, we were in a position where we had released an early-alpha version of Wasp, managed to build an initial community (>50 people on Discord, 500 Github stars) and made it to \u201cProduct of the day\u201d on the Product Hunt.\\nWith all that we applied for the YC for the third time and made it in!\\n\\nInteresting fact is that if you applied to YC previously and got rejected, that is actually a plus when you apply the next time (it show persistence, and they can see your progress).\\nAlso, while we did spend significant time preparing for the YC interviews, all that preparation also helped us get a better understanding of our idea, what our users(developers) really need and how to properly present it, so it was worth it regardless of the result of the interviews.\\n\\n## What now?\\n\\nRight now (Feb 2020) we are in the middle of the YCombinator program, building community, talking with developers and developing Wasp toward beta.\\n\\nIt is still just the two of us and Wasp is in early stage, but with amazing community members on our side and with YC backing us up, we are not afraid to dream big!"},{"id":"/2019/09/01/hello-wasp","metadata":{"permalink":"/wasp-docs/blog/2019/09/01/hello-wasp","editUrl":"https://github.com/wasp-lang/wasp/edit/release/web/blog/2019-09-01-hello-wasp.md","source":"@site/blog/2019-09-01-hello-wasp.md","title":"Hello Wasp!","description":"About a year or so ago, brother and I started discussing how awesome it would be to have a programming language that would understand what \u201cweb app\u201d means. Such language would, on one hand, serve as an expressive specification of the web app, while on the other hand, it would take care of \u201cboring\u201d work for us, while we could focus on the business logic specific for our web app.","date":"2019-09-01T00:00:00.000Z","formattedDate":"September 1, 2019","tags":[{"label":"wasp","permalink":"/wasp-docs/blog/tags/wasp"}],"readingTime":5.335,"hasTruncateMarker":true,"authors":[{"name":"Martin Sosic","title":"Co-founder & CTO @ Wasp","url":"https://github.com/martinsos","email":"martin@wasp-lang.dev","imageURL":"https://github.com/martinsos.png","key":"martinsos"}],"frontMatter":{"title":"Hello Wasp!","authors":["martinsos"],"tags":["wasp"]},"prevItem":{"title":"Journey to YCombinator","permalink":"/wasp-docs/blog/2021/02/23/journey-to-ycombinator"}},"content":"About a year or so ago, brother and I started discussing how awesome it would be to have a programming language that would understand what \u201cweb app\u201d means. Such language would, on one hand, serve as an expressive specification of the web app, while on the other hand, it would take care of \u201cboring\u201d work for us, while we could focus on the business logic specific for our web app.\\n\\nStep by step, the idea has started to take a more concrete shape, and Wasp (Web Application SPecification language) came to life! While still very early, we are writing this blog post to explain why are we building Wasp, what is the current status and what the future may hold.\\n\\n\x3c!--truncate--\x3e\\n\\n## More specification, less implementation\\n\\nImagine you want to create a simple Todo web app.\\n\\nYou would explain it like this to your best buddy web developer: \u201cI want to create a web app with the title \u2018Todo App\u2019 that has a single page with a list of tasks. Each task has a description and can be either marked as done or not done. The list starts as empty and tasks can be added, deleted or marked as done. I will send you designs for this. Also, I want a user to be required to register/log in.\u201d\\n\\nNow, let\u2019s take a look at what needs to be done to implement such an app. We need to choose technologies we are going to use (frontend, backend, database, \u2026), figure out the project file structure, set up the build toolchain, configure linting/auto-formatting/style-guide, set up tests (unit/integration, e2e), set up deployment (production, staging), set up code sharing between frontend and backend, \u2026 . Then, once everything is set up, we need to implement basic CRUD functionality (components on frontend and API on the backend), user management, probably some kind of menu on the frontend, \u2026\\n\\nWe can easily see that explanation to web developer (specification) is short and concise because many details are implicit or assumed to be handled in a reasonable default way. On the other hand, implementation is complicated since it has to take care of all the details, many of them not unique for the web app we are building but common for most of the web apps. Also, if we consider the specification through time, it would look the same now and 5 years ago. On the other hand, implementation would be different, due to the new technologies that have emerged in the meantime.\\n\\nSo if the specification is time-resilient, short and relatively simple to describe, while implementation is complex, volatile and requires a lot of expert knowledge, how great would it be to write more of specification and less of implementation when building a web app? For that, we need more powerful languages, that will be able to express more in less code. This is where Wasp comes in.\\n\\n## Wasp!\\n\\nThe idea behind Wasp is to take everything repetitive and common in the development of a typical web app and have Wasp take care of those parts for us. Ideally, programming in Wasp would very much look like describing the specification to the web developer, therefore writing more specification and less implementation. Wasp is the one who will keep evolving and making sure your specification is implemented in the best possible technology using the industry best practices.\\n\\nTo achieve that, we made Wasp as a DSL (domain-specific language) that understands common concepts of a web app like pages, routes, frontend and backend and their relationship, entities, user and roles/permissions, etc. Other parts, those that are specific for our web app (business logic), we can still write in html/css/js/\u2026, and then plug them into Wasp, combining the power of Wasp with the flexibility of existing technologies.\\n\\n## What\u2019s up?\\n\\nWe are currently working on the first version of Wasp compiler, and are planning to soon have very first, MVP version ready. It will be just the first step of our vision of what Wasp could be, but the sooner we get it out there, the sooner we can start collecting feedback and further shaping Wasp together with the community.\\n\\nWe believe it will take significant effort to bring Wasp to the level where a big portion of developers will be able to build the whole app with Wasp without feeling restrained by missing flexibility or options, while on the other hand, we don\u2019t want to wait too long until people can start using Wasp. Therefore, we decided to build it from start in such a way that a developer can at any moment \u201ceject\u201d from Wasp and continue on their own, where \u201cejecting\u201d would mean that Wasp would generate the source code of web app that you can continue working on. That is why compiler for Wasp that we are building is actually a transpiler whose output is web app written with best practices, that you can at any moment take and continue from there if you feel too limited by Wasp. It is like having a senior developer guide you through writing a web app!\\n\\nThis poses the following question: \u201cIn which technologies will web app that Wasp transpiler produces be implemented?\u201d. Well, while our vision is to offer multiple flavors here, so that you can choose the combination of technologies that you want to use, for a start we are going with one fixed technology stack, based on most popular technologies: React, Redux, NodeJS, and Mongo.\\n\\n## Moar\\n\\nOne thing that we are very excited about regarding Wasp is that Wasp understands the way web app is built. So, once you describe it in Wasp, there are many things we could be able to do with it. We could automatically generate tests since we understand the requirements. We could suggest solutions on how to improve the design of the web app. Also, since Wasp should make building web apps easier, we could build solutions on top of it, for example, a visual builder that generates Wasp code, that in turn generates a web app.\\n\\nWe are still very early in the Wasp journey but we are very excited about the opportunities that we imagine it could bring and about the possibilities it could unlock. We hope that this blog post will inspire others to discuss this concept and that together we will create something amazing and learn a lot on the way!"}]}')}}]);