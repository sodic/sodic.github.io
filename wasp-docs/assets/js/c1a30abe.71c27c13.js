"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[6741],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=p(n),c=i,h=d["".concat(l,".").concat(c)]||d[c]||u[c]||r;return n?a.createElement(h,o(o({ref:t},m),{},{components:n})):a.createElement(h,o({ref:t},m))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},46300:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(67294),i=n(50012);function r(e){let{path:t}=e;const[n]=(0,i.Nk)("docusaurus.tab.js-ts"),r=t.lastIndexOf("{"),o=t.slice(r+1,t.length-1),[s,l]=o.split(","),p=t.slice(0,r);return a.createElement("code",null,p+("js"===n?s:l))}},55508:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));n(46300);const r={title:"Migration from 0.11.X to 0.12.X"},o=void 0,s={unversionedId:"introduction/migrate-from-11",id:"introduction/migrate-from-11",title:"Migration from 0.11.X to 0.12.X",description:"What's new in Wasp 0.12.0?",source:"@site/docs/introduction/migrate-from-11.md",sourceDirName:"introduction",slug:"/introduction/migrate-from-11",permalink:"/docs/introduction/migrate-from-11",draft:!1,editUrl:"https://github.com/wasp-lang/wasp/edit/release/web/docs/introduction/migrate-from-11.md",tags:[],version:"current",frontMatter:{title:"Migration from 0.11.X to 0.12.X"},sidebar:"docs",previous:{title:"Editor Setup",permalink:"/docs/editor-setup"},next:{title:"1. Creating a New Project",permalink:"/docs/tutorial/create"}},l={},p=[{value:"What&#39;s new in Wasp 0.12.0?",id:"whats-new-in-wasp-0120",level:2},{value:"New project structure",id:"new-project-structure",level:3},{value:"New auth",id:"new-auth",level:3},{value:"How to Migrate?",id:"how-to-migrate",level:2},{value:"Migrating your project to the new structure",id:"migrating-your-project-to-the-new-structure",level:3},{value:"Migrating auth",id:"migrating-auth",level:3},{value:"1. Migrate to the New Auth System",id:"1-migrate-to-the-new-auth-system",level:4},{value:"2. Cleanup the Old Auth System",id:"2-cleanup-the-old-auth-system",level:4},{value:"Example Migration Functions",id:"example-migration-functions",level:4},{value:"Username &amp; Password",id:"username--password",level:5},{value:"Email",id:"email",level:5},{value:"Google &amp; GitHub",id:"google--github",level:5},{value:"Next steps",id:"next-steps",level:3}],m={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"whats-new-in-wasp-0120"},"What's new in Wasp 0.12.0?"),(0,i.kt)("h3",{id:"new-project-structure"},"New project structure"),(0,i.kt)("p",null,"Here's a file tree of a fresh Wasp project created with the previous version of Wasp.\nMore precisely, this is what you'll get if you run ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp new myProject")," using Wasp 0.11.x:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 main.wasp\n\u251c\u2500\u2500 src\n\u2502\xa0\xa0 \u251c\u2500\u2500 client\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 Main.css\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 MainPage.jsx\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 react-app-env.d.ts\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 tsconfig.json\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 waspLogo.png\n\u2502\xa0\xa0 \u251c\u2500\u2500 server\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 tsconfig.json\n\u2502\xa0\xa0 \u251c\u2500\u2500 shared\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 tsconfig.json\n\u2502\xa0\xa0 \u2514\u2500\u2500 .waspignore\n\u2514\u2500\u2500 .wasproot\n")),(0,i.kt)("p",null,"Compare that with the file tree of a fresh Wasp project created with Wasp\n0.12.0. In other words, this is what you will get by running ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp new myProject"),"\nfrom this point onwards:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 main.wasp\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 public\n\u2502\xa0\xa0 \u2514\u2500\u2500 .gitkeep\n\u251c\u2500\u2500 src\n\u2502\xa0\xa0 \u251c\u2500\u2500 Main.css\n\u2502\xa0\xa0 \u251c\u2500\u2500 MainPage.jsx\n\u2502\xa0\xa0 \u251c\u2500\u2500 queries.ts\n\u2502\xa0\xa0 \u251c\u2500\u2500 vite-env.d.ts\n\u2502\xa0\xa0 \u251c\u2500\u2500 .waspignore\n\u2502\xa0\xa0 \u2514\u2500\u2500 waspLogo.png\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 vite.config.ts\n\u2514\u2500\u2500 .wasproot\n\n")),(0,i.kt)("p",null,"The main differences are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The server/client code separation is no longer necessary. You can now organize\nyour code however you want, as long as it's inside the ",(0,i.kt)("inlineCode",{parentName:"li"},"src")," directory."),(0,i.kt)("li",{parentName:"ul"},"All external imports in your Wasp file must have paths starting with ",(0,i.kt)("inlineCode",{parentName:"li"},"@src")," (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"import foo from '@src/bar.js')\nwhere "),"@src",(0,i.kt)("inlineCode",{parentName:"li"},"refers to the"),"src",(0,i.kt)("inlineCode",{parentName:"li"},"directory in your project root. The paths can\nno longer start with"),"@server",(0,i.kt)("inlineCode",{parentName:"li"},"or"),"@client`."),(0,i.kt)("li",{parentName:"ul"},"Your project now features a top-level ",(0,i.kt)("inlineCode",{parentName:"li"},"public")," dir. Wasp will publicly serve\nall the files it finds in this directory. Read more about it\n",(0,i.kt)("a",{parentName:"li",href:"https://wasp-lang.dev/docs/project/static-assets"},"here"),".")),(0,i.kt)("p",null,"Our ","[Overview docs]","(todo link) explain the new\nstructure in detail, while this page provides a ",(0,i.kt)("a",{parentName:"p",href:"#migrating-your-project-to-the-new-structure"},"quick guide")," for migrating existing\nprojects."),(0,i.kt)("h3",{id:"new-auth"},"New auth"),(0,i.kt)("p",null,"In Wasp 0.11.X, authentication was based on the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," model which the developer needed to set up properly and take care of the auth fields like ",(0,i.kt)("inlineCode",{parentName:"p"},"email")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"password"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'app myApp {\n  wasp: {\n    version: "^0.11.0"\n  },\n  title: "My App",\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: "/login"\n  },\n}\n\nentity User {=psl\n  id                        Int           @id @default(autoincrement())\n  username                  String        @unique\n  password                  String\n  externalAuthAssociations  SocialLogin[]\npsl=}\n\nentity SocialLogin {=psl\n  id          Int       @id @default(autoincrement())\n  provider    String\n  providerId  String\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId      Int\n  createdAt   DateTime  @default(now())\n  @@unique([provider, providerId, userId])\npsl=}\n')),(0,i.kt)("p",null,"From 0.12.X onwards, authentication is based on the auth models which are automatically set up by Wasp. You don't need to take care of the auth fields anymore."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," model is now just a business logic model and you use it for storing the data that is relevant for your app."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'app myApp {\n  wasp: {\n    version: "^0.12.0"\n  },\n  title: "My App",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: "/login"\n  },\n}\n\nentity User {=psl\n  id Int @id @default(autoincrement())\npsl=}\n')),(0,i.kt)("admonition",{title:"Regression Note: Multiple Auth Identities per User",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"With our old auth implementation, if you were using both Google and email auth methods, your users could sign up with Google first and then, later on, reset their password and therefore also enable logging in with their email and password. This was the only way in which a single user could have multiple login methods at the same time (Google and email)."),(0,i.kt)("p",{parentName:"admonition"},"This is not possible anymore. ",(0,i.kt)("strong",{parentName:"p"},"The new auth system doesn't support multiple login methods per user at the moment"),". We do plan to add this soon though, with the introduction of the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/wasp-lang/wasp/issues/954"},"account merging feature"),"."),(0,i.kt)("p",{parentName:"admonition"},"If you have any users that have both Google and email login credentials at the same time, you will have to pick only one of those for that user to keep when migrating them.")),(0,i.kt)("p",null,"You can read more about the new auth system in the ",(0,i.kt)("a",{parentName:"p",href:"./entities"},"Auth Entities")," section."),(0,i.kt)("h2",{id:"how-to-migrate"},"How to Migrate?"),(0,i.kt)("p",null,"These instructions are for migrating your app from Wasp ",(0,i.kt)("inlineCode",{parentName:"p"},"0.11.X")," to Wasp ",(0,i.kt)("inlineCode",{parentName:"p"},"0.12.X"),", meaning they will work for all minor releases that fit this pattern (e.g., the guide applies to ",(0,i.kt)("inlineCode",{parentName:"p"},"0.12.0"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"0.12.1"),", ...)."),(0,i.kt)("p",null,"We suggest you install the latest 0.12.X version of Wasp by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sSL https://get.wasp-lang.dev/installer.sh | sh -s\n")),(0,i.kt)("p",null,"If you get stuck at any point, don't hesitate to ask us on ",(0,i.kt)("a",{parentName:"p",href:"https://discord.gg/rzdnErX"},"our Discord server"),"."),(0,i.kt)("h3",{id:"migrating-your-project-to-the-new-structure"},"Migrating your project to the new structure"),(0,i.kt)("p",null,"You can easily migrate your old Wasp project to the new structure by following a\nseries of steps. Assuming you have a project called ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," inside the\ndirectory ",(0,i.kt)("inlineCode",{parentName:"p"},"foo"),", you should:"),(0,i.kt)("ol",{start:0},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Make sure to backup or save your project before starting the procedure (e.g.,\nby committing it to source control or creating a copy).")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install the latest ",(0,i.kt)("inlineCode",{parentName:"p"},"0.12.x")," version of Wasp.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Rename your project's root directory to something like ",(0,i.kt)("inlineCode",{parentName:"p"},"foo_old"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a new project by running ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp new foo"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Delete all files of ",(0,i.kt)("inlineCode",{parentName:"p"},"foo/src")," except ",(0,i.kt)("inlineCode",{parentName:"p"},"vite-env.d.ts"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"If ",(0,i.kt)("inlineCode",{parentName:"p"},"foo_old/src/client/public")," exists and contains any files, copy those files into\n",(0,i.kt)("inlineCode",{parentName:"p"},"foo/public"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Copy the contents of ",(0,i.kt)("inlineCode",{parentName:"p"},"foo_old/src")," into ",(0,i.kt)("inlineCode",{parentName:"p"},"foo/src"),".\n",(0,i.kt)("inlineCode",{parentName:"p"},"foo/src")," should now contain ",(0,i.kt)("inlineCode",{parentName:"p"},"vite-env.d.ts"),", ",(0,i.kt)("inlineCode",{parentName:"p"},".waspignore"),", and three subdirectories (",(0,i.kt)("inlineCode",{parentName:"p"},"server"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"client"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"shared"),").\nDon't change anything about this structure yet.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Delete redundant files and folders from ",(0,i.kt)("inlineCode",{parentName:"p"},"foo/src"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"foo/src/.waspignore")," - A new version of this file already exists at the top level."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"foo/src/client/vite-env.d.ts")," - A new version of this file already exists at the top level."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"foo/src/client/tsconfig.json")," - A new version of this file already exists at the top level."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"foo/src/server/tsconfig.json")," - A new version of this file already exists at the top level."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"foo/src/shared/tsconfig.json")," - A new version of this file already exists at the top level."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"foo/src/client/public")," - You've moved all the files from this directory in step 5."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Update all the ",(0,i.kt)("inlineCode",{parentName:"p"},"@wasp")," imports in your JS/TS source files (i.e., the ",(0,i.kt)("inlineCode",{parentName:"p"},"foo/src")," directory)."),(0,i.kt)("p",{parentName:"li"},"The easiest way to get this done is by using the tool that we prepared\nspecifically for this purpose: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/wasp-lang/wasp-codemod"},"wasp-codemod"),"."),(0,i.kt)("p",{parentName:"li"},"Clone the ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp-codemod")," repo and look at the ",(0,i.kt)("inlineCode",{parentName:"p"},"README.md")," for instructions. Shortly, you will want to go into the ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp-codemod")," repo dir, run ",(0,i.kt)("inlineCode",{parentName:"p"},"npm install")," in it and then ",(0,i.kt)("inlineCode",{parentName:"p"},"npm run imports-0-11 -- <path-to-your-wasp-project-src-dir>")," (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"npm run imports-0-11 -- ../foo/src"),"). When it is done, we suggest checking the changes it did, in case some kind of manual intervention is needed."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"NOTE:")," Running this command will modify your JS/TS files in place!"),(0,i.kt)("p",{parentName:"li"},"Alternatively, you can find all the mappings of old imports to the new ones in ",(0,i.kt)("a",{parentName:"p",href:"https://docs.google.com/spreadsheets/d/1QW-_16KRGTOaKXx9NYUtjk6m2TQ0nUMOA74hBthTH3g/edit#gid=1725669920"},"this table")," and use it to fix some/all of them manually.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Replace the Wasp file in ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," (i.e., ",(0,i.kt)("inlineCode",{parentName:"p"},"main.wasp"),") with the Wasp file from ",(0,i.kt)("inlineCode",{parentName:"p"},"foo_old"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Change the Wasp version field in your Wasp file (now residing in ",(0,i.kt)("inlineCode",{parentName:"p"},"foo"),") to ",(0,i.kt)("inlineCode",{parentName:"p"},'"^0.12.0"'),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Correct external imports in your Wasp file (now residing in ",(0,i.kt)("inlineCode",{parentName:"p"},"foo"),").\nimports. You can do this by running search-and-replace inside the file:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Change all occurences of ",(0,i.kt)("inlineCode",{parentName:"li"},"@server")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"@src/server")),(0,i.kt)("li",{parentName:"ul"},"Change all occurences of ",(0,i.kt)("inlineCode",{parentName:"li"},"@client")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"@src/client"))),(0,i.kt)("p",{parentName:"li"},"For example, if you previously had something like:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},'page LoginPage {\n  // highlight-next-line\n  // This previously resolved to src/client/LoginPage.js\n  // highlight-next-line\n  component: import Login from "@client/LoginPage"\n}\n\n// ...\n\nquery getTasks {\n  // highlight-next-line\n  // This previously resolved to src/server/queries.js\n  // highlight-next-line\n  fn: import { getTasks } from "@server/queries.js",\n}\n')),(0,i.kt)("p",{parentName:"li"},"You should change it to:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},'page LoginPage {\n  // highlight-next-line\n  // This now resolves to src/client/LoginPage.js\n  // highlight-next-line\n  component: import Login from "@src/client/LoginPage"\n}\n\n// ...\n\nquery getTasks {\n  // highlight-next-line\n  // This now resolves to src/server/queries.js\n  // highlight-next-line\n  fn: import { getTasks } from "@src/server/queries.js",\n}\n')),(0,i.kt)("p",{parentName:"li"},"Do this for all external imports in your ",(0,i.kt)("inlineCode",{parentName:"p"},".wasp")," file. After you're done, there shouldn't be any occurences of strings ",(0,i.kt)("inlineCode",{parentName:"p"},'"@server"')," or ",(0,i.kt)("inlineCode",{parentName:"p"},'"@client"'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Take all the dependencies from ",(0,i.kt)("inlineCode",{parentName:"p"},"app.dependencies")," declaration in\n",(0,i.kt)("inlineCode",{parentName:"p"},"foo/main.wasp")," and move them to ",(0,i.kt)("inlineCode",{parentName:"p"},"foo/package.json"),". Make sure to remove the ",(0,i.kt)("inlineCode",{parentName:"p"},"app.dependencies")," field from ",(0,i.kt)("inlineCode",{parentName:"p"},"foo/main.wasp"),"."),(0,i.kt)("p",{parentName:"li"},"For example, if ",(0,i.kt)("inlineCode",{parentName:"p"},"foo_old/main.waps")," had:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-css"},"app Foo {\n  // ...\n  dependencies: [ ('redux', '^4.0.5'), ('reacjt-redux', '^7.1.3')];\n}\n")),(0,i.kt)("p",{parentName:"li"},"Your ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," should now list these dependencies (Wasp already generated most of the file, you just have to list additional dependencies)."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "foo",\n  "dependencies": {\n    "wasp": "file:.wasp/out/sdk/wasp",\n    "react": "^18.2.0",\n    // highlight-next-line\n    "redux": "^4.0.5",\n    // highlight-next-line\n    "reactjs-redux": "^7.1.3"\n  },\n  "devDependencies": {\n    "typescript": "^5.1.0",\n    "vite": "^4.3.9",\n    "@types/react": "^18.0.37",\n    "prisma": "4.16.2"\n  }\n}\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Copy all lines you might have added to ",(0,i.kt)("inlineCode",{parentName:"p"},"foo_old/.gitignore")," into\n",(0,i.kt)("inlineCode",{parentName:"p"},"foo/.gitignore"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Copy the rest of the top-level files and folders (excluding ",(0,i.kt)("inlineCode",{parentName:"p"},"gitignore")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},".wasp"),"\nfile) in ",(0,i.kt)("inlineCode",{parentName:"p"},"foo_old/")," into ",(0,i.kt)("inlineCode",{parentName:"p"},"foo/")," (overwrite the existing files in ",(0,i.kt)("inlineCode",{parentName:"p"},"foo"),").")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp clean"),"."))),(0,i.kt)("p",null,"That's it! You now have a properly structured Wasp 0.12.0 project in the ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," directory.\nYour app probably doesn't quite work yet due to the breaking changes in Auth."),(0,i.kt)("p",null,"No worries, just keep reading and we'll take care of those in the next section.\nAfter you migrate your auth logic, we recommend reorganizing the ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," folder as\nyou see fit."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"As mentioned, Wasp no longer enforces separation between server-side and\nclient-side source code."),(0,i.kt)("p",{parentName:"admonition"},"You can organize source files inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," directory however you want! We\nrecommend a feature-based organization. Read more about this in ",(0,i.kt)("a",{parentName:"p",href:"#next-steps"},"the last section"),".")),(0,i.kt)("h3",{id:"migrating-auth"},"Migrating auth"),(0,i.kt)("p",null,"As shown in ",(0,i.kt)("a",{parentName:"p",href:"#new-auth"},"the previous section"),", Wasp significantly changed how authentication works in version 0.12.0.\nThis section leads you through migrating your app from Wasp 0.11.X to Wasp 0.12.X."),(0,i.kt)("p",null,"Migrating your existing app to the new auth system is a two-step process:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Migrate to the new auth system"),(0,i.kt)("li",{parentName:"ol"},"Clean up the old auth system")),(0,i.kt)("admonition",{title:"Migrating a deployed app",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"While going through these steps, we will focus first on doing the changes locally and your local development database."),(0,i.kt)("p",{parentName:"admonition"},"Once we confirm everything works well locally, we will apply the same changes to the deployed app."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"We'll put extra info for migrating a deployed app in a box like this one."))),(0,i.kt)("h4",{id:"1-migrate-to-the-new-auth-system"},"1. Migrate to the New Auth System"),(0,i.kt)("p",null,"You can follow these steps to migrate to the new auth system:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Upgrade Wasp to the latest 0.12.X version (as described ",(0,i.kt)("a",{parentName:"li",href:"https://discord.gg/rzdnErX"},"above"),").")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Bump the version to ",(0,i.kt)("inlineCode",{parentName:"p"},"^0.12.0")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"main.wasp")," (if you haven't already done this when ",(0,i.kt)("a",{parentName:"p",href:"#migrating-your-project-to-the-new-structure"},"migrating the app to the new structure"),").")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create the new auth tables in the database by running:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"wasp db migrate-dev\n")))),(0,i.kt)("p",null,"You should see the new ",(0,i.kt)("inlineCode",{parentName:"p"},"Auth"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthIdentity")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Session")," tables in your database. You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp db studio")," command to open the database in a GUI and verify the tables are there."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Write your data migration function(s) in ",(0,i.kt)("inlineCode",{parentName:"p"},"src/migrateToNewAuth.ts")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"In the previous step, we migrated the schema, and now we need to prepare logic for migrating the data."),(0,i.kt)("li",{parentName:"ul"},"Below you can find ",(0,i.kt)("a",{parentName:"li",href:"#example-migration-functions"},"examples of migration functions")," for each of the auth methods. They should be fine to use as-is, meaning you can just copy them, but you can also modify them to your needs. You will want to have one function per each auth method that you use in your app."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add the migration function(s) to the ",(0,i.kt)("inlineCode",{parentName:"p"},"db.seeds")," config:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'app myApp {\n  wasp: {\n    version: "^0.12.0"\n  },\n  // ...\n  db: {\n    seeds: [\n      import { migrateEmailAuth } from "@src/migrateToNewAuth.js",\n      import { migrateGoogleAuth } from "@src/migrateToNewAuth.js",\n    ]\n  },\n}\n\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run the migration function(s) by running:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"wasp db seed\n")),(0,i.kt)("p",{parentName:"li"},"If you added multiple migration functions, you can pick which one to run by selecting it from the list.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Verify that the auth still works by logging in with each of the auth methods.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Update your JS code to work correctly with the new auth entities."),(0,i.kt)("p",{parentName:"li"},"You should use the new auth helper functions to get the ",(0,i.kt)("inlineCode",{parentName:"p"},"email")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"username")," from a user object. Read more about the helpers in the ",(0,i.kt)("a",{parentName:"p",href:"./entities#accessing-the-auth-fields"},"Auth Entities")," section.   The helpers you are most likely to use are the ",(0,i.kt)("inlineCode",{parentName:"p"},"getEmail")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"getUsername")," helpers.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Finally, check that your app now works as it worked before. If the above steps were done correctly, everything should be working now."),(0,i.kt)("admonition",{parentName:"li",title:"Migrating a deployed app",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"After successfully performing migration locally so far, and verifying the your app works as expected, it is time to also migrate our deployed app."),(0,i.kt)("p",{parentName:"admonition"},"Before migrating your production (deployed) app, we advise you to back up your production database in case something goes wrong. Also, besides testing it in development, it's good to test the migration in a staging environment."),(0,i.kt)("p",{parentName:"admonition"},"We will perform the production migration in 2 steps:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Deploying the new code to production (client and server)."),(0,i.kt)("li",{parentName:"ul"},"Migrating the production database.")),(0,i.kt)("hr",{parentName:"admonition"}),(0,i.kt)("p",{parentName:"admonition"},"Between these two steps, so after deploying the new code to production and before migrating the production database, your app will not be working completely: new users will be able to sign up, but existing users won't be able to log in, and already logged in users will be logged out. Once you do the second step, migrating the production database, it will all be back to normal."),(0,i.kt)("p",{parentName:"admonition"},"You will likely want to keep the time between the two steps as short as you can. Make sure you know exactly what each step means before doing them for real to eliminate any surprises."),(0,i.kt)("hr",{parentName:"admonition"}),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"First step:")," deploy the new code (client and server), either via ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp deploy")," or manually."),(0,i.kt)("p",{parentName:"li"},"Check our ",(0,i.kt)("a",{parentName:"p",href:"../advanced/deployment/overview.md"},"Deployment docs")," for more details. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Second step:")," run the migration script on the production database with ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp db seed")," command."),(0,i.kt)("p",{parentName:"li"},"We wrote instructions on how to do it for ",(0,i.kt)("strong",{parentName:"p"},"Fly.io")," deployments here: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/wasp-lang/wasp/issues/1464"},"https://github.com/wasp-lang/wasp/issues/1464")," . The instructions should be similar for other deployment providers: setting up some sort of an SSH tunnel from your local machine to the production database and running the migration script locally with ",(0,i.kt)("inlineCode",{parentName:"p"},"DATABASE_URL")," pointing to the production database."))),(0,i.kt)("p",{parentName:"admonition"},"Your deployed app should be working normally now, with the new auth system.")))),(0,i.kt)("h4",{id:"2-cleanup-the-old-auth-system"},"2. Cleanup the Old Auth System"),(0,i.kt)("p",null,"Your app should be working correctly and using new auth, but to finish the migration, we need to clean up the old auth system:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Delete auth-related fields from ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," entity."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This means any fields that were used for authentication, like ",(0,i.kt)("inlineCode",{parentName:"li"},"email"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"password"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"isEmailVerified"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"emailVerificationSentAt"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"passwordResetSentAt"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"username"),", etc."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Remove the ",(0,i.kt)("inlineCode",{parentName:"p"},"externalAuthEntity")," from the ",(0,i.kt)("inlineCode",{parentName:"p"},"auth")," config and the ",(0,i.kt)("inlineCode",{parentName:"p"},"SocialLogin")," entity if you used Google or GitHub auth.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp db migrate-dev")," again to remove the redundant fields from the database.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"You can now delete the migration script and the ",(0,i.kt)("inlineCode",{parentName:"p"},"db.seeds")," config."))),(0,i.kt)("admonition",{title:"Migrating a deployed app",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"  After doing the steps above successfully locally and making sure everything is working, it is time to push these changes to the deployed app again."),(0,i.kt)("p",{parentName:"admonition"},"  ",(0,i.kt)("em",{parentName:"p"},"Deploy the app again"),", either via ",(0,i.kt)("inlineCode",{parentName:"p"},"wasp deploy")," or manually. Check our ",(0,i.kt)("a",{parentName:"p",href:"../advanced/deployment/overview.md"},"Deployment docs")," for more details. "),(0,i.kt)("p",{parentName:"admonition"},"  The database migrations will automatically run on successful deployment of the server and delete the now redundant auth-related ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," columns from the database. "),(0,i.kt)("p",{parentName:"admonition"},"  Your app is now fully migrated to the new auth system.")),(0,i.kt)("h4",{id:"example-migration-functions"},"Example Migration Functions"),(0,i.kt)("p",null,"The migration functions provided below are written with the typical use cases in mind and you can use them as-is. If your setup requires additional logic, you can use them as a good starting point and modify them to your needs."),(0,i.kt)("h5",{id:"username--password"},"Username & Password"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/migrateToNewAuth.ts"',title:'"src/migrateToNewAuth.ts"'},'import { PrismaClient } from "@prisma/client";\nimport { ProviderName, UsernameProviderData } from "wasp/server/auth";\n\nexport async function migrateUsernameAuth(prismaClient: PrismaClient) {\n  const users = await prismaClient.user.findMany({\n    include: {\n      auth: true,\n    },\n  });\n\n  for (const user of users) {\n    if (user.auth) {\n      console.log("User was already migrated, skipping", user);\n      continue;\n    }\n\n    if (!user.username || !user.password) {\n      console.log("Missing username auth info, skipping user", user);\n      continue;\n    }\n\n    const providerData: UsernameProviderData = {\n      hashedPassword: user.password,\n    };\n    const providerName: ProviderName = "username";\n\n    await prismaClient.auth.create({\n      data: {\n        identities: {\n          create: {\n            providerName,\n            providerUserId: user.username.toLowerCase(),\n            providerData: JSON.stringify(providerData),\n          },\n        },\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n      },\n    });\n  }\n}\n')),(0,i.kt)("h5",{id:"email"},"Email"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/migrateToNewAuth.ts"',title:'"src/migrateToNewAuth.ts"'},'import { PrismaClient } from "@prisma/client";\nimport { EmailProviderData, ProviderName } from "wasp/server/auth";\n\nexport async function migrateEmailAuth(prismaClient: PrismaClient) {\n  const users = await prismaClient.user.findMany({\n    include: {\n      auth: true,\n    },\n  });\n\n  for (const user of users) {\n    if (user.auth) {\n      console.log("User was already migrated, skipping", user);\n      continue;\n    }\n\n    if (!user.email || !user.password) {\n      console.log("Missing email auth info, skipping user", user);\n      continue;\n    }\n\n    const providerData: EmailProviderData = {\n      isEmailVerified: user.isEmailVerified,\n      emailVerificationSentAt:\n        user.emailVerificationSentAt?.toISOString() ?? null,\n      passwordResetSentAt: user.passwordResetSentAt?.toISOString() ?? null,\n      hashedPassword: user.password,\n    };\n    const providerName: ProviderName = "email";\n\n    await prismaClient.auth.create({\n      data: {\n        identities: {\n          create: {\n            providerName,\n            providerUserId: user.email,\n            providerData: JSON.stringify(providerData),\n          },\n        },\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n      },\n    });\n  }\n}\n')),(0,i.kt)("h5",{id:"google--github"},"Google & GitHub"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/migrateToNewAuth.ts"',title:'"src/migrateToNewAuth.ts"'},'import { PrismaClient } from "@prisma/client";\nimport { ProviderName } from "wasp/server/auth";\n\nexport async function migrateGoogleAuth(prismaClient: PrismaClient) {\n  return createSocialLoginMigration(prismaClient, "google");\n}\n\nexport async function migrateGitHubAuth(prismaClient: PrismaClient) {\n  return createSocialLoginMigration(prismaClient, "github");\n}\n\nasync function createSocialLoginMigration(\n  prismaClient: PrismaClient,\n  providerName: "google" | "github"\n) {\n  const users = await prismaClient.user.findMany({\n    include: {\n      auth: true,\n      externalAuthAssociations: true,\n    },\n  });\n\n  for (const user of users) {\n    if (user.auth) {\n      console.log("User was already migrated, skipping", user);\n      continue;\n    }\n\n    const provider = user.externalAuthAssociations.find(\n      (provider) => provider.provider === providerName\n    );\n\n    if (!provider) {\n      console.log(`Missing ${providerName} provider, skipping user`, user);\n      continue;\n    }\n\n    await prismaClient.auth.create({\n      data: {\n        identities: {\n          create: {\n            providerName,\n            providerUserId: provider.providerId,\n            providerData: JSON.stringify({}),\n          },\n        },\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n      },\n    });\n  }\n}\n')),(0,i.kt)("h3",{id:"next-steps"},"Next steps"),(0,i.kt)("p",null,"If you made it this far, you've completed all the necessary steps to get your\nWasp app working with Wasp 0.12.x. Nice work!"),(0,i.kt)("p",null,"Finally, since Wasp no longer requires you to separate your client source files\n(previously in ",(0,i.kt)("inlineCode",{parentName:"p"},"src/client"),") from server source files (previously in\n",(0,i.kt)("inlineCode",{parentName:"p"},"src/server"),"), you are now free to reorganize your project however you think is best."),(0,i.kt)("p",null,"This section is optional, but if you didn't like the server/client\nseparation, now's the perfect time to change it!"),(0,i.kt)("p",null,"For example, if your ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," dir looked like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"src\n\u2502\n\u251c\u2500\u2500 client\n\u2502\xa0\xa0 \u251c\u2500\u2500 Dashboard.tsx\n\u2502\xa0\xa0 \u251c\u2500\u2500 Login.tsx\n\u2502\xa0\xa0 \u251c\u2500\u2500 MainPage.tsx\n\u2502\xa0\xa0 \u251c\u2500\u2500 Register.tsx\n\u2502\xa0\xa0 \u251c\u2500\u2500 Task.css\n\u2502\xa0\xa0 \u251c\u2500\u2500 TaskLisk.tsx\n\u2502\xa0\xa0 \u251c\u2500\u2500 Task.tsx\n\u2502\xa0\xa0 \u2514\u2500\u2500 User.tsx\n\u251c\u2500\u2500 server\n\u2502\xa0\xa0 \u251c\u2500\u2500 taskActions.ts\n\u2502\xa0\xa0 \u251c\u2500\u2500 taskQueries.ts\n\u2502\xa0\xa0 \u251c\u2500\u2500 userActions.ts\n\u2502\xa0\xa0 \u2514\u2500\u2500 userQueries.ts\n\u2514\u2500\u2500 shared\n    \u2514\u2500\u2500 utils.ts\n")),(0,i.kt)("p",null,"You can now change it to something like this (or something else, as long as you\nkeep all source files in the ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," directory):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"src\n\u2502\n\u251c\u2500\u2500 task\n\u2502\xa0\xa0 \u251c\u2500\u2500 actions.ts    -- former taskActions.ts\n\u2502\xa0\xa0 \u251c\u2500\u2500 queries.ts    -- former taskQueries.ts\n\u2502\xa0\xa0 \u251c\u2500\u2500 Task.css\n\u2502\xa0\xa0 \u251c\u2500\u2500 TaskLisk.tsx\n\u2502\xa0\xa0 \u2514\u2500\u2500 Task.tsx\n\u251c\u2500\u2500 user\n\u2502\xa0\xa0 \u251c\u2500\u2500 actions.ts    -- former userActions.ts\n\u2502\xa0\xa0 \u251c\u2500\u2500 Dashboard.tsx\n\u2502\xa0\xa0 \u251c\u2500\u2500 Login.tsx\n\u2502\xa0\xa0 \u251c\u2500\u2500 queries.ts    -- former userQueries.ts\n\u2502\xa0\xa0 \u251c\u2500\u2500 Register.tsx\n\u2502\xa0\xa0 \u2514\u2500\u2500 User.tsx\n\u251c\u2500\u2500 MainPage.tsx\n\u2514\u2500\u2500 utils.ts\n")))}u.isMDXComponent=!0}}]);